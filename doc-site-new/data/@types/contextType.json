{
  "node": {
    "id": 988,
    "name": "contextType",
    "kind": 1024,
    "kindString": "Property",
    "flags": {
      "isStatic": true,
      "isExternal": true,
      "isOptional": true
    },
    "comment": {
      "shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
      "text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
      "tags": [
        {
          "tag": "see",
          "text": "https://reactjs.org/docs/context.html#classcontexttype\n"
        }
      ],
      "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"If set, \", _jsx(_components.code, {\n        children: \"this.context\"\n      }), \" will be set at runtime to the current value of the given Context.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
      "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"Usage:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ts\",\n          children: \"type MyContext = number\\nconst Ctx = React.createContext<MyContext>(0)\\n\\nclass Foo extends React.Component {\\n  static contextType = Ctx\\n  context!: React.ContextType<typeof Ctx>\\n  render () {\\n    return <>My context's value: {this.context}</>;\\n  }\\n}\\n\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
    },
    "sources": [
      {
        "fileName": "node_modules/@types/react/index.d.ts",
        "line": 468,
        "character": 15
      }
    ],
    "type": {
      "type": "reference",
      "id": 1154,
      "typeArguments": [
        {
          "type": "intrinsic",
          "name": "any"
        }
      ],
      "qualifiedName": "React.Context",
      "package": "@types/react",
      "name": "Context"
    },
    "tagsByName": {
      "see": "https://reactjs.org/docs/context.html#classcontexttype"
    }
  },
  "references": {},
  "meta": {
    "packageName": "@types",
    "permaLink": "@types/react/contextType",
    "menuGroup": "default"
  }
}
