{
  "node": {
    "id": 733,
    "name": "ReactNodeArray",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExternal": true
    },
    "children": [
      {
        "id": 734,
        "name": "length",
        "kind": 1024,
        "kindString": "Property",
        "flags": {
          "isExternal": true
        },
        "comment": {
          "shortText": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
          "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Gets or sets the length of the array. This is a number one higher than the highest index in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
        },
        "sources": [
          {
            "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
            "line": 1273,
            "character": 4
          }
        ],
        "type": {
          "type": "intrinsic",
          "name": "number"
        },
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.length"
        }
      },
      {
        "id": 953,
        "name": "[iterator]",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 954,
            "name": "[iterator]",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Iterator",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Iterator\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "reference",
              "id": 974,
              "typeArguments": [
                {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              ],
              "qualifiedName": "IterableIterator",
              "package": "typescript",
              "name": "IterableIterator"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.__@iterator@79"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.__@iterator@79"
        }
      },
      {
        "id": 955,
        "name": "[unscopables]",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 956,
            "name": "[unscopables]",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns an object whose properties have the value 'true'\\nwhen they will be absent when used in a 'with' statement.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "reflection",
              "declaration": {
                "id": 957,
                "name": "__type",
                "kind": 65536,
                "kindString": "Type literal",
                "flags": {
                  "isExternal": true
                },
                "children": [
                  {
                    "id": 958,
                    "name": "copyWithin",
                    "kind": 1024,
                    "kindString": "Property",
                    "flags": {
                      "isExternal": true
                    },
                    "sources": [
                      {
                        "fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                        "line": 100,
                        "character": 8
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "boolean"
                    }
                  },
                  {
                    "id": 959,
                    "name": "entries",
                    "kind": 1024,
                    "kindString": "Property",
                    "flags": {
                      "isExternal": true
                    },
                    "sources": [
                      {
                        "fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                        "line": 101,
                        "character": 8
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "boolean"
                    }
                  },
                  {
                    "id": 960,
                    "name": "fill",
                    "kind": 1024,
                    "kindString": "Property",
                    "flags": {
                      "isExternal": true
                    },
                    "sources": [
                      {
                        "fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                        "line": 102,
                        "character": 8
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "boolean"
                    }
                  },
                  {
                    "id": 961,
                    "name": "find",
                    "kind": 1024,
                    "kindString": "Property",
                    "flags": {
                      "isExternal": true
                    },
                    "sources": [
                      {
                        "fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                        "line": 103,
                        "character": 8
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "boolean"
                    }
                  },
                  {
                    "id": 962,
                    "name": "findIndex",
                    "kind": 1024,
                    "kindString": "Property",
                    "flags": {
                      "isExternal": true
                    },
                    "sources": [
                      {
                        "fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                        "line": 104,
                        "character": 8
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "boolean"
                    }
                  },
                  {
                    "id": 963,
                    "name": "keys",
                    "kind": 1024,
                    "kindString": "Property",
                    "flags": {
                      "isExternal": true
                    },
                    "sources": [
                      {
                        "fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                        "line": 105,
                        "character": 8
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "boolean"
                    }
                  },
                  {
                    "id": 964,
                    "name": "values",
                    "kind": 1024,
                    "kindString": "Property",
                    "flags": {
                      "isExternal": true
                    },
                    "sources": [
                      {
                        "fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                        "line": 106,
                        "character": 8
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "boolean"
                    }
                  }
                ],
                "groups": [
                  {
                    "title": "Properties",
                    "kind": 1024,
                    "children": [958, 959, 960, 961, 962, 963, 964]
                  }
                ]
              }
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.__@unscopables@103"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.__@unscopables@103"
        }
      },
      {
        "id": 744,
        "name": "concat",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 745,
            "name": "concat",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Combines two or more arrays.\\nThis method returns a new array without modifying any existing arrays.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 746,
                "name": "items",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isRest": true
                },
                "comment": {
                  "shortText": "Additional arrays and/or items to add to the end of the array.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Additional arrays and/or items to add to the end of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "id": 1081,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 717,
                        "qualifiedName": "React.ReactNode",
                        "package": "@types/react",
                        "name": "ReactNode"
                      }
                    ],
                    "qualifiedName": "ConcatArray",
                    "package": "typescript",
                    "name": "ConcatArray"
                  }
                }
              }
            ],
            "type": {
              "type": "array",
              "elementType": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              }
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.concat"
            }
          },
          {
            "id": 747,
            "name": "concat",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Combines two or more arrays.\\nThis method returns a new array without modifying any existing arrays.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 748,
                "name": "items",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isRest": true
                },
                "comment": {
                  "shortText": "Additional arrays and/or items to add to the end of the array.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Additional arrays and/or items to add to the end of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "array",
                  "elementType": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "id": 717,
                        "qualifiedName": "React.ReactNode",
                        "package": "@types/react",
                        "name": "ReactNode"
                      },
                      {
                        "type": "reference",
                        "id": 1081,
                        "typeArguments": [
                          {
                            "type": "reference",
                            "id": 717,
                            "qualifiedName": "React.ReactNode",
                            "package": "@types/react",
                            "name": "ReactNode"
                          }
                        ],
                        "qualifiedName": "ConcatArray",
                        "package": "typescript",
                        "name": "ConcatArray"
                      }
                    ]
                  }
                }
              }
            ],
            "type": {
              "type": "array",
              "elementType": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              }
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.concat"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.concat"
        }
      },
      {
        "id": 938,
        "name": "copyWithin",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 939,
            "name": "copyWithin",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns the this object after copying a section of the array identified by start and end\\nto the same array starting at position target\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 940,
                "name": "target",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "If target is negative, it is treated as length+target where length is the\nlength of the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If target is negative, it is treated as length+target where length is the\\nlength of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              },
              {
                "id": 941,
                "name": "start",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If start is negative, it is treated as length+start. If end is negative, it\\nis treated as length+end.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              },
              {
                "id": 942,
                "name": "end",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "If not specified, length of the this object is used as its default value.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If not specified, length of the this object is used as its default value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              }
            ],
            "type": {
              "type": "reference",
              "id": 733,
              "qualifiedName": "React.ReactNodeArray",
              "package": "@types/react",
              "name": "ReactNodeArray"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.copyWithin"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.copyWithin"
        }
      },
      {
        "id": 943,
        "name": "entries",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 944,
            "name": "entries",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Returns an iterable of key, value pairs for every entry in the array",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns an iterable of key, value pairs for every entry in the array\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "reference",
              "id": 974,
              "typeArguments": [
                {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "intrinsic",
                      "name": "number"
                    },
                    {
                      "type": "reference",
                      "id": 717,
                      "qualifiedName": "React.ReactNode",
                      "package": "@types/react",
                      "name": "ReactNode"
                    }
                  ]
                }
              ],
              "qualifiedName": "IterableIterator",
              "package": "typescript",
              "name": "IterableIterator"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.entries"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.entries"
        }
      },
      {
        "id": 786,
        "name": "every",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 787,
            "name": "every",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Determines whether all the members of an array satisfy the specified test.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Determines whether all the members of an array satisfy the specified test.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "typeParameter": [
              {
                "id": 788,
                "name": "S",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              }
            ],
            "parameters": [
              {
                "id": 789,
                "name": "predicate",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to three arguments. The every method calls\\nthe predicate function for each element in the array until the predicate returns a value\\nwhich is coercible to the Boolean value false, or until the end of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 790,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 791,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 792,
                            "name": "value",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 793,
                            "name": "index",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 794,
                            "name": "array",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "predicate",
                          "name": "value",
                          "asserts": false,
                          "targetType": {
                            "type": "reference",
                            "id": 788,
                            "qualifiedName": "S",
                            "package": "typescript",
                            "name": "S"
                          }
                        }
                      }
                    ]
                  }
                }
              },
              {
                "id": 795,
                "name": "thisArg",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An object to which the this keyword can refer in the predicate function.\\nIf thisArg is omitted, undefined is used as the this value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "predicate",
              "name": "this",
              "asserts": false,
              "targetType": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "id": 788,
                  "qualifiedName": "S",
                  "package": "typescript",
                  "name": "S"
                }
              }
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.every"
            }
          },
          {
            "id": 796,
            "name": "every",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Determines whether all the members of an array satisfy the specified test.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Determines whether all the members of an array satisfy the specified test.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 797,
                "name": "predicate",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to three arguments. The every method calls\\nthe predicate function for each element in the array until the predicate returns a value\\nwhich is coercible to the Boolean value false, or until the end of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 798,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 799,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 800,
                            "name": "value",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 801,
                            "name": "index",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 802,
                            "name": "array",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "id": 803,
                "name": "thisArg",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An object to which the this keyword can refer in the predicate function.\\nIf thisArg is omitted, undefined is used as the this value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.every"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.every"
        }
      },
      {
        "id": 933,
        "name": "fill",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 934,
            "name": "fill",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Changes all array elements from \", _jsx(_components.code, {\n        children: \"start\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"end\"\n      }), \" index to a static \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" and returns the modified array\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 935,
                "name": "value",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "value to fill array section with",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"value to fill array section with\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              },
              {
                "id": 936,
                "name": "start",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"index to start filling the array at. If start is negative, it is treated as\\nlength+start where length is the length of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              },
              {
                "id": 937,
                "name": "end",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "index to stop filling the array at. If end is negative, it is treated as\nlength+end.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"index to stop filling the array at. If end is negative, it is treated as\\nlength+end.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              }
            ],
            "type": {
              "type": "reference",
              "id": 733,
              "qualifiedName": "React.ReactNodeArray",
              "package": "@types/react",
              "name": "ReactNodeArray"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.fill"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.fill"
        }
      },
      {
        "id": 832,
        "name": "filter",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 833,
            "name": "filter",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Returns the elements of an array that meet the condition specified in a callback function.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns the elements of an array that meet the condition specified in a callback function.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "typeParameter": [
              {
                "id": 834,
                "name": "S",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              }
            ],
            "parameters": [
              {
                "id": 835,
                "name": "predicate",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 836,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 837,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 838,
                            "name": "value",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 839,
                            "name": "index",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 840,
                            "name": "array",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "predicate",
                          "name": "value",
                          "asserts": false,
                          "targetType": {
                            "type": "reference",
                            "id": 834,
                            "qualifiedName": "S",
                            "package": "typescript",
                            "name": "S"
                          }
                        }
                      }
                    ]
                  }
                }
              },
              {
                "id": 841,
                "name": "thisArg",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "array",
              "elementType": {
                "type": "reference",
                "id": 834,
                "qualifiedName": "S",
                "package": "typescript",
                "name": "S"
              }
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.filter"
            }
          },
          {
            "id": 842,
            "name": "filter",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Returns the elements of an array that meet the condition specified in a callback function.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns the elements of an array that meet the condition specified in a callback function.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 843,
                "name": "predicate",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 844,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 845,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 846,
                            "name": "value",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 847,
                            "name": "index",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 848,
                            "name": "array",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "id": 849,
                "name": "thisArg",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "array",
              "elementType": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              }
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.filter"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.filter"
        }
      },
      {
        "id": 906,
        "name": "find",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 907,
            "name": "find",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns the value of the first element in the array where predicate is true, and undefined\\notherwise.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "typeParameter": [
              {
                "id": 908,
                "name": "S",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              }
            ],
            "parameters": [
              {
                "id": 909,
                "name": "predicate",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"find calls predicate once for each element of the array, in ascending\\norder, until it finds one where predicate returns true. If such an element is found, find\\nimmediately returns that element value. Otherwise, find returns undefined.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 910,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 911,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 912,
                            "name": "value",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 913,
                            "name": "index",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 914,
                            "name": "obj",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "predicate",
                          "name": "value",
                          "asserts": false,
                          "targetType": {
                            "type": "reference",
                            "id": 908,
                            "qualifiedName": "S",
                            "package": "typescript",
                            "name": "S"
                          }
                        }
                      }
                    ]
                  }
                }
              },
              {
                "id": 915,
                "name": "thisArg",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If provided, it will be used as the this value for each invocation of\\npredicate. If it is not provided, undefined is used instead.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "intrinsic",
                  "name": "undefined"
                },
                {
                  "type": "reference",
                  "id": 908,
                  "qualifiedName": "S",
                  "package": "typescript",
                  "name": "S"
                }
              ]
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.find"
            }
          },
          {
            "id": 916,
            "name": "find",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "parameters": [
              {
                "id": 917,
                "name": "predicate",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 918,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 919,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 920,
                            "name": "value",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 921,
                            "name": "index",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 922,
                            "name": "obj",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "id": 923,
                "name": "thisArg",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "reference",
              "id": 717,
              "qualifiedName": "React.ReactNode",
              "package": "@types/react",
              "name": "ReactNode"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.find"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.find"
        }
      },
      {
        "id": 924,
        "name": "findIndex",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 925,
            "name": "findIndex",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns the index of the first element in the array where predicate is true, and -1\\notherwise.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 926,
                "name": "predicate",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"find calls predicate once for each element of the array, in ascending\\norder, until it finds one where predicate returns true. If such an element is found,\\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 927,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 928,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 929,
                            "name": "value",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 930,
                            "name": "index",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 931,
                            "name": "obj",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "id": 932,
                "name": "thisArg",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If provided, it will be used as the this value for each invocation of\\npredicate. If it is not provided, undefined is used instead.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "number"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.findIndex"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.findIndex"
        }
      },
      {
        "id": 813,
        "name": "forEach",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 814,
            "name": "forEach",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Performs the specified action for each element in an array.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Performs the specified action for each element in an array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 815,
                "name": "callbackfn",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 816,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 817,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 818,
                            "name": "value",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 819,
                            "name": "index",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 820,
                            "name": "array",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "intrinsic",
                          "name": "void"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "id": 821,
                "name": "thisArg",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.forEach"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.forEach"
        }
      },
      {
        "id": 949,
        "name": "includes",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 950,
            "name": "includes",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Determines whether an array includes a certain element, returning true or false as appropriate.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Determines whether an array includes a certain element, returning true or false as appropriate.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 951,
                "name": "searchElement",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "The element to search for.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The element to search for.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              },
              {
                "id": 952,
                "name": "fromIndex",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "The position in this array at which to begin searching for searchElement.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The position in this array at which to begin searching for searchElement.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.includes"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.includes"
        }
      },
      {
        "id": 778,
        "name": "indexOf",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 779,
            "name": "indexOf",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 780,
                "name": "searchElement",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "The value to locate in the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The value to locate in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              },
              {
                "id": 781,
                "name": "fromIndex",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "number"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.indexOf"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.indexOf"
        }
      },
      {
        "id": 749,
        "name": "join",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 750,
            "name": "join",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Adds all the elements of an array into a string, separated by the specified separator string.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Adds all the elements of an array into a string, separated by the specified separator string.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 751,
                "name": "separator",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "string"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "string"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.join"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.join"
        }
      },
      {
        "id": 945,
        "name": "keys",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 946,
            "name": "keys",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Returns an iterable of keys in the array",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns an iterable of keys in the array\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "reference",
              "id": 974,
              "typeArguments": [
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ],
              "qualifiedName": "IterableIterator",
              "package": "typescript",
              "name": "IterableIterator"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.keys"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.keys"
        }
      },
      {
        "id": 782,
        "name": "lastIndexOf",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 783,
            "name": "lastIndexOf",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 784,
                "name": "searchElement",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "The value to locate in the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The value to locate in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              },
              {
                "id": 785,
                "name": "fromIndex",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "number"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.lastIndexOf"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.lastIndexOf"
        }
      },
      {
        "id": 822,
        "name": "map",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 823,
            "name": "map",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Calls a defined callback function on each element of an array, and returns an array that contains the results.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "typeParameter": [
              {
                "id": 824,
                "name": "U",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {
                  "isExternal": true
                }
              }
            ],
            "parameters": [
              {
                "id": 825,
                "name": "callbackfn",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 826,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 827,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 828,
                            "name": "value",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 829,
                            "name": "index",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 830,
                            "name": "array",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "reference",
                          "id": 824,
                          "qualifiedName": "U",
                          "package": "typescript",
                          "name": "U"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "id": 831,
                "name": "thisArg",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "array",
              "elementType": {
                "type": "reference",
                "id": 824,
                "qualifiedName": "U",
                "package": "typescript",
                "name": "U"
              }
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.map"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.map"
        }
      },
      {
        "id": 739,
        "name": "pop",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 740,
            "name": "pop",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Removes the last element from an array and returns it.\\nIf the array is empty, undefined is returned and the array is not modified.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "reference",
              "id": 717,
              "qualifiedName": "React.ReactNode",
              "package": "@types/react",
              "name": "ReactNode"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.pop"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.pop"
        }
      },
      {
        "id": 741,
        "name": "push",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 742,
            "name": "push",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Appends new elements to the end of an array, and returns the new length of the array.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Appends new elements to the end of an array, and returns the new length of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 743,
                "name": "items",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isRest": true
                },
                "comment": {
                  "shortText": "New elements to add to the array.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"New elements to add to the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "id": 717,
                    "qualifiedName": "React.ReactNode",
                    "package": "@types/react",
                    "name": "ReactNode"
                  }
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "number"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.push"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.push"
        }
      },
      {
        "id": 850,
        "name": "reduce",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 851,
            "name": "reduce",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 852,
                "name": "callbackfn",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 853,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 854,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 855,
                            "name": "previousValue",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 856,
                            "name": "currentValue",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 857,
                            "name": "currentIndex",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 858,
                            "name": "array",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "reference",
                          "id": 717,
                          "qualifiedName": "React.ReactNode",
                          "package": "@types/react",
                          "name": "ReactNode"
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "type": {
              "type": "reference",
              "id": 717,
              "qualifiedName": "React.ReactNode",
              "package": "@types/react",
              "name": "ReactNode"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.reduce"
            }
          },
          {
            "id": 859,
            "name": "reduce",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "parameters": [
              {
                "id": 860,
                "name": "callbackfn",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 861,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 862,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 863,
                            "name": "previousValue",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 864,
                            "name": "currentValue",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 865,
                            "name": "currentIndex",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 866,
                            "name": "array",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "reference",
                          "id": 717,
                          "qualifiedName": "React.ReactNode",
                          "package": "@types/react",
                          "name": "ReactNode"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "id": 867,
                "name": "initialValue",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              }
            ],
            "type": {
              "type": "reference",
              "id": 717,
              "qualifiedName": "React.ReactNode",
              "package": "@types/react",
              "name": "ReactNode"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.reduce"
            }
          },
          {
            "id": 868,
            "name": "reduce",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "typeParameter": [
              {
                "id": 869,
                "name": "U",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {
                  "isExternal": true
                }
              }
            ],
            "parameters": [
              {
                "id": 870,
                "name": "callbackfn",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 871,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 872,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 873,
                            "name": "previousValue",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 869,
                              "qualifiedName": "U",
                              "package": "typescript",
                              "name": "U"
                            }
                          },
                          {
                            "id": 874,
                            "name": "currentValue",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 875,
                            "name": "currentIndex",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 876,
                            "name": "array",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "reference",
                          "id": 869,
                          "qualifiedName": "U",
                          "package": "typescript",
                          "name": "U"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "id": 877,
                "name": "initialValue",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reference",
                  "id": 869,
                  "qualifiedName": "U",
                  "package": "typescript",
                  "name": "U"
                }
              }
            ],
            "type": {
              "type": "reference",
              "id": 869,
              "qualifiedName": "U",
              "package": "typescript",
              "name": "U"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.reduce"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.reduce"
        }
      },
      {
        "id": 878,
        "name": "reduceRight",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 879,
            "name": "reduceRight",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 880,
                "name": "callbackfn",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 881,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 882,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 883,
                            "name": "previousValue",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 884,
                            "name": "currentValue",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 885,
                            "name": "currentIndex",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 886,
                            "name": "array",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "reference",
                          "id": 717,
                          "qualifiedName": "React.ReactNode",
                          "package": "@types/react",
                          "name": "ReactNode"
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "type": {
              "type": "reference",
              "id": 717,
              "qualifiedName": "React.ReactNode",
              "package": "@types/react",
              "name": "ReactNode"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.reduceRight"
            }
          },
          {
            "id": 887,
            "name": "reduceRight",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "parameters": [
              {
                "id": 888,
                "name": "callbackfn",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 889,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 890,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 891,
                            "name": "previousValue",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 892,
                            "name": "currentValue",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 893,
                            "name": "currentIndex",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 894,
                            "name": "array",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "reference",
                          "id": 717,
                          "qualifiedName": "React.ReactNode",
                          "package": "@types/react",
                          "name": "ReactNode"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "id": 895,
                "name": "initialValue",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              }
            ],
            "type": {
              "type": "reference",
              "id": 717,
              "qualifiedName": "React.ReactNode",
              "package": "@types/react",
              "name": "ReactNode"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.reduceRight"
            }
          },
          {
            "id": 896,
            "name": "reduceRight",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "typeParameter": [
              {
                "id": 897,
                "name": "U",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {
                  "isExternal": true
                }
              }
            ],
            "parameters": [
              {
                "id": 898,
                "name": "callbackfn",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 899,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 900,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 901,
                            "name": "previousValue",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 897,
                              "qualifiedName": "U",
                              "package": "typescript",
                              "name": "U"
                            }
                          },
                          {
                            "id": 902,
                            "name": "currentValue",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 903,
                            "name": "currentIndex",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 904,
                            "name": "array",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "reference",
                          "id": 897,
                          "qualifiedName": "U",
                          "package": "typescript",
                          "name": "U"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "id": 905,
                "name": "initialValue",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reference",
                  "id": 897,
                  "qualifiedName": "U",
                  "package": "typescript",
                  "name": "U"
                }
              }
            ],
            "type": {
              "type": "reference",
              "id": 897,
              "qualifiedName": "U",
              "package": "typescript",
              "name": "U"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.reduceRight"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.reduceRight"
        }
      },
      {
        "id": 752,
        "name": "reverse",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 753,
            "name": "reverse",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Reverses the elements in an array in place.\\nThis method mutates the array and returns a reference to the same array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "array",
              "elementType": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              }
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.reverse"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.reverse"
        }
      },
      {
        "id": 754,
        "name": "shift",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 755,
            "name": "shift",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Removes the first element from an array and returns it.\\nIf the array is empty, undefined is returned and the array is not modified.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "reference",
              "id": 717,
              "qualifiedName": "React.ReactNode",
              "package": "@types/react",
              "name": "ReactNode"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.shift"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.shift"
        }
      },
      {
        "id": 756,
        "name": "slice",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 757,
            "name": "slice",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns a copy of a section of an array.\\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\\nFor example, -2 refers to the second to last element of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 758,
                "name": "start",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The beginning index of the specified portion of the array.\\nIf start is undefined, then the slice begins at index 0.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              },
              {
                "id": 759,
                "name": "end",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\\nIf end is undefined, then the slice extends to the end of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              }
            ],
            "type": {
              "type": "array",
              "elementType": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              }
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.slice"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.slice"
        }
      },
      {
        "id": 804,
        "name": "some",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 805,
            "name": "some",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Determines whether the specified callback function returns true for any element of an array.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Determines whether the specified callback function returns true for any element of an array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 806,
                "name": "predicate",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to three arguments. The some method calls\\nthe predicate function for each element in the array until the predicate returns a value\\nwhich is coercible to the Boolean value true, or until the end of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 807,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 808,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 809,
                            "name": "value",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 810,
                            "name": "index",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "intrinsic",
                              "name": "number"
                            }
                          },
                          {
                            "id": 811,
                            "name": "array",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "array",
                              "elementType": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              }
                            }
                          }
                        ],
                        "type": {
                          "type": "intrinsic",
                          "name": "unknown"
                        }
                      }
                    ]
                  }
                }
              },
              {
                "id": 812,
                "name": "thisArg",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An object to which the this keyword can refer in the predicate function.\\nIf thisArg is omitted, undefined is used as the this value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.some"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.some"
        }
      },
      {
        "id": 760,
        "name": "sort",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 761,
            "name": "sort",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Sorts an array in place.\\nThis method mutates the array and returns a reference to the same array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 762,
                "name": "compareFn",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n```ts\n[11,2,22,1].sort((a, b) => a - b)\n```\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"Function used to determine the order of the elements. It is expected to return\\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ts\",\n          children: \"[11,2,22,1].sort((a, b) => a - b)\\n\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 763,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 764,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "parameters": [
                          {
                            "id": 765,
                            "name": "a",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          },
                          {
                            "id": 766,
                            "name": "b",
                            "kind": 32768,
                            "kindString": "Parameter",
                            "flags": {
                              "isExternal": true
                            },
                            "type": {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          }
                        ],
                        "type": {
                          "type": "intrinsic",
                          "name": "number"
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "type": {
              "type": "reference",
              "id": 733,
              "qualifiedName": "React.ReactNodeArray",
              "package": "@types/react",
              "name": "ReactNodeArray"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.sort"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.sort"
        }
      },
      {
        "id": 767,
        "name": "splice",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 768,
            "name": "splice",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
              "returns": "An array containing the elements that were deleted.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "returnsMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An array containing the elements that were deleted.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 769,
                "name": "start",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "The zero-based location in the array from which to start removing elements.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The zero-based location in the array from which to start removing elements.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              },
              {
                "id": 770,
                "name": "deleteCount",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "comment": {
                  "shortText": "The number of elements to remove.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The number of elements to remove.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              }
            ],
            "type": {
              "type": "array",
              "elementType": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              }
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.splice"
            }
          },
          {
            "id": 771,
            "name": "splice",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
              "returns": "An array containing the elements that were deleted.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "returnsMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An array containing the elements that were deleted.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 772,
                "name": "start",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "The zero-based location in the array from which to start removing elements.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The zero-based location in the array from which to start removing elements.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              },
              {
                "id": 773,
                "name": "deleteCount",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "comment": {
                  "shortText": "The number of elements to remove.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The number of elements to remove.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                }
              },
              {
                "id": 774,
                "name": "items",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isRest": true
                },
                "comment": {
                  "shortText": "Elements to insert into the array in place of the deleted elements.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Elements to insert into the array in place of the deleted elements.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "id": 717,
                    "qualifiedName": "React.ReactNode",
                    "package": "@types/react",
                    "name": "ReactNode"
                  }
                }
              }
            ],
            "type": {
              "type": "array",
              "elementType": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              }
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.splice"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.splice"
        }
      },
      {
        "id": 737,
        "name": "toLocaleString",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 738,
            "name": "toLocaleString",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "string"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.toLocaleString"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.toLocaleString"
        }
      },
      {
        "id": 735,
        "name": "toString",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 736,
            "name": "toString",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Returns a string representation of an array.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns a string representation of an array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "string"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.toString"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.toString"
        }
      },
      {
        "id": 775,
        "name": "unshift",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 776,
            "name": "unshift",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Inserts new elements at the start of an array, and returns the new length of the array.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Inserts new elements at the start of an array, and returns the new length of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 777,
                "name": "items",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isRest": true
                },
                "comment": {
                  "shortText": "Elements to insert at the start of the array.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Elements to insert at the start of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "id": 717,
                    "qualifiedName": "React.ReactNode",
                    "package": "@types/react",
                    "name": "ReactNode"
                  }
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "number"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.unshift"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.unshift"
        }
      },
      {
        "id": 947,
        "name": "values",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "signatures": [
          {
            "id": 948,
            "name": "values",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Returns an iterable of values in the array",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns an iterable of values in the array\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "reference",
              "id": 974,
              "typeArguments": [
                {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              ],
              "qualifiedName": "IterableIterator",
              "package": "typescript",
              "name": "IterableIterator"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Array.values"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "Array.values"
        }
      }
    ],
    "groups": [
      {
        "title": "Properties",
        "kind": 1024,
        "children": [734]
      },
      {
        "title": "Methods",
        "kind": 2048,
        "children": [
          953, 955, 744, 938, 943, 786, 933, 832, 906, 924, 813, 949, 778, 749, 945, 782, 822, 739,
          741, 850, 878, 752, 754, 756, 804, 760, 767, 737, 735, 775, 947
        ]
      }
    ],
    "sources": [
      {
        "fileName": "node_modules/@types/react/index.d.ts",
        "line": 239,
        "character": 14
      }
    ],
    "extendedTypes": [
      {
        "type": "reference",
        "typeArguments": [
          {
            "type": "reference",
            "id": 717,
            "qualifiedName": "React.ReactNode",
            "package": "@types/react",
            "name": "ReactNode"
          }
        ],
        "qualifiedName": "Array",
        "package": "typescript",
        "name": "Array"
      }
    ]
  },
  "references": {},
  "meta": {
    "packageName": "@types",
    "permaLink": "@types/react/ReactNodeArray",
    "menuGroup": "default"
  }
}
