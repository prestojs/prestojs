{
  "node": {
    "id": 987,
    "name": "Component",
    "kind": 128,
    "kindString": "Class",
    "flags": {
      "isExternal": true
    },
    "children": [
      {
        "id": 989,
        "name": "constructor",
        "kind": 512,
        "kindString": "Constructor",
        "flags": {
          "isExternal": true
        },
        "sources": [
          {
            "fileName": "node_modules/@types/react/index.d.ts",
            "line": 488,
            "character": 8
          }
        ],
        "signatures": [
          {
            "id": 990,
            "name": "new Component",
            "kind": 16384,
            "kindString": "Constructor signature",
            "flags": {
              "isExternal": true
            },
            "typeParameter": [
              {
                "id": 992,
                "name": "P",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {
                  "isExternal": true
                },
                "default": {
                  "type": "reflection",
                  "declaration": {
                    "id": 991,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    }
                  }
                }
              },
              {
                "id": 994,
                "name": "S",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {
                  "isExternal": true
                },
                "default": {
                  "type": "reflection",
                  "declaration": {
                    "id": 993,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    }
                  }
                }
              },
              {
                "id": 995,
                "name": "SS",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {
                  "isExternal": true
                },
                "default": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "parameters": [
              {
                "id": 996,
                "name": "props",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 992,
                      "qualifiedName": "React.Component.P",
                      "package": "@types/react",
                      "name": "P"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              }
            ],
            "type": {
              "type": "reference",
              "id": 987,
              "typeArguments": [
                {
                  "type": "reference",
                  "id": 992,
                  "qualifiedName": "React.Component.P",
                  "package": "@types/react",
                  "name": "P"
                },
                {
                  "type": "reference",
                  "id": 994,
                  "qualifiedName": "React.Component.S",
                  "package": "@types/react",
                  "name": "S"
                },
                {
                  "type": "reference",
                  "id": 995,
                  "qualifiedName": "React.Component.SS",
                  "package": "@types/react",
                  "name": "SS"
                }
              ],
              "qualifiedName": "React.Component",
              "package": "@types/react",
              "name": "Component"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "ComponentLifecycle<P, S, SS>.constructor"
            }
          },
          {
            "id": 997,
            "name": "new Component",
            "kind": 16384,
            "kindString": "Constructor signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "tags": [
                {
                  "tag": "deprecated",
                  "text": ""
                },
                {
                  "tag": "see",
                  "text": "https://reactjs.org/docs/legacy-context.html\n"
                }
              ]
            },
            "typeParameter": [
              {
                "id": 999,
                "name": "P",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {
                  "isExternal": true
                },
                "default": {
                  "type": "reflection",
                  "declaration": {
                    "id": 998,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    }
                  }
                }
              },
              {
                "id": 1001,
                "name": "S",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {
                  "isExternal": true
                },
                "default": {
                  "type": "reflection",
                  "declaration": {
                    "id": 1000,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    }
                  }
                }
              },
              {
                "id": 1002,
                "name": "SS",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {
                  "isExternal": true
                },
                "default": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "parameters": [
              {
                "id": 1003,
                "name": "props",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 992,
                  "qualifiedName": "React.Component.P",
                  "package": "@types/react",
                  "name": "P"
                }
              },
              {
                "id": 1004,
                "name": "context",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "reference",
              "id": 987,
              "typeArguments": [
                {
                  "type": "reference",
                  "id": 992,
                  "qualifiedName": "React.Component.P",
                  "package": "@types/react",
                  "name": "P"
                },
                {
                  "type": "reference",
                  "id": 994,
                  "qualifiedName": "React.Component.S",
                  "package": "@types/react",
                  "name": "S"
                },
                {
                  "type": "reference",
                  "id": 995,
                  "qualifiedName": "React.Component.SS",
                  "package": "@types/react",
                  "name": "SS"
                }
              ],
              "qualifiedName": "React.Component",
              "package": "@types/react",
              "name": "Component"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "ComponentLifecycle<P, S, SS>.constructor"
            },
            "deprecated": true,
            "tagsByName": {
              "deprecated": "",
              "see": "https://reactjs.org/docs/legacy-context.html"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "name": "ComponentLifecycle<P, S, SS>.constructor"
        }
      },
      {
        "id": 1005,
        "name": "context",
        "kind": 1024,
        "kindString": "Property",
        "flags": {
          "isExternal": true
        },
        "comment": {
          "shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.",
          "text": "```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
          "tags": [
            {
              "tag": "see",
              "text": "https://reactjs.org/docs/context.html\n"
            }
          ],
          "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"If using the new style context, re-declare this in your class to be the\\n\", _jsx(_components.code, {\n        children: \"React.ContextType\"\n      }), \" of your \", _jsx(_components.code, {\n        children: \"static contextType\"\n      }), \".\\nShould be used with type annotation or static contextType.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
          "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"static contextType = MyContext\\n// For TS pre-3.7:\\ncontext!: React.ContextType<typeof MyContext>\\n// For TS 3.7 and above:\\ndeclare context: React.ContextType<typeof MyContext>\\n\"\n      })\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
        },
        "sources": [
          {
            "fileName": "node_modules/@types/react/index.d.ts",
            "line": 486,
            "character": 8
          }
        ],
        "type": {
          "type": "intrinsic",
          "name": "any"
        },
        "tagsByName": {
          "see": "https://reactjs.org/docs/context.html"
        }
      },
      {
        "id": 1024,
        "name": "props",
        "kind": 1024,
        "kindString": "Property",
        "flags": {
          "isExternal": true,
          "isReadonly": true
        },
        "sources": [
          {
            "fileName": "node_modules/@types/react/index.d.ts",
            "line": 511,
            "character": 17
          }
        ],
        "type": {
          "type": "intersection",
          "types": [
            {
              "type": "reference",
              "id": 1159,
              "typeArguments": [
                {
                  "type": "reference",
                  "id": 992,
                  "qualifiedName": "React.Component.P",
                  "package": "@types/react",
                  "name": "P"
                }
              ],
              "qualifiedName": "Readonly",
              "package": "typescript",
              "name": "Readonly"
            },
            {
              "type": "reference",
              "id": 1159,
              "typeArguments": [
                {
                  "type": "reflection",
                  "declaration": {
                    "id": 1025,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "children": [
                      {
                        "id": 1026,
                        "name": "children",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {
                          "isExternal": true,
                          "isOptional": true
                        },
                        "sources": [
                          {
                            "fileName": "node_modules/@types/react/index.d.ts",
                            "line": 511,
                            "character": 49
                          }
                        ],
                        "type": {
                          "type": "reference",
                          "id": 717,
                          "qualifiedName": "React.ReactNode",
                          "package": "@types/react",
                          "name": "ReactNode"
                        }
                      }
                    ],
                    "groups": [
                      {
                        "title": "Properties",
                        "kind": 1024,
                        "children": [1026]
                      }
                    ]
                  }
                }
              ],
              "qualifiedName": "Readonly",
              "package": "typescript",
              "name": "Readonly"
            }
          ]
        }
      },
      {
        "id": 1028,
        "name": "refs",
        "kind": 1024,
        "kindString": "Property",
        "flags": {
          "isExternal": true
        },
        "comment": {
          "tags": [
            {
              "tag": "deprecated",
              "text": "\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"
            }
          ]
        },
        "sources": [
          {
            "fileName": "node_modules/@types/react/index.d.ts",
            "line": 517,
            "character": 8
          }
        ],
        "type": {
          "type": "reflection",
          "declaration": {
            "id": 1029,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {
              "isExternal": true
            },
            "indexSignature": {
              "id": 1030,
              "name": "__index",
              "kind": 8192,
              "kindString": "Index signature",
              "flags": {
                "isExternal": true
              },
              "parameters": [
                {
                  "id": 1031,
                  "name": "key",
                  "kind": 32768,
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  }
                }
              ],
              "type": {
                "type": "reference",
                "id": 1167,
                "qualifiedName": "React.ReactInstance",
                "package": "@types/react",
                "name": "ReactInstance"
              }
            }
          }
        },
        "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
        "tagsByName": {
          "deprecated": "https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs"
        }
      },
      {
        "id": 1027,
        "name": "state",
        "kind": 1024,
        "kindString": "Property",
        "flags": {
          "isExternal": true
        },
        "sources": [
          {
            "fileName": "node_modules/@types/react/index.d.ts",
            "line": 512,
            "character": 8
          }
        ],
        "type": {
          "type": "reference",
          "id": 1159,
          "typeArguments": [
            {
              "type": "reference",
              "id": 994,
              "qualifiedName": "React.Component.S",
              "package": "@types/react",
              "name": "S"
            }
          ],
          "qualifiedName": "Readonly",
          "package": "typescript",
          "name": "Readonly"
        }
      },
      {
        "id": 988,
        "name": "contextType",
        "kind": 1024,
        "kindString": "Property",
        "flags": {
          "isStatic": true,
          "isExternal": true,
          "isOptional": true
        },
        "comment": {
          "shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
          "text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
          "tags": [
            {
              "tag": "see",
              "text": "https://reactjs.org/docs/context.html#classcontexttype\n"
            }
          ],
          "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"If set, \", _jsx(_components.code, {\n        children: \"this.context\"\n      }), \" will be set at runtime to the current value of the given Context.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
          "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"Usage:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ts\",\n          children: \"type MyContext = number\\nconst Ctx = React.createContext<MyContext>(0)\\n\\nclass Foo extends React.Component {\\n  static contextType = Ctx\\n  context!: React.ContextType<typeof Ctx>\\n  render () {\\n    return <>My context's value: {this.context}</>;\\n  }\\n}\\n\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
        },
        "sources": [
          {
            "fileName": "node_modules/@types/react/index.d.ts",
            "line": 468,
            "character": 15
          }
        ],
        "type": {
          "type": "reference",
          "id": 1154,
          "typeArguments": [
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "qualifiedName": "React.Context",
          "package": "@types/react",
          "name": "Context"
        },
        "tagsByName": {
          "see": "https://reactjs.org/docs/context.html#classcontexttype"
        }
      },
      {
        "id": 1056,
        "name": "UNSAFE_componentWillMount",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true,
          "isOptional": true
        },
        "signatures": [
          {
            "id": 1057,
            "name": "UNSAFE_componentWillMount",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
              "text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
              "tags": [
                {
                  "tag": "deprecated",
                  "text": "16.3, use componentDidMount or the constructor instead"
                },
                {
                  "tag": "see",
                  "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                },
                {
                  "tag": "see",
                  "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                }
              ],
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Called immediately before mounting occurs, and before \", _jsx(_components.code, {\n        children: \"Component#render\"\n      }), \".\\nAvoid introducing any side-effects or subscriptions in this method.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"This method will not stop working in React 17.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 1132,
              "name": "ComponentLifecycle.UNSAFE_componentWillMount"
            },
            "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use componentDidMount or the constructor instead\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
            "tagsByName": {
              "deprecated": "16.3, use componentDidMount or the constructor instead",
              "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 1131,
          "name": "ComponentLifecycle.UNSAFE_componentWillMount"
        }
      },
      {
        "id": 1062,
        "name": "UNSAFE_componentWillReceiveProps",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true,
          "isOptional": true
        },
        "signatures": [
          {
            "id": 1063,
            "name": "UNSAFE_componentWillReceiveProps",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
              "text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
              "tags": [
                {
                  "tag": "deprecated",
                  "text": "16.3, use static getDerivedStateFromProps instead"
                },
                {
                  "tag": "see",
                  "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                },
                {
                  "tag": "see",
                  "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                }
              ],
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called when the component may be receiving new props.\\nReact may call this even if props have not changed, so be sure to compare new and existing\\nprops if you only want to handle changes.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Calling \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" generally does not trigger this method.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This method will not stop working in React 17.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 1064,
                "name": "nextProps",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 992,
                      "qualifiedName": "React.Component.P",
                      "package": "@types/react",
                      "name": "P"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              },
              {
                "id": 1065,
                "name": "nextContext",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 1138,
              "name": "ComponentLifecycle.UNSAFE_componentWillReceiveProps"
            },
            "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use static getDerivedStateFromProps instead\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
            "tagsByName": {
              "deprecated": "16.3, use static getDerivedStateFromProps instead",
              "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 1137,
          "name": "ComponentLifecycle.UNSAFE_componentWillReceiveProps"
        }
      },
      {
        "id": 1071,
        "name": "UNSAFE_componentWillUpdate",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true,
          "isOptional": true
        },
        "signatures": [
          {
            "id": 1072,
            "name": "UNSAFE_componentWillUpdate",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
              "text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
              "tags": [
                {
                  "tag": "deprecated",
                  "text": "16.3, use getSnapshotBeforeUpdate instead"
                },
                {
                  "tag": "see",
                  "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                },
                {
                  "tag": "see",
                  "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                }
              ],
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately before rendering when new props or state is received. Not called for the initial render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Note: You cannot call \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" here.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This method will not stop working in React 17.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 1073,
                "name": "nextProps",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 992,
                      "qualifiedName": "React.Component.P",
                      "package": "@types/react",
                      "name": "P"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              },
              {
                "id": 1074,
                "name": "nextState",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 994,
                      "qualifiedName": "React.Component.S",
                      "package": "@types/react",
                      "name": "S"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              },
              {
                "id": 1075,
                "name": "nextContext",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 1147,
              "name": "ComponentLifecycle.UNSAFE_componentWillUpdate"
            },
            "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use getSnapshotBeforeUpdate instead\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
            "tagsByName": {
              "deprecated": "16.3, use getSnapshotBeforeUpdate instead",
              "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 1146,
          "name": "ComponentLifecycle.UNSAFE_componentWillUpdate"
        }
      },
      {
        "id": 1041,
        "name": "componentDidCatch",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true,
          "isOptional": true
        },
        "signatures": [
          {
            "id": 1042,
            "name": "componentDidCatch",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Catches exceptions generated in descendant components. Unhandled exceptions will cause\\nthe entire component tree to unmount.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 1043,
                "name": "error",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1168,
                  "qualifiedName": "Error",
                  "package": "typescript",
                  "name": "Error"
                }
              },
              {
                "id": 1044,
                "name": "errorInfo",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1173,
                  "qualifiedName": "React.ErrorInfo",
                  "package": "@types/react",
                  "name": "ErrorInfo"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 1117,
              "name": "ComponentLifecycle.componentDidCatch"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 1116,
          "name": "ComponentLifecycle.componentDidCatch"
        }
      },
      {
        "id": 1032,
        "name": "componentDidMount",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true,
          "isOptional": true
        },
        "signatures": [
          {
            "id": 1033,
            "name": "componentDidMount",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately after a component is mounted. Setting state here will trigger re-rendering.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 1108,
              "name": "ComponentLifecycle.componentDidMount"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 1107,
          "name": "ComponentLifecycle.componentDidMount"
        }
      },
      {
        "id": 1049,
        "name": "componentDidUpdate",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true,
          "isOptional": true
        },
        "signatures": [
          {
            "id": 1050,
            "name": "componentDidUpdate",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Called immediately after updating occurs. Not called for the initial render.",
              "text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately after updating occurs. Not called for the initial render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 1051,
                "name": "prevProps",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 992,
                      "qualifiedName": "React.Component.P",
                      "package": "@types/react",
                      "name": "P"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              },
              {
                "id": 1052,
                "name": "prevState",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 994,
                      "qualifiedName": "React.Component.S",
                      "package": "@types/react",
                      "name": "S"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              },
              {
                "id": 1053,
                "name": "snapshot",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "type": {
                  "type": "reference",
                  "id": 995,
                  "qualifiedName": "React.Component.SS",
                  "package": "@types/react",
                  "name": "SS"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 1125,
              "name": "ComponentLifecycle.componentDidUpdate"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 1124,
          "name": "ComponentLifecycle.componentDidUpdate"
        }
      },
      {
        "id": 1054,
        "name": "componentWillMount",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true,
          "isOptional": true
        },
        "signatures": [
          {
            "id": 1055,
            "name": "componentWillMount",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
              "text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
              "tags": [
                {
                  "tag": "deprecated",
                  "text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
                },
                {
                  "tag": "see",
                  "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                },
                {
                  "tag": "see",
                  "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                }
              ],
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Called immediately before mounting occurs, and before \", _jsx(_components.code, {\n        children: \"Component#render\"\n      }), \".\\nAvoid introducing any side-effects or subscriptions in this method.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 1130,
              "name": "ComponentLifecycle.componentWillMount"
            },
            "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use componentDidMount or the constructor instead; will stop working in React 17\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
            "tagsByName": {
              "deprecated": "16.3, use componentDidMount or the constructor instead; will stop working in React 17",
              "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 1129,
          "name": "ComponentLifecycle.componentWillMount"
        }
      },
      {
        "id": 1058,
        "name": "componentWillReceiveProps",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true,
          "isOptional": true
        },
        "signatures": [
          {
            "id": 1059,
            "name": "componentWillReceiveProps",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
              "text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
              "tags": [
                {
                  "tag": "deprecated",
                  "text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
                },
                {
                  "tag": "see",
                  "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                },
                {
                  "tag": "see",
                  "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                }
              ],
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called when the component may be receiving new props.\\nReact may call this even if props have not changed, so be sure to compare new and existing\\nprops if you only want to handle changes.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Calling \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" generally does not trigger this method.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 1060,
                "name": "nextProps",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 992,
                      "qualifiedName": "React.Component.P",
                      "package": "@types/react",
                      "name": "P"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              },
              {
                "id": 1061,
                "name": "nextContext",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 1134,
              "name": "ComponentLifecycle.componentWillReceiveProps"
            },
            "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use static getDerivedStateFromProps instead; will stop working in React 17\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
            "tagsByName": {
              "deprecated": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17",
              "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 1133,
          "name": "ComponentLifecycle.componentWillReceiveProps"
        }
      },
      {
        "id": 1039,
        "name": "componentWillUnmount",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true,
          "isOptional": true
        },
        "signatures": [
          {
            "id": 1040,
            "name": "componentWillUnmount",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\\ncancelled network requests, or cleaning up any DOM elements created in \", _jsx(_components.code, {\n        children: \"componentDidMount\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 1115,
              "name": "ComponentLifecycle.componentWillUnmount"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 1114,
          "name": "ComponentLifecycle.componentWillUnmount"
        }
      },
      {
        "id": 1066,
        "name": "componentWillUpdate",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true,
          "isOptional": true
        },
        "signatures": [
          {
            "id": 1067,
            "name": "componentWillUpdate",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
              "text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
              "tags": [
                {
                  "tag": "deprecated",
                  "text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
                },
                {
                  "tag": "see",
                  "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                },
                {
                  "tag": "see",
                  "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                }
              ],
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately before rendering when new props or state is received. Not called for the initial render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Note: You cannot call \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" here.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 1068,
                "name": "nextProps",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 992,
                      "qualifiedName": "React.Component.P",
                      "package": "@types/react",
                      "name": "P"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              },
              {
                "id": 1069,
                "name": "nextState",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 994,
                      "qualifiedName": "React.Component.S",
                      "package": "@types/react",
                      "name": "S"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              },
              {
                "id": 1070,
                "name": "nextContext",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 1142,
              "name": "ComponentLifecycle.componentWillUpdate"
            },
            "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
            "tagsByName": {
              "deprecated": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17",
              "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 1141,
          "name": "ComponentLifecycle.componentWillUpdate"
        }
      },
      {
        "id": 1017,
        "name": "forceUpdate",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "sources": [
          {
            "fileName": "node_modules/@types/react/index.d.ts",
            "line": 503,
            "character": 8
          }
        ],
        "signatures": [
          {
            "id": 1018,
            "name": "forceUpdate",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "parameters": [
              {
                "id": 1019,
                "name": "callback",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 1020,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 1021,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "type": {
                          "type": "intrinsic",
                          "name": "void"
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            }
          }
        ]
      },
      {
        "id": 1045,
        "name": "getSnapshotBeforeUpdate",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true,
          "isOptional": true
        },
        "signatures": [
          {
            "id": 1046,
            "name": "getSnapshotBeforeUpdate",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
              "text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Runs before React applies the result of \", _jsx(_components.code, {\n        children: \"render\"\n      }), \" to the document, and\\nreturns an object to be given to componentDidUpdate. Useful for saving\\nthings such as scroll position before \", _jsx(_components.code, {\n        children: \"render\"\n      }), \" causes changes to it.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\\nlifecycle events from running.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 1047,
                "name": "prevProps",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 992,
                      "qualifiedName": "React.Component.P",
                      "package": "@types/react",
                      "name": "P"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              },
              {
                "id": 1048,
                "name": "prevState",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 994,
                      "qualifiedName": "React.Component.S",
                      "package": "@types/react",
                      "name": "S"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              }
            ],
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 995,
                  "qualifiedName": "React.Component.SS",
                  "package": "@types/react",
                  "name": "SS"
                }
              ]
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 1121,
              "name": "ComponentLifecycle.getSnapshotBeforeUpdate"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 1120,
          "name": "ComponentLifecycle.getSnapshotBeforeUpdate"
        }
      },
      {
        "id": 1022,
        "name": "render",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "sources": [
          {
            "fileName": "node_modules/@types/react/index.d.ts",
            "line": 504,
            "character": 8
          }
        ],
        "signatures": [
          {
            "id": 1023,
            "name": "render",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "type": {
              "type": "reference",
              "id": 717,
              "qualifiedName": "React.ReactNode",
              "package": "@types/react",
              "name": "ReactNode"
            }
          }
        ]
      },
      {
        "id": 1006,
        "name": "setState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true
        },
        "sources": [
          {
            "fileName": "node_modules/@types/react/index.d.ts",
            "line": 498,
            "character": 8
          }
        ],
        "signatures": [
          {
            "id": 1007,
            "name": "setState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "typeParameter": [
              {
                "id": 1008,
                "name": "K",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "intrinsic",
                      "name": "string"
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    },
                    {
                      "type": "intrinsic",
                      "name": "symbol"
                    }
                  ]
                }
              }
            ],
            "parameters": [
              {
                "id": 1009,
                "name": "state",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "reference",
                      "id": 994,
                      "qualifiedName": "React.Component.S",
                      "package": "@types/react",
                      "name": "S"
                    },
                    {
                      "type": "reflection",
                      "declaration": {
                        "id": 1010,
                        "name": "__type",
                        "kind": 65536,
                        "kindString": "Type literal",
                        "flags": {
                          "isExternal": true
                        },
                        "signatures": [
                          {
                            "id": 1011,
                            "name": "__type",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {
                              "isExternal": true
                            },
                            "parameters": [
                              {
                                "id": 1012,
                                "name": "prevState",
                                "kind": 32768,
                                "kindString": "Parameter",
                                "flags": {
                                  "isExternal": true
                                },
                                "type": {
                                  "type": "reference",
                                  "id": 1159,
                                  "typeArguments": [
                                    {
                                      "type": "reference",
                                      "id": 994,
                                      "qualifiedName": "React.Component.S",
                                      "package": "@types/react",
                                      "name": "S"
                                    }
                                  ],
                                  "qualifiedName": "Readonly",
                                  "package": "typescript",
                                  "name": "Readonly"
                                }
                              },
                              {
                                "id": 1013,
                                "name": "props",
                                "kind": 32768,
                                "kindString": "Parameter",
                                "flags": {
                                  "isExternal": true
                                },
                                "type": {
                                  "type": "reference",
                                  "id": 1159,
                                  "typeArguments": [
                                    {
                                      "type": "reference",
                                      "id": 992,
                                      "qualifiedName": "React.Component.P",
                                      "package": "@types/react",
                                      "name": "P"
                                    }
                                  ],
                                  "qualifiedName": "Readonly",
                                  "package": "typescript",
                                  "name": "Readonly"
                                }
                              }
                            ],
                            "type": {
                              "type": "union",
                              "types": [
                                {
                                  "type": "literal",
                                  "value": null
                                },
                                {
                                  "type": "reference",
                                  "id": 994,
                                  "qualifiedName": "React.Component.S",
                                  "package": "@types/react",
                                  "name": "S"
                                },
                                {
                                  "type": "reference",
                                  "id": 1164,
                                  "typeArguments": [
                                    {
                                      "type": "reference",
                                      "id": 994,
                                      "qualifiedName": "React.Component.S",
                                      "package": "@types/react",
                                      "name": "S"
                                    },
                                    {
                                      "type": "reference",
                                      "id": 1008,
                                      "qualifiedName": "K",
                                      "package": "@types/react",
                                      "name": "K"
                                    }
                                  ],
                                  "qualifiedName": "Pick",
                                  "package": "typescript",
                                  "name": "Pick"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "reference",
                      "id": 1164,
                      "typeArguments": [
                        {
                          "type": "reference",
                          "id": 994,
                          "qualifiedName": "React.Component.S",
                          "package": "@types/react",
                          "name": "S"
                        },
                        {
                          "type": "reference",
                          "id": 1008,
                          "qualifiedName": "K",
                          "package": "@types/react",
                          "name": "K"
                        }
                      ],
                      "qualifiedName": "Pick",
                      "package": "typescript",
                      "name": "Pick"
                    }
                  ]
                }
              },
              {
                "id": 1014,
                "name": "callback",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 1015,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {
                      "isExternal": true
                    },
                    "signatures": [
                      {
                        "id": 1016,
                        "name": "__type",
                        "kind": 4096,
                        "kindString": "Call signature",
                        "flags": {
                          "isExternal": true
                        },
                        "type": {
                          "type": "intrinsic",
                          "name": "void"
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            }
          }
        ]
      },
      {
        "id": 1034,
        "name": "shouldComponentUpdate",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true,
          "isOptional": true
        },
        "signatures": [
          {
            "id": 1035,
            "name": "shouldComponentUpdate",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Called to determine whether the change in props and state should trigger a re-render.",
              "text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called to determine whether the change in props and state should trigger a re-render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"Component\"\n        }), \" always returns true.\\n\", _jsx(_components.code, {\n          children: \"PureComponent\"\n        }), \" implements a shallow comparison on props and state and returns true if any\\nprops or states have changed.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If false is returned, \", _jsx(_components.code, {\n          children: \"Component#render\"\n        }), \", \", _jsx(_components.code, {\n          children: \"componentWillUpdate\"\n        }), \"\\nand \", _jsx(_components.code, {\n          children: \"componentDidUpdate\"\n        }), \" will not be called.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 1036,
                "name": "nextProps",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 992,
                      "qualifiedName": "React.Component.P",
                      "package": "@types/react",
                      "name": "P"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              },
              {
                "id": 1037,
                "name": "nextState",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 994,
                      "qualifiedName": "React.Component.S",
                      "package": "@types/react",
                      "name": "S"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              },
              {
                "id": 1038,
                "name": "nextContext",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 1110,
              "name": "ComponentLifecycle.shouldComponentUpdate"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 1109,
          "name": "ComponentLifecycle.shouldComponentUpdate"
        }
      }
    ],
    "groups": [
      {
        "title": "Constructors",
        "kind": 512,
        "children": [989]
      },
      {
        "title": "Properties",
        "kind": 1024,
        "children": [1005, 1024, 1028, 1027, 988]
      },
      {
        "title": "Methods",
        "kind": 2048,
        "children": [
          1056, 1062, 1071, 1041, 1032, 1049, 1054, 1058, 1039, 1066, 1017, 1045, 1022, 1006, 1034
        ]
      }
    ],
    "sources": [
      {
        "fileName": "node_modules/@types/react/index.d.ts",
        "line": 446,
        "character": 10
      }
    ],
    "typeParameter": [
      {
        "id": 1077,
        "name": "P",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {
          "isExternal": true
        },
        "default": {
          "type": "reflection",
          "declaration": {
            "id": 1076,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {
              "isExternal": true
            },
            "sources": [
              {
                "fileName": "node_modules/@types/react/index.d.ts",
                "line": 445,
                "character": 28
              }
            ]
          }
        }
      },
      {
        "id": 1079,
        "name": "S",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {
          "isExternal": true
        },
        "default": {
          "type": "reflection",
          "declaration": {
            "id": 1078,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {
              "isExternal": true
            },
            "sources": [
              {
                "fileName": "node_modules/@types/react/index.d.ts",
                "line": 445,
                "character": 36
              }
            ]
          }
        }
      },
      {
        "id": 1080,
        "name": "SS",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {
          "isExternal": true
        },
        "default": {
          "type": "intrinsic",
          "name": "any"
        }
      }
    ],
    "extendedTypes": [
      {
        "type": "reference",
        "id": 1106,
        "typeArguments": [
          {
            "type": "reference",
            "id": 992,
            "qualifiedName": "React.Component.P",
            "package": "@types/react",
            "name": "P"
          },
          {
            "type": "reference",
            "id": 994,
            "qualifiedName": "React.Component.S",
            "package": "@types/react",
            "name": "S"
          },
          {
            "type": "reference",
            "id": 995,
            "qualifiedName": "React.Component.SS",
            "package": "@types/react",
            "name": "SS"
          }
        ],
        "qualifiedName": "React.ComponentLifecycle",
        "package": "@types/react",
        "name": "ComponentLifecycle"
      }
    ]
  },
  "references": {},
  "meta": {
    "packageName": "@types",
    "permaLink": "@types/react/Component",
    "menuGroup": "default"
  }
}
