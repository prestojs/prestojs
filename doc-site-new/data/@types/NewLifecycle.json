{
  "node": {
    "id": 1175,
    "name": "NewLifecycle",
    "kind": 256,
    "kindString": "Interface",
    "flags": {
      "isExternal": true
    },
    "children": [
      {
        "id": 1180,
        "name": "componentDidUpdate",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true,
          "isOptional": true
        },
        "signatures": [
          {
            "id": 1181,
            "name": "componentDidUpdate",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Called immediately after updating occurs. Not called for the initial render.",
              "text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately after updating occurs. Not called for the initial render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 1182,
                "name": "prevProps",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 1185,
                      "qualifiedName": "React.NewLifecycle.P",
                      "package": "@types/react",
                      "name": "P"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              },
              {
                "id": 1183,
                "name": "prevState",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 1186,
                      "qualifiedName": "React.NewLifecycle.S",
                      "package": "@types/react",
                      "name": "S"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              },
              {
                "id": 1184,
                "name": "snapshot",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true,
                  "isOptional": true
                },
                "type": {
                  "type": "reference",
                  "id": 1187,
                  "qualifiedName": "React.NewLifecycle.SS",
                  "package": "@types/react",
                  "name": "SS"
                }
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            }
          }
        ]
      },
      {
        "id": 1176,
        "name": "getSnapshotBeforeUpdate",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isExternal": true,
          "isOptional": true
        },
        "signatures": [
          {
            "id": 1177,
            "name": "getSnapshotBeforeUpdate",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {
              "isExternal": true
            },
            "comment": {
              "shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
              "text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Runs before React applies the result of \", _jsx(_components.code, {\n        children: \"render\"\n      }), \" to the document, and\\nreturns an object to be given to componentDidUpdate. Useful for saving\\nthings such as scroll position before \", _jsx(_components.code, {\n        children: \"render\"\n      }), \" causes changes to it.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\\nlifecycle events from running.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 1178,
                "name": "prevProps",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 1185,
                      "qualifiedName": "React.NewLifecycle.P",
                      "package": "@types/react",
                      "name": "P"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              },
              {
                "id": 1179,
                "name": "prevState",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {
                  "isExternal": true
                },
                "type": {
                  "type": "reference",
                  "id": 1159,
                  "typeArguments": [
                    {
                      "type": "reference",
                      "id": 1186,
                      "qualifiedName": "React.NewLifecycle.S",
                      "package": "@types/react",
                      "name": "S"
                    }
                  ],
                  "qualifiedName": "Readonly",
                  "package": "typescript",
                  "name": "Readonly"
                }
              }
            ],
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 1187,
                  "qualifiedName": "React.NewLifecycle.SS",
                  "package": "@types/react",
                  "name": "SS"
                }
              ]
            }
          }
        ]
      }
    ],
    "groups": [
      {
        "title": "Methods",
        "kind": 2048,
        "children": [1180, 1176]
      }
    ],
    "sources": [
      {
        "fileName": "node_modules/@types/react/index.d.ts",
        "line": 668,
        "character": 14
      }
    ],
    "typeParameter": [
      {
        "id": 1185,
        "name": "P",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {
          "isExternal": true
        }
      },
      {
        "id": 1186,
        "name": "S",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {
          "isExternal": true
        }
      },
      {
        "id": 1187,
        "name": "SS",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {
          "isExternal": true
        }
      }
    ],
    "extendedBy": [
      {
        "type": "reference",
        "id": 1106,
        "name": "ComponentLifecycle"
      }
    ]
  },
  "references": {},
  "meta": {
    "packageName": "@types",
    "permaLink": "@types/react/NewLifecycle",
    "menuGroup": "default"
  }
}
