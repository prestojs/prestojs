{
  "declaration": {
    "id": 2671,
    "name": "isLabeled",
    "kind": 64,
    "kindString": "Function",
    "flags": {},
    "sources": [
      {
        "fileName": "js-packages/@prestojs/util/src/Labeled.ts",
        "line": 67,
        "character": 16
      }
    ],
    "signatures": [
      {
        "id": 2672,
        "name": "isLabeled",
        "kind": 4096,
        "kindString": "Call signature",
        "flags": {},
        "comment": {
          "shortText": "Check if item supports either text or React node labels",
          "tags": [
            {
              "tag": "extract-docs",
              "text": ""
            },
            {
              "tag": "menu-group",
              "text": "Labeled\n"
            }
          ],
          "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Check if item supports either text or React node labels\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
        },
        "parameters": [
          {
            "id": 2673,
            "name": "item",
            "kind": 32768,
            "kindString": "Parameter",
            "flags": {},
            "type": {
              "type": "intrinsic",
              "name": "any"
            },
            "anchorId": "Parameter-item",
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "type": {
          "type": "predicate",
          "name": "item",
          "asserts": false,
          "targetType": {
            "type": "union",
            "types": [
              {
                "type": "reference",
                "id": 2680,
                "name": "TextLabeled"
              },
              {
                "type": "reference",
                "id": 2683,
                "name": "NodeLabeled"
              }
            ]
          }
        },
        "anchorId": "Call-signature-isLabeled",
        "docFlags": {},
        "tagsByName": {
          "extract-docs": "",
          "menu-group": "Labeled"
        }
      }
    ],
    "docFlags": {},
    "tagsByName": {
      "extract-docs": "",
      "menu-group": "Labeled"
    },
    "slug": "util/isLabeled"
  },
  "references": {
    "2680": {
      "id": 2680,
      "name": "TextLabeled",
      "kind": 256,
      "kindString": "Interface",
      "flags": {},
      "comment": {
        "shortText": "Interface for items that provide a plain text label. Implementing this can save you having to pass\nexplicit functions to label an item in other parts of the system (eg. for [AsyncChoices](doc:AsyncChoices))",
        "text": "See [isTextLabeled](doc:isTextLabeled) and [getTextLabel](doc:getTextLabel).\n",
        "tags": [
          {
            "tag": "extract-docs",
            "text": ""
          },
          {
            "tag": "menu-group",
            "text": "Labeled\n"
          }
        ],
        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Interface for items that provide a plain text label. Implementing this can save you having to pass\\nexplicit functions to label an item in other parts of the system (eg. for \", _jsx(_components.a, {\n        href: \"/docs/viewmodel/fields/AsyncChoices\",\n        children: \"AsyncChoices\"\n      }), \")\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
        "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"/docs/util/isTextLabeled\",\n        children: \"isTextLabeled\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/docs/util/getTextLabel\",\n        children: \"getTextLabel\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
      },
      "children": [
        {
          "id": 2681,
          "name": "getLabel",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 2682,
              "name": "getLabel",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the plain text label for this item. This must return a string",
                "text": "See [isTextLabeled](doc:isTextLabeled) to test for support and [getTextLabel](doc:getTextLabel) for easiest way\nto get the label.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the plain text label for this item. This must return a string\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"/docs/util/isTextLabeled\",\n        children: \"isTextLabeled\"\n      }), \" to test for support and \", _jsx(_components.a, {\n        href: \"/docs/util/getTextLabel\",\n        children: \"getTextLabel\"\n      }), \" for easiest way\\nto get the label.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "anchorId": "Call-signature-getLabel",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Methods",
          "kind": 2048,
          "children": [
            2681
          ]
        }
      ],
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/Labeled.ts",
          "line": 10,
          "character": 17
        }
      ],
      "docFlags": {},
      "tagsByName": {
        "extract-docs": "",
        "menu-group": "Labeled"
      },
      "anchorId": "Interface-TextLabeled",
      "slug": "util/TextLabeled"
    },
    "2683": {
      "id": 2683,
      "name": "NodeLabeled",
      "kind": 256,
      "kindString": "Interface",
      "flags": {},
      "comment": {
        "shortText": "Interface for items that provide a React node label (anything that React can render). Implementing this can save you having to pass\nexplicit functions to label an item in other parts of the system (eg. for [AsyncChoices](doc:AsyncChoices))",
        "text": "See [isNodeLabeled](doc:isNodeLabeled) and [getNodeLabel](doc:getNodeLabel).\n",
        "tags": [
          {
            "tag": "extract-docs",
            "text": ""
          },
          {
            "tag": "menu-group",
            "text": "Labeled\n"
          }
        ],
        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Interface for items that provide a React node label (anything that React can render). Implementing this can save you having to pass\\nexplicit functions to label an item in other parts of the system (eg. for \", _jsx(_components.a, {\n        href: \"/docs/viewmodel/fields/AsyncChoices\",\n        children: \"AsyncChoices\"\n      }), \")\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
        "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"/docs/util/isNodeLabeled\",\n        children: \"isNodeLabeled\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/docs/util/getNodeLabel\",\n        children: \"getNodeLabel\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
      },
      "children": [
        {
          "id": 2684,
          "name": "getNodeLabel",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 2685,
              "name": "getNodeLabel",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the node label for this item. This can be anything renderable by React.",
                "text": "See [isNodeLabeled](doc:isNodeLabeled) to test for support and [getNodeLabel](doc:getNodeLabel) for easiest way\nto get the label.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the node label for this item. This can be anything renderable by React.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"/docs/util/isNodeLabeled\",\n        children: \"isNodeLabeled\"\n      }), \" to test for support and \", _jsx(_components.a, {\n        href: \"/docs/util/getNodeLabel\",\n        children: \"getNodeLabel\"\n      }), \" for easiest way\\nto get the label.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              },
              "anchorId": "Call-signature-getNodeLabel",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Methods",
          "kind": 2048,
          "children": [
            2684
          ]
        }
      ],
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/Labeled.ts",
          "line": 29,
          "character": 17
        }
      ],
      "docFlags": {},
      "tagsByName": {
        "extract-docs": "",
        "menu-group": "Labeled"
      },
      "anchorId": "Interface-NodeLabeled",
      "slug": "util/NodeLabeled"
    }
  },
  "meta": {
    "packageName": "util",
    "permaLink": "isLabeled",
    "menuGroup": "Labeled"
  }
}