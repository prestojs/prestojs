{
  "node": {
    "id": 136,
    "name": "InferredPaginator",
    "kind": 128,
    "kindString": "Class",
    "flags": {},
    "comment": {
      "shortText": "Class that infers the specific type of pagination based on the response.",
      "text": "Supports [PageNumberPaginator](doc:PageNumberPaginator), [LimitOffsetPaginator](LimitOffsetPaginator) and\n[CursorPaginator](doc:CursorPaginator) with the following rules based on the response data:\n\n* If response contains `nextCursor` or `previousCursor` value paginator is set to [CursorPaginator](doc:CursorPaginator)\n* If response contains `limit` then paginator is set to  [LimitOffsetPaginator](LimitOffsetPaginator)\n* If response contains `total` then paginator is set to [PageNumberPaginator](doc:PageNumberPaginator)\n",
      "tags": [
        {
          "tag": "menu-group",
          "text": "Pagination"
        },
        {
          "tag": "extract-docs",
          "text": "\n"
        }
      ],
      "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Class that infers the specific type of pagination based on the response.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
      "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      ul: \"ul\",\n      li: \"li\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Supports \", _jsx(_components.a, {\n          href: \"doc:PageNumberPaginator\",\n          children: \"PageNumberPaginator\"\n        }), \", \", _jsx(_components.a, {\n          href: \"LimitOffsetPaginator\",\n          children: \"LimitOffsetPaginator\"\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"doc:CursorPaginator\",\n          children: \"CursorPaginator\"\n        }), \" with the following rules based on the response data:\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"If response contains \", _jsx(_components.code, {\n            children: \"nextCursor\"\n          }), \" or \", _jsx(_components.code, {\n            children: \"previousCursor\"\n          }), \" value paginator is set to \", _jsx(_components.a, {\n            href: \"doc:CursorPaginator\",\n            children: \"CursorPaginator\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"If response contains \", _jsx(_components.code, {\n            children: \"limit\"\n          }), \" then paginator is set to  \", _jsx(_components.a, {\n            href: \"LimitOffsetPaginator\",\n            children: \"LimitOffsetPaginator\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"If response contains \", _jsx(_components.code, {\n            children: \"total\"\n          }), \" then paginator is set to \", _jsx(_components.a, {\n            href: \"doc:PageNumberPaginator\",\n            children: \"PageNumberPaginator\"\n          })]\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
    },
    "originalName": "default",
    "children": [
      {
        "id": 140,
        "name": "constructor",
        "kind": 512,
        "kindString": "Constructor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 172,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 141,
            "name": "new InferredPaginator",
            "kind": 16384,
            "kindString": "Constructor signature",
            "flags": {},
            "comment": {
              "tags": [
                {
                  "tag": "see",
                  "text": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are\n"
                }
              ]
            },
            "parameters": [
              {
                "id": 142,
                "name": "currentStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                },
                "docFlags": {},
                "tagsByName": {}
              },
              {
                "id": 143,
                "name": "internalStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 136,
              "name": "default"
            },
            "docFlags": {},
            "tagsByName": {
              "see": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are"
            }
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 144,
        "name": "__paginator",
        "kind": 1024,
        "kindString": "Property",
        "flags": {
          "isOptional": true
        },
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 26,
            "character": 4
          }
        ],
        "type": {
          "type": "union",
          "types": [
            {
              "type": "reference",
              "id": 70,
              "name": "default"
            },
            {
              "type": "reference",
              "id": 318,
              "name": "default"
            },
            {
              "type": "reference",
              "id": 242,
              "name": "default"
            }
          ]
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 169,
        "name": "currentState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 164,
            "character": 4
          }
        ],
        "type": {
          "type": "reference",
          "id": 135,
          "name": "PaginatorState"
        },
        "implementationOf": {
          "type": "reference",
          "id": 405,
          "name": "PaginatorInterface.currentState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 170,
        "name": "internalState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 165,
            "character": 4
          }
        ],
        "type": {
          "type": "reference",
          "id": 1273,
          "typeArguments": [
            {
              "type": "intrinsic",
              "name": "string"
            },
            {
              "type": "intrinsic",
              "name": "any"
            }
          ],
          "qualifiedName": "Record",
          "package": "typescript",
          "name": "Record"
        },
        "implementationOf": {
          "type": "reference",
          "id": 406,
          "name": "PaginatorInterface.internalState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 171,
        "name": "setCurrentState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 166,
            "character": 4
          }
        ],
        "type": {
          "type": "reflection",
          "declaration": {
            "id": 172,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {},
            "signatures": [
              {
                "id": 173,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "parameters": [
                  {
                    "id": 174,
                    "name": "nextValue",
                    "kind": 32768,
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "reference",
                      "id": 135,
                      "name": "PaginatorState"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "docFlags": {},
            "tagsByName": {}
          }
        },
        "implementationOf": {
          "type": "reference",
          "id": 407,
          "name": "PaginatorInterface.setCurrentState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 175,
        "name": "setInternalState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 167,
            "character": 4
          }
        ],
        "type": {
          "type": "reflection",
          "declaration": {
            "id": 176,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {},
            "signatures": [
              {
                "id": 177,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "parameters": [
                  {
                    "id": 178,
                    "name": "set",
                    "kind": 32768,
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "reflection",
                      "declaration": {
                        "id": 179,
                        "name": "__type",
                        "kind": 65536,
                        "kindString": "Type literal",
                        "flags": {},
                        "signatures": [
                          {
                            "id": 180,
                            "name": "__type",
                            "kind": 4096,
                            "kindString": "Call signature",
                            "flags": {},
                            "parameters": [
                              {
                                "id": 181,
                                "name": "internalState",
                                "kind": 32768,
                                "kindString": "Parameter",
                                "flags": {},
                                "type": {
                                  "type": "reference",
                                  "id": 1273,
                                  "typeArguments": [
                                    {
                                      "type": "intrinsic",
                                      "name": "string"
                                    },
                                    {
                                      "type": "intrinsic",
                                      "name": "any"
                                    }
                                  ],
                                  "qualifiedName": "Record",
                                  "package": "typescript",
                                  "name": "Record"
                                },
                                "docFlags": {},
                                "tagsByName": {}
                              }
                            ],
                            "type": {
                              "type": "reference",
                              "id": 1273,
                              "typeArguments": [
                                {
                                  "type": "intrinsic",
                                  "name": "any"
                                },
                                {
                                  "type": "intrinsic",
                                  "name": "string"
                                }
                              ],
                              "qualifiedName": "Record",
                              "package": "typescript",
                              "name": "Record"
                            },
                            "docFlags": {},
                            "tagsByName": {}
                          }
                        ],
                        "docFlags": {},
                        "tagsByName": {}
                      }
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "docFlags": {},
            "tagsByName": {}
          }
        },
        "implementationOf": {
          "type": "reference",
          "id": 410,
          "name": "PaginatorInterface.setInternalState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 163,
        "name": "cursor",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 128,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 164,
            "name": "cursor",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The current cursor. Only valid if inferred paginator is [CursorPaginator](doc:CursorPaginator).",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The current cursor. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:CursorPaginator\",\n        children: \"CursorPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "string"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 155,
        "name": "limit",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 81,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 156,
            "name": "limit",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The current limit. Only valid if inferred paginator is [LimitOffsetPaginator](doc:LimitOffsetPaginator).",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The current limit. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator\",\n        children: \"LimitOffsetPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 159,
        "name": "nextCursor",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 104,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 160,
            "name": "nextCursor",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The next cursor. Only valid if inferred paginator is [CursorPaginator](doc:CursorPaginator).",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The next cursor. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:CursorPaginator\",\n        children: \"CursorPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "string"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 157,
        "name": "offset",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 94,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 158,
            "name": "offset",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The current offset. Only valid if inferred paginator is [LimitOffsetPaginator](doc:LimitOffsetPaginator).",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The current offset. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator\",\n        children: \"LimitOffsetPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 165,
        "name": "page",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 141,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 166,
            "name": "page",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The current page number. Only valid if inferred paginator is [PageNumberPaginator](doc:PageNumberPaginator).",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The current page number. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator\",\n        children: \"PageNumberPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 167,
        "name": "pageSize",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 154,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 168,
            "name": "pageSize",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The current page size. Only valid if inferred paginator is [PageNumberPaginator](doc:PageNumberPaginator).",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The current page size. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator\",\n        children: \"PageNumberPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 147,
        "name": "paginator",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 34,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 148,
            "name": "paginator",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The underlying inferred paginator instance (if known). Only available after `setResponse` has been called.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The underlying inferred paginator instance (if known). Only available after \", _jsx(_components.code, {\n        children: \"setResponse\"\n      }), \" has been called.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "intrinsic",
                  "name": "undefined"
                },
                {
                  "type": "reference",
                  "id": 70,
                  "name": "default"
                },
                {
                  "type": "reference",
                  "id": 318,
                  "name": "default"
                },
                {
                  "type": "reference",
                  "id": 242,
                  "name": "default"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "setSignature": [
          {
            "id": 149,
            "name": "paginator",
            "kind": 1048576,
            "kindString": "Set signature",
            "flags": {},
            "comment": {
              "shortText": "The underlying inferred paginator instance (if known). Only available after `setResponse` has been called.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The underlying inferred paginator instance (if known). Only available after \", _jsx(_components.code, {\n        children: \"setResponse\"\n      }), \" has been called.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 150,
                "name": "paginator",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "intrinsic",
                      "name": "undefined"
                    },
                    {
                      "type": "reference",
                      "id": 70,
                      "name": "default"
                    },
                    {
                      "type": "reference",
                      "id": 318,
                      "name": "default"
                    },
                    {
                      "type": "reference",
                      "id": 242,
                      "name": "default"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 161,
        "name": "previousCursor",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 114,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 162,
            "name": "previousCursor",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The previous cursor. Only valid if inferred paginator is [CursorPaginator](doc:CursorPaginator).",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The previous cursor. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:CursorPaginator\",\n        children: \"CursorPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "string"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 145,
        "name": "responseIsSet",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 27,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 146,
            "name": "responseIsSet",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "implementationOf": {
              "type": "reference",
              "id": 413,
              "name": "PaginatorInterface.responseIsSet"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 413,
          "name": "PaginatorInterface.responseIsSet"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 151,
        "name": "total",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 55,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 152,
            "name": "total",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The total number of records available. Not valid if inferred paginator is [CursorPaginator](doc:CursorPaginator).",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The total number of records available. Not valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:CursorPaginator\",\n        children: \"CursorPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 153,
        "name": "totalPages",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 68,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 154,
            "name": "totalPages",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The total number of records available. Only valid if inferred paginator is [PageNumberPaginator](doc:PageNumberPaginator).",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The total number of records available. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator\",\n        children: \"PageNumberPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 220,
        "name": "first",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 416,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 221,
            "name": "first",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the first page.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the first page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "implementationOf": {
              "type": "reference",
              "id": 417,
              "name": "PaginatorInterface.first"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 416,
          "name": "PaginatorInterface.first"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 218,
        "name": "firstState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 402,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 219,
            "name": "firstState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the first page",
              "text": "Does not transition state. To transition state call `first` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 62,
                  "name": "CursorPaginationState"
                },
                {
                  "type": "reference",
                  "id": 311,
                  "name": "PageNumberPaginationState"
                },
                {
                  "type": "reference",
                  "id": 235,
                  "name": "LimitOffsetPaginationState"
                }
              ]
            },
            "implementationOf": {
              "type": "reference",
              "id": 419,
              "name": "PaginatorInterface.firstState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 418,
          "name": "PaginatorInterface.firstState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 228,
        "name": "getRequestInit",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 472,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 229,
            "name": "getRequestInit",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "parameters": [
              {
                "id": 230,
                "name": "currentInit",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 392,
              "name": "PaginatorRequestOptions"
            },
            "implementationOf": {
              "type": "reference",
              "id": 429,
              "name": "PaginatorInterface.getRequestInit"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 428,
          "name": "PaginatorInterface.getRequestInit"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 226,
        "name": "hasNextPage",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 465,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 227,
            "name": "hasNextPage",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Returns true if there's more results after the current page",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns true if there's more results after the current page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "implementationOf": {
              "type": "reference",
              "id": 415,
              "name": "PaginatorInterface.hasNextPage"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 414,
          "name": "PaginatorInterface.hasNextPage"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 224,
        "name": "last",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 450,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 225,
            "name": "last",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the last page. If the last page isn't yet known (eg. results\nhaven't yet been returned) then null will be returned.",
              "text": "If the last page is not yet known because results haven't been returned this function\ndoes nothing.\nNot valid for [CursorPaginator](doc:CursorPaginator)\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the last page. If the last page isn't yet known (eg. results\\nhaven't yet been returned) then null will be returned.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"If the last page is not yet known because results haven't been returned this function\\ndoes nothing.\\nNot valid for \", _jsx(_components.a, {\n        href: \"doc:CursorPaginator\",\n        children: \"CursorPaginator\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 222,
        "name": "lastState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 432,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 223,
            "name": "lastState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the first page",
              "text": "Does not transition state. To transition state call `last` instead.\n\nNot valid for [CursorPaginator](doc:CursorPaginator)\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n          children: \"last\"\n        }), \" instead.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Not valid for \", _jsx(_components.a, {\n          href: \"doc:CursorPaginator\",\n          children: \"CursorPaginator\"\n        })]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 311,
                  "name": "PageNumberPaginationState"
                },
                {
                  "type": "reference",
                  "id": 235,
                  "name": "LimitOffsetPaginationState"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 198,
        "name": "limitState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 282,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 199,
            "name": "limitState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Only valid if inferred paginator is [LimitOffsetPaginator](doc:LimitOffsetPaginator).",
              "text": "See [LimitOffsetPaginator.limitState](doc:LimitOffsetPaginator#method-limitState)\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator\",\n        children: \"LimitOffsetPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator#method-limitState\",\n        children: \"LimitOffsetPaginator.limitState\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 200,
                "name": "limit",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 235,
                  "name": "LimitOffsetPaginationState"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 212,
        "name": "next",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 360,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 213,
            "name": "next",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the next page.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the next page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "implementationOf": {
              "type": "reference",
              "id": 421,
              "name": "PaginatorInterface.next"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 420,
          "name": "PaginatorInterface.next"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 210,
        "name": "nextState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 346,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 211,
            "name": "nextState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the next page",
              "text": "Does not transition state. To transition state call `next` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the next page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"next\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 62,
                  "name": "CursorPaginationState"
                },
                {
                  "type": "reference",
                  "id": 311,
                  "name": "PageNumberPaginationState"
                },
                {
                  "type": "reference",
                  "id": 235,
                  "name": "LimitOffsetPaginationState"
                }
              ]
            },
            "implementationOf": {
              "type": "reference",
              "id": 423,
              "name": "PaginatorInterface.nextState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 422,
          "name": "PaginatorInterface.nextState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 204,
        "name": "offsetState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 314,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 205,
            "name": "offsetState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Only valid if inferred paginator is [LimitOffsetPaginator](doc:LimitOffsetPaginator).",
              "text": "See [LimitOffsetPaginator.offsetState](doc:LimitOffsetPaginator#method-offsetState)\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator\",\n        children: \"LimitOffsetPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator#method-offsetState\",\n        children: \"LimitOffsetPaginator.offsetState\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 206,
                "name": "offset",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 235,
                  "name": "LimitOffsetPaginationState"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 192,
        "name": "pageSizeState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 248,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 193,
            "name": "pageSizeState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Only valid if inferred paginator is [PageNumberPaginator](doc:PageNumberPaginator).",
              "text": "See [PageNumberPaginator.pageSizeState](doc:PageNumberPaginator#method-pageSizeState)\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator\",\n        children: \"PageNumberPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator#method-pageSizeState\",\n        children: \"PageNumberPaginator.pageSizeState\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 194,
                "name": "pageSize",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 62,
                  "name": "CursorPaginationState"
                },
                {
                  "type": "reference",
                  "id": 311,
                  "name": "PageNumberPaginationState"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 186,
        "name": "pageState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 216,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 187,
            "name": "pageState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Only valid if inferred paginator is [PageNumberPaginator](doc:PageNumberPaginator).",
              "text": "See [PageNumberPaginator.pageState](doc:PageNumberPaginator#method-pageState)\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator\",\n        children: \"PageNumberPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator#method-pageState\",\n        children: \"PageNumberPaginator.pageState\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 188,
                "name": "page",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 311,
                  "name": "PageNumberPaginationState"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 216,
        "name": "previous",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 388,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 217,
            "name": "previous",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the previous page.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the previous page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "implementationOf": {
              "type": "reference",
              "id": 425,
              "name": "PaginatorInterface.previous"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 424,
          "name": "PaginatorInterface.previous"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 214,
        "name": "previousState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 374,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 215,
            "name": "previousState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the previous page",
              "text": "Does not transition state. To transition state call `previous` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the previous page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"previous\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 62,
                  "name": "CursorPaginationState"
                },
                {
                  "type": "reference",
                  "id": 311,
                  "name": "PageNumberPaginationState"
                },
                {
                  "type": "reference",
                  "id": 235,
                  "name": "LimitOffsetPaginationState"
                }
              ]
            },
            "implementationOf": {
              "type": "reference",
              "id": 427,
              "name": "PaginatorInterface.previousState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 426,
          "name": "PaginatorInterface.previousState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 182,
        "name": "replaceStateControllers",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 186,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 183,
            "name": "replaceStateControllers",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "tags": [
                {
                  "tag": "see",
                  "text": "`Paginator.replaceStateControllers`\n"
                }
              ]
            },
            "parameters": [
              {
                "id": 184,
                "name": "__namedParameters",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "intrinsic",
                      "name": "any"
                    },
                    {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              },
              {
                "id": 185,
                "name": "__namedParameters",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "tuple",
                  "elements": [
                    {
                      "type": "intrinsic",
                      "name": "any"
                    },
                    {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "implementationOf": {
              "type": "reference",
              "id": 435,
              "name": "PaginatorInterface.replaceStateControllers"
            },
            "docFlags": {},
            "tagsByName": {
              "see": "`Paginator.replaceStateControllers`"
            }
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 434,
          "name": "PaginatorInterface.replaceStateControllers"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 201,
        "name": "setLimit",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 297,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 202,
            "name": "setLimit",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Only valid if inferred paginator is [LimitOffsetPaginator](doc:LimitOffsetPaginator).",
              "text": "See [LimitOffsetPaginator.setLimit](doc:LimitOffsetPaginator#method-setLimit)\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator\",\n        children: \"LimitOffsetPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator#method-setLimit\",\n        children: \"LimitOffsetPaginator.setLimit\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 203,
                "name": "limit",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 207,
        "name": "setOffset",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 329,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 208,
            "name": "setOffset",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Only valid if inferred paginator is [LimitOffsetPaginator](doc:LimitOffsetPaginator).",
              "text": "See [LimitOffsetPaginator.setOffset](doc:LimitOffsetPaginator#method-setOffset)\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator\",\n        children: \"LimitOffsetPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator#method-setOffset\",\n        children: \"LimitOffsetPaginator.setOffset\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 209,
                "name": "offset",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 189,
        "name": "setPage",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 231,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 190,
            "name": "setPage",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Only valid if inferred paginator is [PageNumberPaginator](doc:PageNumberPaginator).",
              "text": "See [PageNumberPaginator.setPage](doc:PageNumberPaginator#method-setPage)\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator\",\n        children: \"PageNumberPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator#method-setPage\",\n        children: \"PageNumberPaginator.setPage\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 191,
                "name": "page",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 195,
        "name": "setPageSize",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 265,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 196,
            "name": "setPageSize",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Only valid if inferred paginator is [PageNumberPaginator](doc:PageNumberPaginator).",
              "text": "See [PageNumberPaginator.setPageSize](doc:PageNumberPaginator#method-setPageSize)\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator\",\n        children: \"PageNumberPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator#method-setPageSize\",\n        children: \"PageNumberPaginator.setPageSize\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 197,
                "name": "pageSize",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 231,
        "name": "setResponse",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 492,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 232,
            "name": "setResponse",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Sets the internal data based on response. This is where the paginator is inferred based on values in the\n`response`.",
              "text": "See [getPaginationState](doc:getPaginationState) for how to customise this if your backend implementation\ndiffers.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Sets the internal data based on response. This is where the paginator is inferred based on values in the\\n\", _jsx(_components.code, {\n        children: \"response\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:getPaginationState\",\n        children: \"getPaginationState\"\n      }), \" for how to customise this if your backend implementation\\ndiffers.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 233,
                "name": "response",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "reference",
                  "id": 1273,
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "string"
                    },
                    {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  ],
                  "qualifiedName": "Record",
                  "package": "typescript",
                  "name": "Record"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "implementationOf": {
              "type": "reference",
              "id": 432,
              "name": "PaginatorInterface.setResponse"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 431,
          "name": "PaginatorInterface.setResponse"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 137,
        "name": "getPaginationState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isStatic": true
        },
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
            "line": 518,
            "character": 11
          }
        ],
        "signatures": [
          {
            "id": 138,
            "name": "getPaginationState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "parameters": [
              {
                "id": 139,
                "name": "requestDetails",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "reference",
                  "id": 397,
                  "name": "PaginationRequestDetails"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": false
                },
                {
                  "type": "reference",
                  "id": 1273,
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "string"
                    },
                    {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  ],
                  "qualifiedName": "Record",
                  "package": "typescript",
                  "name": "Record"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      }
    ],
    "groups": [
      {
        "title": "Constructors",
        "kind": 512,
        "children": [140]
      },
      {
        "title": "Properties",
        "kind": 1024,
        "children": [144, 169, 170, 171, 175]
      },
      {
        "title": "Accessors",
        "kind": 262144,
        "children": [163, 155, 159, 157, 165, 167, 147, 161, 145, 151, 153]
      },
      {
        "title": "Methods",
        "kind": 2048,
        "children": [
          220, 218, 228, 226, 224, 222, 198, 212, 210, 204, 192, 186, 216, 214, 182, 201, 207, 189,
          195, 231, 137
        ]
      }
    ],
    "sources": [
      {
        "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
        "line": 24,
        "character": 21
      }
    ],
    "implementedTypes": [
      {
        "type": "reference",
        "id": 404,
        "typeArguments": [
          {
            "type": "reference",
            "id": 135,
            "name": "PaginatorState"
          },
          {
            "type": "reference",
            "id": 1273,
            "typeArguments": [
              {
                "type": "intrinsic",
                "name": "string"
              },
              {
                "type": "intrinsic",
                "name": "any"
              }
            ],
            "qualifiedName": "Record",
            "package": "typescript",
            "name": "Record"
          }
        ],
        "name": "PaginatorInterface"
      }
    ],
    "docFlags": {},
    "tagsByName": {
      "menu-group": "Pagination",
      "extract-docs": ""
    }
  },
  "references": {},
  "meta": {
    "packageName": "util",
    "permaLink": "util/pagination/InferredPaginator",
    "menuGroup": "Pagination"
  }
}
