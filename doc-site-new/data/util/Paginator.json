{
  "node": {
    "id": 472,
    "name": "Paginator",
    "kind": 128,
    "kindString": "Class",
    "flags": {
      "isAbstract": true
    },
    "comment": {
      "shortText": "Base class for a paginator.",
      "tags": [
        {
          "tag": "menu-group",
          "text": "Pagination"
        },
        {
          "tag": "extract-docs",
          "text": "\n"
        }
      ],
      "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Base class for a paginator.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
    },
    "originalName": "default",
    "children": [
      {
        "id": 473,
        "name": "constructor",
        "kind": 512,
        "kindString": "Constructor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 115,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 474,
            "name": "new Paginator",
            "kind": 16384,
            "kindString": "Constructor signature",
            "flags": {},
            "comment": {
              "tags": [
                {
                  "tag": "see",
                  "text": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are\n"
                }
              ]
            },
            "typeParameter": [
              {
                "id": 476,
                "name": "State",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {},
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 475,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {},
                    "docFlags": {},
                    "tagsByName": {}
                  }
                },
                "docFlags": {},
                "tagsByName": {}
              },
              {
                "id": 478,
                "name": "InternalState",
                "kind": 131072,
                "kindString": "Type parameter",
                "flags": {},
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 477,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {},
                    "docFlags": {},
                    "tagsByName": {}
                  }
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "parameters": [
              {
                "id": 479,
                "name": "currentStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "literal",
                  "value": null
                },
                "defaultValue": "null",
                "docFlags": {},
                "tagsByName": {}
              },
              {
                "id": 480,
                "name": "internalStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "literal",
                  "value": null
                },
                "defaultValue": "null",
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 472,
              "typeArguments": [
                {
                  "type": "reference",
                  "id": 476,
                  "name": "State"
                },
                {
                  "type": "reference",
                  "id": 478,
                  "name": "InternalState"
                }
              ],
              "name": "default"
            },
            "docFlags": {},
            "tagsByName": {
              "see": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are"
            }
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 481,
        "name": "currentState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 100,
            "character": 4
          }
        ],
        "type": {
          "type": "reference",
          "id": 476,
          "name": "State"
        },
        "implementationOf": {
          "type": "reference",
          "id": 405,
          "name": "PaginatorInterface.currentState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 482,
        "name": "internalState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 101,
            "character": 4
          }
        ],
        "type": {
          "type": "intersection",
          "types": [
            {
              "type": "reference",
              "id": 478,
              "name": "InternalState"
            },
            {
              "type": "reflection",
              "declaration": {
                "id": 483,
                "name": "__type",
                "kind": 65536,
                "kindString": "Type literal",
                "flags": {},
                "children": [
                  {
                    "id": 484,
                    "name": "responseIsSet",
                    "kind": 1024,
                    "kindString": "Property",
                    "flags": {
                      "isOptional": true
                    },
                    "sources": [
                      {
                        "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                        "line": 101,
                        "character": 37
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "boolean"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "groups": [
                  {
                    "title": "Properties",
                    "kind": 1024,
                    "children": [484]
                  }
                ],
                "docFlags": {},
                "tagsByName": {}
              }
            }
          ]
        },
        "implementationOf": {
          "type": "reference",
          "id": 406,
          "name": "PaginatorInterface.internalState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 485,
        "name": "setCurrentState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 102,
            "character": 4
          }
        ],
        "type": {
          "type": "reflection",
          "declaration": {
            "id": 486,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {},
            "signatures": [
              {
                "id": 487,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "parameters": [
                  {
                    "id": 488,
                    "name": "set",
                    "kind": 32768,
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "reference",
                      "id": 476,
                      "name": "State"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "docFlags": {},
            "tagsByName": {}
          }
        },
        "implementationOf": {
          "type": "reference",
          "id": 407,
          "name": "PaginatorInterface.setCurrentState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 489,
        "name": "setInternalState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 103,
            "character": 4
          }
        ],
        "type": {
          "type": "reflection",
          "declaration": {
            "id": 490,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {},
            "signatures": [
              {
                "id": 491,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "parameters": [
                  {
                    "id": 492,
                    "name": "set",
                    "kind": 32768,
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "reference",
                      "id": 478,
                      "name": "InternalState"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "docFlags": {},
            "tagsByName": {}
          }
        },
        "implementationOf": {
          "type": "reference",
          "id": 410,
          "name": "PaginatorInterface.setInternalState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 493,
        "name": "responseIsSet",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 108,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 494,
            "name": "responseIsSet",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "True once setResponse has been called and pagination state is known.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "implementationOf": {
              "type": "reference",
              "id": 413,
              "name": "PaginatorInterface.responseIsSet"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 413,
          "name": "PaginatorInterface.responseIsSet"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 505,
        "name": "first",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 202,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 506,
            "name": "first",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the first page.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the first page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "implementationOf": {
              "type": "reference",
              "id": 417,
              "name": "PaginatorInterface.first"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 416,
          "name": "PaginatorInterface.first"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 507,
        "name": "firstState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 211,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 508,
            "name": "firstState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the first page",
              "text": "Does not transition state. To transition state call `first` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "reference",
              "id": 476,
              "name": "State"
            },
            "implementationOf": {
              "type": "reference",
              "id": 419,
              "name": "PaginatorInterface.firstState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 418,
          "name": "PaginatorInterface.firstState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 499,
        "name": "getRequestInit",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 184,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 500,
            "name": "getRequestInit",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the options to use with `Endpoint.execute` or `Endpoint.prepare`. Usually\nthis just involves setting `query` to the query string parameters for the paginator\nbut can also provide custom headers or different URL resolve arguments.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Return the options to use with \", _jsx(_components.code, {\n        children: \"Endpoint.execute\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"Endpoint.prepare\"\n      }), \". Usually\\nthis just involves setting \", _jsx(_components.code, {\n        children: \"query\"\n      }), \" to the query string parameters for the paginator\\nbut can also provide custom headers or different URL resolve arguments.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 501,
                "name": "options",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "comment": {
                  "shortText": "The existing options for the endpoint\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The existing options for the endpoint\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reference",
                  "id": 392,
                  "name": "PaginatorRequestOptions"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 392,
              "name": "PaginatorRequestOptions"
            },
            "implementationOf": {
              "type": "reference",
              "id": 429,
              "name": "PaginatorInterface.getRequestInit"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 428,
          "name": "PaginatorInterface.getRequestInit"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 517,
        "name": "hasNextPage",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 250,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 518,
            "name": "hasNextPage",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Returns true if there's more results after the current page",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns true if there's more results after the current page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "implementationOf": {
              "type": "reference",
              "id": 415,
              "name": "PaginatorInterface.hasNextPage"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 414,
          "name": "PaginatorInterface.hasNextPage"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 509,
        "name": "next",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 218,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 510,
            "name": "next",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the next page.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the next page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "implementationOf": {
              "type": "reference",
              "id": 421,
              "name": "PaginatorInterface.next"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 420,
          "name": "PaginatorInterface.next"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 511,
        "name": "nextState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 227,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 512,
            "name": "nextState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the next page",
              "text": "Does not transition state. To transition state call `next` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the next page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"next\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 476,
                  "name": "State"
                }
              ]
            },
            "implementationOf": {
              "type": "reference",
              "id": 423,
              "name": "PaginatorInterface.nextState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 422,
          "name": "PaginatorInterface.nextState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 513,
        "name": "previous",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 234,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 514,
            "name": "previous",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the previous page.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the previous page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "implementationOf": {
              "type": "reference",
              "id": 425,
              "name": "PaginatorInterface.previous"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 424,
          "name": "PaginatorInterface.previous"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 515,
        "name": "previousState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 243,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 516,
            "name": "previousState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the previous page",
              "text": "Does not transition state. To transition state call `previous` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the previous page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"previous\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 476,
                  "name": "State"
                }
              ]
            },
            "implementationOf": {
              "type": "reference",
              "id": 427,
              "name": "PaginatorInterface.previousState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 426,
          "name": "PaginatorInterface.previousState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 495,
        "name": "replaceStateControllers",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 151,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 496,
            "name": "replaceStateControllers",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Paginator receives 2 tuples of a state and state setter pair. This is expected to\nmatch the same interface as `useState` in React. The following is a valid simple usage:",
              "text": "```js\nconst paginator = new Paginator(useState(), useState());\n```\n\nNote that we can also pass the state controllers in via `replaceStateControllers` rather\nthan in the constructor. This is so we can memoize the `Paginator` instance which is desirable\nwhen using the paginator as a dependency to React hooks.\n\nAs state is passed in and managed external to the class be aware that any data stored\non the class instance will be lost unless written with `setCurrentState` or `setInternalState`.\nThis design is a compromise between allowing a clear interface for how paginators should\nbe defined and allowing the state to be managed externally (eg. using React state).\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Paginator receives 2 tuples of a state and state setter pair. This is expected to\\nmatch the same interface as \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" in React. The following is a valid simple usage:\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"const paginator = new Paginator(useState(), useState());\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note that we can also pass the state controllers in via \", _jsx(_components.code, {\n          children: \"replaceStateControllers\"\n        }), \" rather\\nthan in the constructor. This is so we can memoize the \", _jsx(_components.code, {\n          children: \"Paginator\"\n        }), \" instance which is desirable\\nwhen using the paginator as a dependency to React hooks.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As state is passed in and managed external to the class be aware that any data stored\\non the class instance will be lost unless written with \", _jsx(_components.code, {\n          children: \"setCurrentState\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"setInternalState\"\n        }), \".\\nThis design is a compromise between allowing a clear interface for how paginators should\\nbe defined and allowing the state to be managed externally (eg. using React state).\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 497,
                "name": "currentStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "comment": {
                  "shortText": "The state object and setter (eg. from `useState`) that is used to store\nand transition pagination state. Using this you can do things like easily store state in the URL\n(eg. using `useUrlQueryState`) or other data sources.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter (eg. from \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \") that is used to store\\nand transition pagination state. Using this you can do things like easily store state in the URL\\n(eg. using \", _jsx(_components.code, {\n        children: \"useUrlQueryState\"\n      }), \") or other data sources.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                },
                "docFlags": {},
                "tagsByName": {}
              },
              {
                "id": 498,
                "name": "internalStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "comment": {
                  "shortText": "The state object and setter that is used for internal state. Internal state\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\nto store things like the total number of results or the current cursor. Passing `useState` here is\nfine.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter that is used for internal state. Internal state\\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\\nto store things like the total number of results or the current cursor. Passing \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" here is\\nfine.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "implementationOf": {
              "type": "reference",
              "id": 435,
              "name": "PaginatorInterface.replaceStateControllers"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 434,
          "name": "PaginatorInterface.replaceStateControllers"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 502,
        "name": "setResponse",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 195,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 503,
            "name": "setResponse",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "This is called when an `Endpoint` has resolved and is passed the response from the\nendpoint. This is used to update the relevant paginator state  - eg. the total\nnumber of records, next & previous cursors etc.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"This is called when an \", _jsx(_components.code, {\n        children: \"Endpoint\"\n      }), \" has resolved and is passed the response from the\\nendpoint. This is used to update the relevant paginator state  - eg. the total\\nnumber of records, next & previous cursors etc.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 504,
                "name": "response",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "comment": {
                  "shortText": "The response as returned by the endpoint this paginator is used with.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The response as returned by the endpoint this paginator is used with.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reference",
                  "id": 1273,
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "string"
                    },
                    {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  ],
                  "qualifiedName": "Record",
                  "package": "typescript",
                  "name": "Record"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "implementationOf": {
              "type": "reference",
              "id": 432,
              "name": "PaginatorInterface.setResponse"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "implementationOf": {
          "type": "reference",
          "id": 431,
          "name": "PaginatorInterface.setResponse"
        },
        "docFlags": {},
        "tagsByName": {}
      }
    ],
    "groups": [
      {
        "title": "Constructors",
        "kind": 512,
        "children": [473]
      },
      {
        "title": "Properties",
        "kind": 1024,
        "children": [481, 482, 485, 489]
      },
      {
        "title": "Accessors",
        "kind": 262144,
        "children": [493]
      },
      {
        "title": "Methods",
        "kind": 2048,
        "children": [505, 507, 499, 517, 509, 511, 513, 515, 495, 502]
      }
    ],
    "sources": [
      {
        "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
        "line": 98,
        "character": 30
      }
    ],
    "typeParameter": [
      {
        "id": 520,
        "name": "State",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {},
        "type": {
          "type": "reflection",
          "declaration": {
            "id": 519,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {},
            "sources": [
              {
                "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                "line": 98,
                "character": 54
              }
            ],
            "docFlags": {},
            "tagsByName": {}
          }
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 522,
        "name": "InternalState",
        "kind": 131072,
        "kindString": "Type parameter",
        "flags": {},
        "type": {
          "type": "reflection",
          "declaration": {
            "id": 521,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {},
            "sources": [
              {
                "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                "line": 98,
                "character": 80
              }
            ],
            "docFlags": {},
            "tagsByName": {}
          }
        },
        "docFlags": {},
        "tagsByName": {}
      }
    ],
    "extendedBy": [
      {
        "type": "reference",
        "id": 70,
        "name": "CursorPaginator"
      },
      {
        "type": "reference",
        "id": 242,
        "name": "LimitOffsetPaginator"
      },
      {
        "type": "reference",
        "id": 318,
        "name": "PageNumberPaginator"
      }
    ],
    "implementedTypes": [
      {
        "type": "reference",
        "id": 404,
        "typeArguments": [
          {
            "type": "reference",
            "id": 476,
            "name": "State"
          },
          {
            "type": "reference",
            "id": 478,
            "name": "InternalState"
          }
        ],
        "name": "PaginatorInterface"
      }
    ],
    "docFlags": {},
    "tagsByName": {
      "menu-group": "Pagination",
      "extract-docs": ""
    }
  },
  "references": {},
  "meta": {
    "packageName": "util",
    "permaLink": "util/pagination/Paginator",
    "menuGroup": "Pagination"
  }
}
