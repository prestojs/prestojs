{
  "node": {
    "id": 242,
    "name": "LimitOffsetPaginator",
    "kind": 128,
    "kindString": "Class",
    "flags": {},
    "comment": {
      "shortText": "Limit & offset based paginator",
      "text": "Expects a `limit` key in the response. See [getPaginationState](doc:getPaginationState) for how\nto customise this if your backend implementation differs.\n",
      "tags": [
        {
          "tag": "menu-group",
          "text": "Pagination"
        },
        {
          "tag": "extract-docs",
          "text": "\n"
        }
      ],
      "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Limit & offset based paginator\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
      "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Expects a \", _jsx(_components.code, {\n        children: \"limit\"\n      }), \" key in the response. See \", _jsx(_components.a, {\n        href: \"doc:getPaginationState\",\n        children: \"getPaginationState\"\n      }), \" for how\\nto customise this if your backend implementation differs.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
    },
    "originalName": "default",
    "children": [
      {
        "id": 246,
        "name": "constructor",
        "kind": 512,
        "kindString": "Constructor",
        "flags": {},
        "comment": {},
        "signatures": [
          {
            "id": 247,
            "name": "new LimitOffsetPaginator",
            "kind": 16384,
            "kindString": "Constructor signature",
            "flags": {},
            "comment": {
              "tags": [
                {
                  "tag": "see",
                  "text": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are\n"
                }
              ]
            },
            "parameters": [
              {
                "id": 248,
                "name": "currentStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "literal",
                  "value": null
                },
                "defaultValue": "null",
                "docFlags": {},
                "tagsByName": {}
              },
              {
                "id": 249,
                "name": "internalStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "literal",
                  "value": null
                },
                "defaultValue": "null",
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 242,
              "name": "default"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 474,
              "name": "default.constructor"
            },
            "docFlags": {},
            "tagsByName": {
              "see": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 473,
          "name": "default.constructor"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 292,
        "name": "currentState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 100,
            "character": 4
          }
        ],
        "type": {
          "type": "reference",
          "id": 235,
          "name": "LimitOffsetPaginationState"
        },
        "inheritedFrom": {
          "type": "reference",
          "id": 481,
          "name": "default.currentState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 293,
        "name": "internalState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 101,
            "character": 4
          }
        ],
        "type": {
          "type": "intersection",
          "types": [
            {
              "type": "reference",
              "id": 239,
              "name": "InternalLimitOffsetPaginationState"
            },
            {
              "type": "reflection",
              "declaration": {
                "id": 294,
                "name": "__type",
                "kind": 65536,
                "kindString": "Type literal",
                "flags": {},
                "children": [
                  {
                    "id": 295,
                    "name": "responseIsSet",
                    "kind": 1024,
                    "kindString": "Property",
                    "flags": {
                      "isOptional": true
                    },
                    "sources": [
                      {
                        "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                        "line": 101,
                        "character": 37
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "boolean"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "groups": [
                  {
                    "title": "Properties",
                    "kind": 1024,
                    "children": [295]
                  }
                ],
                "docFlags": {},
                "tagsByName": {}
              }
            }
          ]
        },
        "inheritedFrom": {
          "type": "reference",
          "id": 482,
          "name": "default.internalState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 296,
        "name": "setCurrentState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 102,
            "character": 4
          }
        ],
        "type": {
          "type": "reflection",
          "declaration": {
            "id": 297,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {},
            "signatures": [
              {
                "id": 298,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "parameters": [
                  {
                    "id": 299,
                    "name": "set",
                    "kind": 32768,
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "reference",
                      "id": 235,
                      "name": "LimitOffsetPaginationState"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "docFlags": {},
            "tagsByName": {}
          }
        },
        "inheritedFrom": {
          "type": "reference",
          "id": 485,
          "name": "default.setCurrentState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 300,
        "name": "setInternalState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 103,
            "character": 4
          }
        ],
        "type": {
          "type": "reflection",
          "declaration": {
            "id": 301,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {},
            "signatures": [
              {
                "id": 302,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "parameters": [
                  {
                    "id": 303,
                    "name": "set",
                    "kind": 32768,
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "reference",
                      "id": 239,
                      "name": "InternalLimitOffsetPaginationState"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "docFlags": {},
            "tagsByName": {}
          }
        },
        "inheritedFrom": {
          "type": "reference",
          "id": 489,
          "name": "default.setInternalState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 252,
        "name": "limit",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 36,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 253,
            "name": "limit",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The current limit",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The current limit\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 254,
        "name": "offset",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 47,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 255,
            "name": "offset",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The current offset",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The current offset\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "number"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 304,
        "name": "responseIsSet",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "comment": {
          "shortText": "True once setResponse has been called and pagination state is known.",
          "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
        },
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 108,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 305,
            "name": "responseIsSet",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "True once setResponse has been called and pagination state is known.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Paginator.responseIsSet"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 493,
          "name": "default.responseIsSet"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 250,
        "name": "total",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 29,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 251,
            "name": "total",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The total number of records available. This will be null before the first response is received.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The total number of records available. This will be null before the first response is received.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 278,
        "name": "first",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 169,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 279,
            "name": "first",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the first page.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the first page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "overwrites": {
              "type": "reference",
              "id": 506,
              "name": "default.first"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 505,
          "name": "default.first"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 276,
        "name": "firstState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 160,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 277,
            "name": "firstState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the first page",
              "text": "Does not transition state. To transition state call `first` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "reference",
              "id": 235,
              "name": "LimitOffsetPaginationState"
            },
            "overwrites": {
              "type": "reference",
              "id": 508,
              "name": "default.firstState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 507,
          "name": "default.firstState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 284,
        "name": "getRequestInit",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 204,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 285,
            "name": "getRequestInit",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the options to use with `Endpoint.execute` or `Endpoint.prepare`. Usually\nthis just involves setting `query` to the query string parameters for the paginator\nbut can also provide custom headers or different URL resolve arguments.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Return the options to use with \", _jsx(_components.code, {\n        children: \"Endpoint.execute\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"Endpoint.prepare\"\n      }), \". Usually\\nthis just involves setting \", _jsx(_components.code, {\n        children: \"query\"\n      }), \" to the query string parameters for the paginator\\nbut can also provide custom headers or different URL resolve arguments.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 286,
                "name": "__namedParameters",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "intrinsic",
                  "name": "Object"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 392,
              "name": "PaginatorRequestOptions"
            },
            "overwrites": {
              "type": "reference",
              "id": 500,
              "name": "default.getRequestInit"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 499,
          "name": "default.getRequestInit"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 290,
        "name": "hasNextPage",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 234,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 291,
            "name": "hasNextPage",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Returns true if there's more results after the current page",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns true if there's more results after the current page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "overwrites": {
              "type": "reference",
              "id": 518,
              "name": "default.hasNextPage"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 517,
          "name": "default.hasNextPage"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 282,
        "name": "last",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 196,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 283,
            "name": "last",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the last page.",
              "text": "If the last page is not yet known because results haven't been returned this function\ndoes nothing.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the last page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If the last page is not yet known because results haven't been returned this function\\ndoes nothing.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 280,
        "name": "lastState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 179,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 281,
            "name": "lastState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the last page. If the last page isn't yet known (eg. results\nhaven't yet been returned) then null will be returned.",
              "text": "Does not transition state. To transition state call `last` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the last page. If the last page isn't yet known (eg. results\\nhaven't yet been returned) then null will be returned.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"last\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 235,
                  "name": "LimitOffsetPaginationState"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 256,
        "name": "limitState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 60,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 257,
            "name": "limitState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the specified limit",
              "text": "Does not transition state. To transition state call `setLimit` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the specified limit\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"setLimit\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 258,
                "name": "limit",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 235,
              "name": "LimitOffsetPaginationState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 270,
        "name": "next",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 126,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 271,
            "name": "next",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the next page",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the next page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "overwrites": {
              "type": "reference",
              "id": 510,
              "name": "default.next"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 509,
          "name": "default.next"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 268,
        "name": "nextState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 116,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 269,
            "name": "nextState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the next page",
              "text": "Does not transition state. To transition state call `next` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the next page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"next\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 235,
                  "name": "LimitOffsetPaginationState"
                }
              ]
            },
            "overwrites": {
              "type": "reference",
              "id": 512,
              "name": "default.nextState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 511,
          "name": "default.nextState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 262,
        "name": "offsetState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 92,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 263,
            "name": "offsetState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the specified offset",
              "text": "Does not transition state. To transition state call `offsetState` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the specified offset\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"offsetState\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 264,
                "name": "offset",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 235,
              "name": "LimitOffsetPaginationState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 274,
        "name": "previous",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 148,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 275,
            "name": "previous",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the previous page.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the previous page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "overwrites": {
              "type": "reference",
              "id": 514,
              "name": "default.previous"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 513,
          "name": "default.previous"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 272,
        "name": "previousState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 138,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 273,
            "name": "previousState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the previous page",
              "text": "Does not transition state. To transition state call `previous` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the previous page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"previous\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 235,
                  "name": "LimitOffsetPaginationState"
                }
              ]
            },
            "overwrites": {
              "type": "reference",
              "id": 516,
              "name": "default.previousState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 515,
          "name": "default.previousState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 306,
        "name": "replaceStateControllers",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 151,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 307,
            "name": "replaceStateControllers",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Paginator receives 2 tuples of a state and state setter pair. This is expected to\nmatch the same interface as `useState` in React. The following is a valid simple usage:",
              "text": "```js\nconst paginator = new Paginator(useState(), useState());\n```\n\nNote that we can also pass the state controllers in via `replaceStateControllers` rather\nthan in the constructor. This is so we can memoize the `Paginator` instance which is desirable\nwhen using the paginator as a dependency to React hooks.\n\nAs state is passed in and managed external to the class be aware that any data stored\non the class instance will be lost unless written with `setCurrentState` or `setInternalState`.\nThis design is a compromise between allowing a clear interface for how paginators should\nbe defined and allowing the state to be managed externally (eg. using React state).\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Paginator receives 2 tuples of a state and state setter pair. This is expected to\\nmatch the same interface as \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" in React. The following is a valid simple usage:\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"const paginator = new Paginator(useState(), useState());\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note that we can also pass the state controllers in via \", _jsx(_components.code, {\n          children: \"replaceStateControllers\"\n        }), \" rather\\nthan in the constructor. This is so we can memoize the \", _jsx(_components.code, {\n          children: \"Paginator\"\n        }), \" instance which is desirable\\nwhen using the paginator as a dependency to React hooks.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As state is passed in and managed external to the class be aware that any data stored\\non the class instance will be lost unless written with \", _jsx(_components.code, {\n          children: \"setCurrentState\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"setInternalState\"\n        }), \".\\nThis design is a compromise between allowing a clear interface for how paginators should\\nbe defined and allowing the state to be managed externally (eg. using React state).\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 308,
                "name": "currentStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "comment": {
                  "shortText": "The state object and setter (eg. from `useState`) that is used to store\nand transition pagination state. Using this you can do things like easily store state in the URL\n(eg. using `useUrlQueryState`) or other data sources.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter (eg. from \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \") that is used to store\\nand transition pagination state. Using this you can do things like easily store state in the URL\\n(eg. using \", _jsx(_components.code, {\n        children: \"useUrlQueryState\"\n      }), \") or other data sources.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                },
                "docFlags": {},
                "tagsByName": {}
              },
              {
                "id": 309,
                "name": "internalStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "comment": {
                  "shortText": "The state object and setter that is used for internal state. Internal state\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\nto store things like the total number of results or the current cursor. Passing `useState` here is\nfine.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter that is used for internal state. Internal state\\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\\nto store things like the total number of results or the current cursor. Passing \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" here is\\nfine.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 496,
              "name": "default.replaceStateControllers"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 495,
          "name": "default.replaceStateControllers"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 259,
        "name": "setLimit",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 83,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 260,
            "name": "setLimit",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Set the limit",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Set the limit\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 261,
                "name": "limit",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 265,
        "name": "setOffset",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 107,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 266,
            "name": "setOffset",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "parameters": [
              {
                "id": 267,
                "name": "offset",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 287,
        "name": "setResponse",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 224,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 288,
            "name": "setResponse",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Sets the internal data based on response. Expects `limit` to be in response data.",
              "text": "See [getPaginationState](doc:getPaginationState) for how to customise this if your backend implementation\ndiffers.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Sets the internal data based on response. Expects \", _jsx(_components.code, {\n        children: \"limit\"\n      }), \" to be in response data.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:getPaginationState\",\n        children: \"getPaginationState\"\n      }), \" for how to customise this if your backend implementation\\ndiffers.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 289,
                "name": "__namedParameters",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "intrinsic",
                  "name": "Object"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "overwrites": {
              "type": "reference",
              "id": 503,
              "name": "default.setResponse"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 502,
          "name": "default.setResponse"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 243,
        "name": "getPaginationState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isStatic": true
        },
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
            "line": 241,
            "character": 11
          }
        ],
        "signatures": [
          {
            "id": 244,
            "name": "getPaginationState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "parameters": [
              {
                "id": 245,
                "name": "requestDetails",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "reference",
                  "id": 397,
                  "name": "PaginationRequestDetails"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": false
                },
                {
                  "type": "reference",
                  "id": 1273,
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "string"
                    },
                    {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  ],
                  "qualifiedName": "Record",
                  "package": "typescript",
                  "name": "Record"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      }
    ],
    "groups": [
      {
        "title": "Constructors",
        "kind": 512,
        "children": [246]
      },
      {
        "title": "Properties",
        "kind": 1024,
        "children": [292, 293, 296, 300]
      },
      {
        "title": "Accessors",
        "kind": 262144,
        "children": [252, 254, 304, 250]
      },
      {
        "title": "Methods",
        "kind": 2048,
        "children": [
          278, 276, 284, 290, 282, 280, 256, 270, 268, 262, 274, 272, 306, 259, 265, 287, 243
        ]
      }
    ],
    "sources": [
      {
        "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
        "line": 22,
        "character": 21
      }
    ],
    "extendedTypes": [
      {
        "type": "reference",
        "id": 472,
        "typeArguments": [
          {
            "type": "reference",
            "id": 235,
            "name": "LimitOffsetPaginationState"
          },
          {
            "type": "reference",
            "id": 239,
            "name": "InternalLimitOffsetPaginationState"
          }
        ],
        "name": "default"
      }
    ],
    "docFlags": {},
    "tagsByName": {
      "menu-group": "Pagination",
      "extract-docs": ""
    }
  },
  "references": {},
  "meta": {
    "packageName": "util",
    "permaLink": "util/pagination/LimitOffsetPaginator",
    "menuGroup": "Pagination"
  }
}
