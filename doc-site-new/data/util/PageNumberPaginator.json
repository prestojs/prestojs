{
  "node": {
    "id": 318,
    "name": "PageNumberPaginator",
    "kind": 128,
    "kindString": "Class",
    "flags": {},
    "comment": {
      "shortText": "Page number based paginator",
      "text": "Expects a `total` or `count` key and optional `pageSize` key in the response. `total` or `count` should be the total\nnumber of records available.\n\nIf your backend differs from this (for example by storing the values in different named keys or in headers instead of\nthe response body) you can handle that by extending this class and implementing `getPaginationState` or\nby passing `getPaginationState` to [usePaginator](doc:usePaginator).\n",
      "tags": [
        {
          "tag": "menu-group",
          "text": "Pagination"
        },
        {
          "tag": "extract-docs",
          "text": "\n"
        }
      ],
      "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Page number based paginator\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
      "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Expects a \", _jsx(_components.code, {\n          children: \"total\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"count\"\n        }), \" key and optional \", _jsx(_components.code, {\n          children: \"pageSize\"\n        }), \" key in the response. \", _jsx(_components.code, {\n          children: \"total\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"count\"\n        }), \" should be the total\\nnumber of records available.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If your backend differs from this (for example by storing the values in different named keys or in headers instead of\\nthe response body) you can handle that by extending this class and implementing \", _jsx(_components.code, {\n          children: \"getPaginationState\"\n        }), \" or\\nby passing \", _jsx(_components.code, {\n          children: \"getPaginationState\"\n        }), \" to \", _jsx(_components.a, {\n          href: \"doc:usePaginator\",\n          children: \"usePaginator\"\n        }), \".\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
    },
    "originalName": "default",
    "children": [
      {
        "id": 322,
        "name": "constructor",
        "kind": 512,
        "kindString": "Constructor",
        "flags": {},
        "comment": {},
        "signatures": [
          {
            "id": 323,
            "name": "new PageNumberPaginator",
            "kind": 16384,
            "kindString": "Constructor signature",
            "flags": {},
            "comment": {
              "tags": [
                {
                  "tag": "see",
                  "text": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are\n"
                }
              ]
            },
            "parameters": [
              {
                "id": 324,
                "name": "currentStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "literal",
                  "value": null
                },
                "defaultValue": "null",
                "docFlags": {},
                "tagsByName": {}
              },
              {
                "id": 325,
                "name": "internalStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "literal",
                  "value": null
                },
                "defaultValue": "null",
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 318,
              "name": "default"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 474,
              "name": "default.constructor"
            },
            "docFlags": {},
            "tagsByName": {
              "see": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 473,
          "name": "default.constructor"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 373,
        "name": "currentState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 100,
            "character": 4
          }
        ],
        "type": {
          "type": "reference",
          "id": 311,
          "name": "PageNumberPaginationState"
        },
        "inheritedFrom": {
          "type": "reference",
          "id": 481,
          "name": "default.currentState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 374,
        "name": "internalState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 101,
            "character": 4
          }
        ],
        "type": {
          "type": "intersection",
          "types": [
            {
              "type": "reference",
              "id": 315,
              "name": "InternalPageNumberPaginationState"
            },
            {
              "type": "reflection",
              "declaration": {
                "id": 375,
                "name": "__type",
                "kind": 65536,
                "kindString": "Type literal",
                "flags": {},
                "children": [
                  {
                    "id": 376,
                    "name": "responseIsSet",
                    "kind": 1024,
                    "kindString": "Property",
                    "flags": {
                      "isOptional": true
                    },
                    "sources": [
                      {
                        "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                        "line": 101,
                        "character": 37
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "boolean"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "groups": [
                  {
                    "title": "Properties",
                    "kind": 1024,
                    "children": [376]
                  }
                ],
                "docFlags": {},
                "tagsByName": {}
              }
            }
          ]
        },
        "inheritedFrom": {
          "type": "reference",
          "id": 482,
          "name": "default.internalState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 377,
        "name": "setCurrentState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 102,
            "character": 4
          }
        ],
        "type": {
          "type": "reflection",
          "declaration": {
            "id": 378,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {},
            "signatures": [
              {
                "id": 379,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "parameters": [
                  {
                    "id": 380,
                    "name": "set",
                    "kind": 32768,
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "reference",
                      "id": 311,
                      "name": "PageNumberPaginationState"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "docFlags": {},
            "tagsByName": {}
          }
        },
        "inheritedFrom": {
          "type": "reference",
          "id": 485,
          "name": "default.setCurrentState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 381,
        "name": "setInternalState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 103,
            "character": 4
          }
        ],
        "type": {
          "type": "reflection",
          "declaration": {
            "id": 382,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {},
            "signatures": [
              {
                "id": 383,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "parameters": [
                  {
                    "id": 384,
                    "name": "set",
                    "kind": 32768,
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "reference",
                      "id": 315,
                      "name": "InternalPageNumberPaginationState"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "docFlags": {},
            "tagsByName": {}
          }
        },
        "inheritedFrom": {
          "type": "reference",
          "id": 489,
          "name": "default.setInternalState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 330,
        "name": "page",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 51,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 331,
            "name": "page",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The current page",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The current page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 332,
        "name": "pageSize",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 68,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 333,
            "name": "pageSize",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The current page size (if known).",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The current page size (if known).\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 385,
        "name": "responseIsSet",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "comment": {
          "shortText": "True once setResponse has been called and pagination state is known.",
          "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
        },
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 108,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 386,
            "name": "responseIsSet",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "True once setResponse has been called and pagination state is known.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Paginator.responseIsSet"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 493,
          "name": "default.responseIsSet"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 326,
        "name": "total",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 31,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 327,
            "name": "total",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The total number of results available on the backend",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The total number of results available on the backend\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 328,
        "name": "totalPages",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 41,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 329,
            "name": "totalPages",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The total number of pages",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The total number of pages\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 356,
        "name": "first",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 171,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 357,
            "name": "first",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the first page.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the first page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "overwrites": {
              "type": "reference",
              "id": 506,
              "name": "default.first"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 505,
          "name": "default.first"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 354,
        "name": "firstState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 164,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 355,
            "name": "firstState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the first page",
              "text": "Does not transition state. To transition state call `first` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "reference",
              "id": 311,
              "name": "PageNumberPaginationState"
            },
            "overwrites": {
              "type": "reference",
              "id": 508,
              "name": "default.firstState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 507,
          "name": "default.firstState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 362,
        "name": "getRequestInit",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 204,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 363,
            "name": "getRequestInit",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Adds `page` and `pageSize` into query options passed through to the endpoint",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Adds \", _jsx(_components.code, {\n        children: \"page\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"pageSize\"\n      }), \" into query options passed through to the endpoint\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 364,
                "name": "__namedParameters",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "intrinsic",
                  "name": "Object"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 392,
              "name": "PaginatorRequestOptions"
            },
            "overwrites": {
              "type": "reference",
              "id": 500,
              "name": "default.getRequestInit"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 499,
          "name": "default.getRequestInit"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 371,
        "name": "hasNextPage",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 235,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 372,
            "name": "hasNextPage",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Returns true if there's more results after the current page",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns true if there's more results after the current page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "overwrites": {
              "type": "reference",
              "id": 518,
              "name": "default.hasNextPage"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 517,
          "name": "default.hasNextPage"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 360,
        "name": "last",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 194,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 361,
            "name": "last",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the last page. If the last page isn't yet known (eg. results\nhaven't yet been returned) then null will be returned.",
              "text": "If the last page is not yet known because results haven't been returned this function\ndoes nothing.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the last page. If the last page isn't yet known (eg. results\\nhaven't yet been returned) then null will be returned.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If the last page is not yet known because results haven't been returned this function\\ndoes nothing.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 358,
        "name": "lastState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 180,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 359,
            "name": "lastState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the first page",
              "text": "Does not transition state. To transition state call `last` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"last\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 311,
                  "name": "PageNumberPaginationState"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 348,
        "name": "next",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 139,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 349,
            "name": "next",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the next page.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the next page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "overwrites": {
              "type": "reference",
              "id": 510,
              "name": "default.next"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 509,
          "name": "default.next"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 346,
        "name": "nextState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 132,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 347,
            "name": "nextState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the next page",
              "text": "Does not transition state. To transition state call `next` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the next page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"next\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "reference",
              "id": 311,
              "name": "PageNumberPaginationState"
            },
            "overwrites": {
              "type": "reference",
              "id": 512,
              "name": "default.nextState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 511,
          "name": "default.nextState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 340,
        "name": "pageSizeState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 100,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 341,
            "name": "pageSizeState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the specified page size",
              "text": "Does not transition state. To transition state call `setPageSize` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the specified page size\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"setPageSize\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 342,
                "name": "pageSize",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 311,
              "name": "PageNumberPaginationState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 334,
        "name": "pageState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 81,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 335,
            "name": "pageState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the specified page number",
              "text": "Does not transition state. To transition state call `setPage` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the specified page number\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"setPage\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 336,
                "name": "page",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 311,
              "name": "PageNumberPaginationState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 352,
        "name": "previous",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 155,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 353,
            "name": "previous",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the previous page.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the previous page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "overwrites": {
              "type": "reference",
              "id": 514,
              "name": "default.previous"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 513,
          "name": "default.previous"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 350,
        "name": "previousState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 148,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 351,
            "name": "previousState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the previous page",
              "text": "Does not transition state. To transition state call `previous` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the previous page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"previous\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "reference",
              "id": 311,
              "name": "PageNumberPaginationState"
            },
            "overwrites": {
              "type": "reference",
              "id": 516,
              "name": "default.previousState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 515,
          "name": "default.previousState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 387,
        "name": "replaceStateControllers",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 151,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 388,
            "name": "replaceStateControllers",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Paginator receives 2 tuples of a state and state setter pair. This is expected to\nmatch the same interface as `useState` in React. The following is a valid simple usage:",
              "text": "```js\nconst paginator = new Paginator(useState(), useState());\n```\n\nNote that we can also pass the state controllers in via `replaceStateControllers` rather\nthan in the constructor. This is so we can memoize the `Paginator` instance which is desirable\nwhen using the paginator as a dependency to React hooks.\n\nAs state is passed in and managed external to the class be aware that any data stored\non the class instance will be lost unless written with `setCurrentState` or `setInternalState`.\nThis design is a compromise between allowing a clear interface for how paginators should\nbe defined and allowing the state to be managed externally (eg. using React state).\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Paginator receives 2 tuples of a state and state setter pair. This is expected to\\nmatch the same interface as \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" in React. The following is a valid simple usage:\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"const paginator = new Paginator(useState(), useState());\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note that we can also pass the state controllers in via \", _jsx(_components.code, {\n          children: \"replaceStateControllers\"\n        }), \" rather\\nthan in the constructor. This is so we can memoize the \", _jsx(_components.code, {\n          children: \"Paginator\"\n        }), \" instance which is desirable\\nwhen using the paginator as a dependency to React hooks.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As state is passed in and managed external to the class be aware that any data stored\\non the class instance will be lost unless written with \", _jsx(_components.code, {\n          children: \"setCurrentState\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"setInternalState\"\n        }), \".\\nThis design is a compromise between allowing a clear interface for how paginators should\\nbe defined and allowing the state to be managed externally (eg. using React state).\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 389,
                "name": "currentStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "comment": {
                  "shortText": "The state object and setter (eg. from `useState`) that is used to store\nand transition pagination state. Using this you can do things like easily store state in the URL\n(eg. using `useUrlQueryState`) or other data sources.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter (eg. from \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \") that is used to store\\nand transition pagination state. Using this you can do things like easily store state in the URL\\n(eg. using \", _jsx(_components.code, {\n        children: \"useUrlQueryState\"\n      }), \") or other data sources.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                },
                "docFlags": {},
                "tagsByName": {}
              },
              {
                "id": 390,
                "name": "internalStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "comment": {
                  "shortText": "The state object and setter that is used for internal state. Internal state\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\nto store things like the total number of results or the current cursor. Passing `useState` here is\nfine.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter that is used for internal state. Internal state\\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\\nto store things like the total number of results or the current cursor. Passing \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" here is\\nfine.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 496,
              "name": "default.replaceStateControllers"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 495,
          "name": "default.replaceStateControllers"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 337,
        "name": "setPage",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 91,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 338,
            "name": "setPage",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Change to the specified page",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Change to the specified page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 339,
                "name": "page",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "intrinsic",
                  "name": "number"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 343,
        "name": "setPageSize",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 123,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 344,
            "name": "setPageSize",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Change to the specified page size",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Change to the specified page size\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 345,
                "name": "pageSize",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 365,
        "name": "setResponse",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 225,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 366,
            "name": "setResponse",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Sets the internal data based on response. Expects `total` and optionally `pageSize` to be in\nresponse data.",
              "text": "See [getPaginationState](doc:getPaginationState) for how to customise this if your backend implementation\ndiffers.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Sets the internal data based on response. Expects \", _jsx(_components.code, {\n        children: \"total\"\n      }), \" and optionally \", _jsx(_components.code, {\n        children: \"pageSize\"\n      }), \" to be in\\nresponse data.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:getPaginationState\",\n        children: \"getPaginationState\"\n      }), \" for how to customise this if your backend implementation\\ndiffers.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 367,
                "name": "__namedParameters",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 368,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {},
                    "children": [
                      {
                        "id": 370,
                        "name": "pageSize",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {
                          "isOptional": true
                        },
                        "sources": [
                          {
                            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
                            "line": 225,
                            "character": 54
                          }
                        ],
                        "type": {
                          "type": "intrinsic",
                          "name": "number"
                        },
                        "docFlags": {},
                        "tagsByName": {}
                      },
                      {
                        "id": 369,
                        "name": "total",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {},
                        "sources": [
                          {
                            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
                            "line": 225,
                            "character": 39
                          }
                        ],
                        "type": {
                          "type": "intrinsic",
                          "name": "number"
                        },
                        "docFlags": {},
                        "tagsByName": {}
                      }
                    ],
                    "groups": [
                      {
                        "title": "Properties",
                        "kind": 1024,
                        "children": [370, 369]
                      }
                    ],
                    "docFlags": {},
                    "tagsByName": {}
                  }
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "overwrites": {
              "type": "reference",
              "id": 503,
              "name": "default.setResponse"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 502,
          "name": "default.setResponse"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 319,
        "name": "getPaginationState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isStatic": true
        },
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
            "line": 250,
            "character": 11
          }
        ],
        "signatures": [
          {
            "id": 320,
            "name": "getPaginationState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Expects `decodedBody` to include a key `results` which should be an array of return records and a variable\n`count` or `total` that contains the total number of records available.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Expects \", _jsx(_components.code, {\n        children: \"decodedBody\"\n      }), \" to include a key \", _jsx(_components.code, {\n        children: \"results\"\n      }), \" which should be an array of return records and a variable\\n\", _jsx(_components.code, {\n        children: \"count\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"total\"\n      }), \" that contains the total number of records available.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 321,
                "name": "requestDetails",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "comment": {
                  "shortText": "\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    return _jsx(_Fragment, {});\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reference",
                  "id": 397,
                  "name": "PaginationRequestDetails"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": false
                },
                {
                  "type": "reference",
                  "id": 1273,
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "string"
                    },
                    {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  ],
                  "qualifiedName": "Record",
                  "package": "typescript",
                  "name": "Record"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      }
    ],
    "groups": [
      {
        "title": "Constructors",
        "kind": 512,
        "children": [322]
      },
      {
        "title": "Properties",
        "kind": 1024,
        "children": [373, 374, 377, 381]
      },
      {
        "title": "Accessors",
        "kind": 262144,
        "children": [330, 332, 385, 326, 328]
      },
      {
        "title": "Methods",
        "kind": 2048,
        "children": [
          356, 354, 362, 371, 360, 358, 348, 346, 340, 334, 352, 350, 387, 337, 343, 365, 319
        ]
      }
    ],
    "sources": [
      {
        "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
        "line": 24,
        "character": 21
      }
    ],
    "extendedTypes": [
      {
        "type": "reference",
        "id": 472,
        "typeArguments": [
          {
            "type": "reference",
            "id": 311,
            "name": "PageNumberPaginationState"
          },
          {
            "type": "reference",
            "id": 315,
            "name": "InternalPageNumberPaginationState"
          }
        ],
        "name": "default"
      }
    ],
    "docFlags": {},
    "tagsByName": {
      "menu-group": "Pagination",
      "extract-docs": ""
    }
  },
  "references": {},
  "meta": {
    "packageName": "util",
    "permaLink": "util/pagination/PageNumberPaginator",
    "menuGroup": "Pagination"
  }
}
