{
  "declaration": {
    "id": 640,
    "name": "useAsyncListing",
    "kind": 64,
    "kindString": "Function",
    "flags": {},
    "originalName": "default",
    "sources": [
      {
        "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
        "line": 135,
        "character": 24
      }
    ],
    "signatures": [
      {
        "id": 641,
        "name": "useAsyncListing",
        "kind": 4096,
        "kindString": "Call signature",
        "flags": {},
        "comment": {
          "shortText": "Execute an asynchronous call and return the value which can optionally be paginated.",
          "text": "If the result is paginated you can pass `paginator`. Whenever the paginator state\nis changed the function will be called unless `trigger` is `MANUAL`. You can pass\n`accumulatePages` to accumulate results for sequential pages returned from `execute`.\nThis is useful to implement things like infinite scroll. If a non-sequential page\nis accessed or `query` changes then accumulated results will be cleared.\n",
          "tags": [
            {
              "tag": "extract-docs",
              "text": "\n"
            }
          ],
          "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Execute an asynchronous call and return the value which can optionally be paginated.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
          "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"If the result is paginated you can pass \", _jsx(_components.code, {\n        children: \"paginator\"\n      }), \". Whenever the paginator state\\nis changed the function will be called unless \", _jsx(_components.code, {\n        children: \"trigger\"\n      }), \" is \", _jsx(_components.code, {\n        children: \"MANUAL\"\n      }), \". You can pass\\n\", _jsx(_components.code, {\n        children: \"accumulatePages\"\n      }), \" to accumulate results for sequential pages returned from \", _jsx(_components.code, {\n        children: \"execute\"\n      }), \".\\nThis is useful to implement things like infinite scroll. If a non-sequential page\\nis accessed or \", _jsx(_components.code, {\n        children: \"query\"\n      }), \" changes then accumulated results will be cleared.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
        },
        "typeParameter": [
          {
            "id": 642,
            "name": "T",
            "kind": 131072,
            "kindString": "Type parameter",
            "flags": {},
            "type": {
              "type": "array",
              "elementType": {
                "type": "intrinsic",
                "name": "any"
              }
            },
            "anchorId": "T",
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "parameters": [
          {
            "id": 643,
            "name": "props",
            "kind": 32768,
            "kindString": "Parameter",
            "flags": {},
            "type": {
              "type": "reference",
              "id": 619,
              "typeArguments": [
                {
                  "type": "reference",
                  "id": 642,
                  "name": "T"
                }
              ],
              "name": "UseAsyncListingProps"
            },
            "anchorId": "props",
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "type": {
          "type": "reference",
          "id": 629,
          "typeArguments": [
            {
              "type": "reference",
              "id": 642,
              "name": "T"
            }
          ],
          "name": "UseAsyncListingReturn"
        },
        "anchorId": "useAsyncListing",
        "docFlags": {},
        "tagsByName": {
          "extract-docs": ""
        }
      }
    ],
    "docFlags": {},
    "tagsByName": {
      "extract-docs": ""
    },
    "slug": "util/useAsyncListing"
  },
  "references": {
    "404": {
      "id": 404,
      "name": "PaginatorInterface",
      "kind": 256,
      "kindString": "Interface",
      "flags": {},
      "children": [
        {
          "id": 405,
          "name": "currentState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 69,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 439,
            "name": "State"
          },
          "anchorId": "Properties-currentState",
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 406,
          "name": "internalState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 70,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 441,
            "name": "InternalState"
          },
          "anchorId": "Properties-internalState",
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 413,
          "name": "responseIsSet",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 73,
              "character": 4
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          },
          "anchorId": "Properties-responseIsSet",
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 416,
          "name": "first",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 417,
              "name": "first",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "anchorId": "first",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 418,
          "name": "firstState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 419,
              "name": "firstState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 439,
                    "name": "State"
                  }
                ]
              },
              "anchorId": "firstState",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 428,
          "name": "getRequestInit",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 429,
              "name": "getRequestInit",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 430,
                  "name": "options",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 392,
                    "name": "PaginatorRequestOptions"
                  },
                  "anchorId": "options",
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 392,
                "name": "PaginatorRequestOptions"
              },
              "anchorId": "getRequestInit",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 414,
          "name": "hasNextPage",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 415,
              "name": "hasNextPage",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "anchorId": "hasNextPage",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 420,
          "name": "next",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 421,
              "name": "next",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "anchorId": "next",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 422,
          "name": "nextState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 423,
              "name": "nextState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 439,
                    "name": "State"
                  }
                ]
              },
              "anchorId": "nextState",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 424,
          "name": "previous",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 425,
              "name": "previous",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "anchorId": "previous",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 426,
          "name": "previousState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 427,
              "name": "previousState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 439,
                    "name": "State"
                  }
                ]
              },
              "anchorId": "previousState",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 434,
          "name": "replaceStateControllers",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 435,
              "name": "replaceStateControllers",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 436,
                  "name": "currentStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "anchorId": "currentStatePair",
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 437,
                  "name": "internalStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "anchorId": "internalStatePair",
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "anchorId": "replaceStateControllers",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 407,
          "name": "setCurrentState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 71,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 408,
              "name": "setCurrentState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 409,
                  "name": "set",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 439,
                    "name": "State"
                  },
                  "anchorId": "set",
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "anchorId": "Methods-setCurrentState",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 410,
          "name": "setInternalState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 72,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 411,
              "name": "setInternalState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 412,
                  "name": "set",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 441,
                    "name": "InternalState"
                  },
                  "anchorId": "set",
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "anchorId": "Methods-setInternalState",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 431,
          "name": "setResponse",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 432,
              "name": "setResponse",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 433,
                  "name": "response",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "qualifiedName": "Record",
                    "package": "typescript",
                    "name": "Record"
                  },
                  "anchorId": "response",
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "anchorId": "setResponse",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [
            405,
            406,
            413
          ]
        },
        {
          "title": "Methods",
          "kind": 2048,
          "children": [
            416,
            418,
            428,
            414,
            420,
            422,
            424,
            426,
            434,
            407,
            410,
            431
          ]
        }
      ],
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 68,
          "character": 17
        }
      ],
      "typeParameter": [
        {
          "id": 439,
          "name": "State",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {},
          "default": {
            "type": "reflection",
            "declaration": {
              "id": 438,
              "name": "State",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                  "line": 68,
                  "character": 44
                }
              ],
              "anchorId": "State",
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "anchorId": "State",
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 441,
          "name": "InternalState",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {},
          "default": {
            "type": "reflection",
            "declaration": {
              "id": 440,
              "name": "InternalState",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                  "line": 68,
                  "character": 64
                }
              ],
              "anchorId": "InternalState",
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "anchorId": "InternalState",
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "implementedBy": [
        {
          "type": "reference",
          "id": 136,
          "name": "InferredPaginator"
        },
        {
          "type": "reference",
          "id": 472,
          "name": "Paginator"
        }
      ],
      "docFlags": {},
      "tagsByName": {},
      "slug": "util/pagination/PaginatorInterface",
      "anchorId": "PaginatorInterface"
    },
    "619": {
      "id": 619,
      "name": "UseAsyncListingProps",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {},
      "comment": {
        "tags": [
          {
            "tag": "expand-properties",
            "text": "\n"
          }
        ]
      },
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
          "line": 23,
          "character": 12
        }
      ],
      "typeParameter": [
        {
          "id": 628,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {},
          "anchorId": "T",
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 620,
          "name": "UseAsyncListingProps",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {},
          "children": [
            {
              "id": 623,
              "name": "accumulatePages",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "shortText": "Whether to accumulate pages as more results are fetched. For example\nif the first page of results is returned, then the next page is fetched\nthen the combined results for the first two pages will be resolved.",
                "text": "This resets whenever `query` changes or if pagination state changes\nto anything other than the next page.\n\nIf this is true you must specify `paginator`.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Whether to accumulate pages as more results are fetched. For example\\nif the first page of results is returned, then the next page is fetched\\nthen the combined results for the first two pages will be resolved.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"This resets whenever \", _jsx(_components.code, {\n          children: \"query\"\n        }), \" changes or if pagination state changes\\nto anything other than the next page.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If this is true you must specify \", _jsx(_components.code, {\n          children: \"paginator\"\n        }), \".\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
                  "line": 49,
                  "character": 4
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "anchorId": "Properties-accumulatePages",
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 624,
              "name": "paginator",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "shortText": "Optional paginator if result is paginated. This will be monitored for\nany state changes which will trigger a call to `execute`.",
                "text": "Required if `accumulatePages` is true.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Optional paginator if result is paginated. This will be monitored for\\nany state changes which will trigger a call to \", _jsx(_components.code, {\n        children: \"execute\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Required if \", _jsx(_components.code, {\n        children: \"accumulatePages\"\n      }), \" is true.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
                  "line": 56,
                  "character": 4
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "reference",
                    "id": 404,
                    "name": "PaginatorInterface"
                  },
                  {
                    "type": "literal",
                    "value": null
                  }
                ]
              },
              "anchorId": "Properties-paginator",
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 622,
              "name": "query",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "shortText": "Any query string parameters for the request",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Any query string parameters for the request\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
                  "line": 38,
                  "character": 4
                }
              ],
              "type": {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "boolean"
                      },
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  }
                ],
                "qualifiedName": "Record",
                "package": "typescript",
                "name": "Record"
              },
              "anchorId": "Properties-query",
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 621,
              "name": "trigger",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "shortText": "When to trigger the fetch. Defaults to `DEEP` which means whenever a deep\nequality check on `query` or `paginator` state fails it will refetch.",
                "text": "If set to `MANUAL` nothing will happen until it changes to `DEEP` or you\ncall the returned `run` function. You can use this to defer execution until\nthe value is required.\n\nDefaults to 'DEEP'.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"When to trigger the fetch. Defaults to \", _jsx(_components.code, {\n        children: \"DEEP\"\n      }), \" which means whenever a deep\\nequality check on \", _jsx(_components.code, {\n        children: \"query\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"paginator\"\n      }), \" state fails it will refetch.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"If set to \", _jsx(_components.code, {\n          children: \"MANUAL\"\n        }), \" nothing will happen until it changes to \", _jsx(_components.code, {\n          children: \"DEEP\"\n        }), \" or you\\ncall the returned \", _jsx(_components.code, {\n          children: \"run\"\n        }), \" function. You can use this to defer execution until\\nthe value is required.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Defaults to 'DEEP'.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
                  "line": 34,
                  "character": 4
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": "MANUAL"
                  },
                  {
                    "type": "literal",
                    "value": "DEEP"
                  }
                ]
              },
              "anchorId": "Properties-trigger",
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 625,
              "name": "execute",
              "kind": 2048,
              "kindString": "Method",
              "flags": {},
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
                  "line": 65,
                  "character": 4
                }
              ],
              "signatures": [
                {
                  "id": 626,
                  "name": "execute",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "comment": {
                    "shortText": "Asynchronous function that returns the result for the query. Passed an\nobject with `query` and `paginator` keys.",
                    "text": "Note that when `trigger` is `DEEP` changes to this function will cause it\nto be called again so you must memoize it (eg. with `useCallback`) if it's\ndefined in your component or hook.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Asynchronous function that returns the result for the query. Passed an\\nobject with \", _jsx(_components.code, {\n        children: \"query\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"paginator\"\n      }), \" keys.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                    "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Note that when \", _jsx(_components.code, {\n        children: \"trigger\"\n      }), \" is \", _jsx(_components.code, {\n        children: \"DEEP\"\n      }), \" changes to this function will cause it\\nto be called again so you must memoize it (eg. with \", _jsx(_components.code, {\n        children: \"useCallback\"\n      }), \") if it's\\ndefined in your component or hook.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "parameters": [
                    {
                      "id": 627,
                      "name": "props",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "name": "UseAsyncListingExecuteProps"
                      },
                      "anchorId": "props",
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 628,
                        "name": "T"
                      }
                    ],
                    "qualifiedName": "Promise",
                    "package": "typescript",
                    "name": "Promise"
                  },
                  "anchorId": "execute",
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [
                623,
                624,
                622,
                621
              ]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [
                625
              ]
            }
          ],
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
              "line": 23,
              "character": 38
            }
          ],
          "anchorId": "UseAsyncListingProps",
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "docFlags": {
        "expandProperties": true
      },
      "tagsByName": {
        "expand-properties": ""
      },
      "slug": "util/UseAsyncListingProps",
      "anchorId": "UseAsyncListingProps"
    },
    "629": {
      "id": 629,
      "name": "UseAsyncListingReturn",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
          "line": 93,
          "character": 12
        }
      ],
      "typeParameter": [
        {
          "id": 639,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {},
          "anchorId": "T",
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "intersection",
            "types": [
              {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 639,
                    "name": "T"
                  }
                ],
                "name": "UseAsyncListingReturnCommon"
              },
              {
                "type": "reflection",
                "declaration": {
                  "id": 630,
                  "name": "UseAsyncListingReturn",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 631,
                      "name": "error",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {},
                      "comment": {
                        "shortText": "Until first call has resolved neither error nor result will be set",
                        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Until first call has resolved neither error nor result will be set\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                      },
                      "sources": [
                        {
                          "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
                          "line": 98,
                          "character": 10
                        }
                      ],
                      "type": {
                        "type": "literal",
                        "value": null
                      },
                      "anchorId": "Properties-error",
                      "docFlags": {},
                      "tagsByName": {}
                    },
                    {
                      "id": 632,
                      "name": "result",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {},
                      "sources": [
                        {
                          "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
                          "line": 99,
                          "character": 10
                        }
                      ],
                      "type": {
                        "type": "literal",
                        "value": null
                      },
                      "anchorId": "Properties-result",
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "groups": [
                    {
                      "title": "Properties",
                      "kind": 1024,
                      "children": [
                        631,
                        632
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
                      "line": 94,
                      "character": 40
                    }
                  ],
                  "anchorId": "UseAsyncListingReturn",
                  "docFlags": {},
                  "tagsByName": {}
                }
              }
            ]
          },
          {
            "type": "intersection",
            "types": [
              {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 639,
                    "name": "T"
                  }
                ],
                "name": "UseAsyncListingReturnCommon"
              },
              {
                "type": "reflection",
                "declaration": {
                  "id": 633,
                  "name": "UseAsyncListingReturn",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 634,
                      "name": "error",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {},
                      "comment": {
                        "shortText": "Set to the rejected value of the promise. Only one of `error` and `result` can be set. If\n`isLoading` is true consider this stale (ie. based on _previous_ props). This can be useful\nwhen you want the UI to show the previous value until the next value is ready.",
                        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      em: \"em\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Set to the rejected value of the promise. Only one of \", _jsx(_components.code, {\n        children: \"error\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"result\"\n      }), \" can be set. If\\n\", _jsx(_components.code, {\n        children: \"isLoading\"\n      }), \" is true consider this stale (ie. based on \", _jsx(_components.em, {\n        children: \"previous\"\n      }), \" props). This can be useful\\nwhen you want the UI to show the previous value until the next value is ready.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                      },
                      "sources": [
                        {
                          "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
                          "line": 107,
                          "character": 10
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "qualifiedName": "Error",
                        "package": "typescript",
                        "name": "Error"
                      },
                      "anchorId": "Properties-error",
                      "docFlags": {},
                      "tagsByName": {}
                    },
                    {
                      "id": 635,
                      "name": "result",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {},
                      "comment": {
                        "shortText": "Result will not be set when error is set",
                        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Result will not be set when error is set\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                      },
                      "sources": [
                        {
                          "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
                          "line": 111,
                          "character": 10
                        }
                      ],
                      "type": {
                        "type": "literal",
                        "value": null
                      },
                      "anchorId": "Properties-result",
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "groups": [
                    {
                      "title": "Properties",
                      "kind": 1024,
                      "children": [
                        634,
                        635
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
                      "line": 101,
                      "character": 40
                    }
                  ],
                  "anchorId": "UseAsyncListingReturn",
                  "docFlags": {},
                  "tagsByName": {}
                }
              }
            ]
          },
          {
            "type": "intersection",
            "types": [
              {
                "type": "reference",
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 639,
                    "name": "T"
                  }
                ],
                "name": "UseAsyncListingReturnCommon"
              },
              {
                "type": "reflection",
                "declaration": {
                  "id": 636,
                  "name": "UseAsyncListingReturn",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 637,
                      "name": "error",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {},
                      "comment": {
                        "shortText": "Error will not be set when result is set",
                        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Error will not be set when result is set\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                      },
                      "sources": [
                        {
                          "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
                          "line": 117,
                          "character": 10
                        }
                      ],
                      "type": {
                        "type": "literal",
                        "value": null
                      },
                      "anchorId": "Properties-error",
                      "docFlags": {},
                      "tagsByName": {}
                    },
                    {
                      "id": 638,
                      "name": "result",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {},
                      "comment": {
                        "shortText": "The value returned from execute",
                        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The value returned from execute\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                      },
                      "sources": [
                        {
                          "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
                          "line": 121,
                          "character": 10
                        }
                      ],
                      "type": {
                        "type": "reference",
                        "id": 639,
                        "name": "T"
                      },
                      "anchorId": "Properties-result",
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "groups": [
                    {
                      "title": "Properties",
                      "kind": 1024,
                      "children": [
                        637,
                        638
                      ]
                    }
                  ],
                  "sources": [
                    {
                      "fileName": "js-packages/@prestojs/util/src/useAsyncListing.ts",
                      "line": 113,
                      "character": 40
                    }
                  ],
                  "anchorId": "UseAsyncListingReturn",
                  "docFlags": {},
                  "tagsByName": {}
                }
              }
            ]
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {},
      "slug": "util/UseAsyncListingReturn",
      "anchorId": "UseAsyncListingReturn"
    }
  },
  "meta": {
    "packageName": "util",
    "permaLink": "useAsyncListing",
    "menuGroup": "default"
  }
}