{
  "declaration": {
    "id": 560,
    "name": "formatTime",
    "kind": 64,
    "kindString": "Function",
    "flags": {},
    "sources": [
      {
        "fileName": "js-packages/@prestojs/util/src/time.ts",
        "line": 116,
        "character": 16
      }
    ],
    "signatures": [
      {
        "id": 561,
        "name": "formatTime",
        "kind": 4096,
        "kindString": "Call signature",
        "flags": {},
        "comment": {
          "shortText": "Format the parts of a time - as returned by [parseTime](doc:parseTime) - as a string using\n[toLocaleString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString#using_options).",
          "text": "Note that while you can pass through `options.timeZone` this may be inaccurate if `parts.timezoneOffset` isn't\nsupplied.\n",
          "tags": [
            {
              "tag": "extract-docs",
              "text": ""
            },
            {
              "tag": "menu-group",
              "text": "Time\n"
            }
          ],
          "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Format the parts of a time - as returned by \", _jsx(_components.a, {\n        href: \"/docs/util/parseTime\",\n        children: \"parseTime\"\n      }), \" - as a string using\\n\", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString#using_options\",\n        children: \"toLocaleString\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
          "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Note that while you can pass through \", _jsx(_components.code, {\n        children: \"options.timeZone\"\n      }), \" this may be inaccurate if \", _jsx(_components.code, {\n        children: \"parts.timezoneOffset\"\n      }), \" isn't\\nsupplied.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
        },
        "parameters": [
          {
            "id": 562,
            "name": "parts",
            "kind": 32768,
            "kindString": "Parameter",
            "flags": {},
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "reference",
                  "qualifiedName": "Date",
                  "package": "typescript",
                  "name": "Date"
                },
                {
                  "type": "reference",
                  "name": "TimeParts"
                }
              ]
            },
            "anchorId": "parts",
            "docFlags": {},
            "tagsByName": {}
          },
          {
            "id": 563,
            "name": "options",
            "kind": 32768,
            "kindString": "Parameter",
            "flags": {},
            "type": {
              "type": "reference",
              "name": "TimeFormatOptions"
            },
            "defaultValue": "{}",
            "anchorId": "options",
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "type": {
          "type": "intrinsic",
          "name": "string"
        },
        "anchorId": "formatTime",
        "docFlags": {},
        "tagsByName": {
          "extract-docs": "",
          "menu-group": "Time"
        }
      }
    ],
    "docFlags": {},
    "tagsByName": {
      "extract-docs": "",
      "menu-group": "Time"
    },
    "slug": "util/formatTime"
  },
  "references": {},
  "meta": {
    "packageName": "util",
    "permaLink": "formatTime",
    "menuGroup": "Time"
  }
}