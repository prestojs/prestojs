{
  "node": {
    "id": 70,
    "name": "CursorPaginator",
    "kind": 128,
    "kindString": "Class",
    "flags": {},
    "comment": {
      "shortText": "Cursor based paginator",
      "text": "Expects a `nextCursor`, `previousCursor` and optional `pageSize` key in the response. See\n[getPaginationState](doc:getPaginationState) for how to customise this if your backend implementation\ndiffers.\n",
      "tags": [
        {
          "tag": "menu-group",
          "text": "Pagination"
        },
        {
          "tag": "extract-docs",
          "text": "\n"
        }
      ],
      "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Cursor based paginator\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
      "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Expects a \", _jsx(_components.code, {\n        children: \"nextCursor\"\n      }), \", \", _jsx(_components.code, {\n        children: \"previousCursor\"\n      }), \" and optional \", _jsx(_components.code, {\n        children: \"pageSize\"\n      }), \" key in the response. See\\n\", _jsx(_components.a, {\n        href: \"doc:getPaginationState\",\n        children: \"getPaginationState\"\n      }), \" for how to customise this if your backend implementation\\ndiffers.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
    },
    "originalName": "default",
    "children": [
      {
        "id": 74,
        "name": "constructor",
        "kind": 512,
        "kindString": "Constructor",
        "flags": {},
        "comment": {},
        "signatures": [
          {
            "id": 75,
            "name": "new CursorPaginator",
            "kind": 16384,
            "kindString": "Constructor signature",
            "flags": {},
            "comment": {
              "tags": [
                {
                  "tag": "see",
                  "text": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are\n"
                }
              ]
            },
            "parameters": [
              {
                "id": 76,
                "name": "currentStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "literal",
                  "value": null
                },
                "defaultValue": "null",
                "docFlags": {},
                "tagsByName": {}
              },
              {
                "id": 77,
                "name": "internalStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "literal",
                  "value": null
                },
                "defaultValue": "null",
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 70,
              "name": "default"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 474,
              "name": "default.constructor"
            },
            "docFlags": {},
            "tagsByName": {
              "see": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are"
            }
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 473,
          "name": "default.constructor"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 116,
        "name": "currentState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 100,
            "character": 4
          }
        ],
        "type": {
          "type": "reference",
          "id": 62,
          "name": "CursorPaginationState"
        },
        "inheritedFrom": {
          "type": "reference",
          "id": 481,
          "name": "default.currentState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 117,
        "name": "internalState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 101,
            "character": 4
          }
        ],
        "type": {
          "type": "intersection",
          "types": [
            {
              "type": "reference",
              "id": 66,
              "name": "InternalCursorPaginatorState"
            },
            {
              "type": "reflection",
              "declaration": {
                "id": 118,
                "name": "__type",
                "kind": 65536,
                "kindString": "Type literal",
                "flags": {},
                "children": [
                  {
                    "id": 119,
                    "name": "responseIsSet",
                    "kind": 1024,
                    "kindString": "Property",
                    "flags": {
                      "isOptional": true
                    },
                    "sources": [
                      {
                        "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                        "line": 101,
                        "character": 37
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "boolean"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "groups": [
                  {
                    "title": "Properties",
                    "kind": 1024,
                    "children": [119]
                  }
                ],
                "docFlags": {},
                "tagsByName": {}
              }
            }
          ]
        },
        "inheritedFrom": {
          "type": "reference",
          "id": 482,
          "name": "default.internalState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 120,
        "name": "setCurrentState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 102,
            "character": 4
          }
        ],
        "type": {
          "type": "reflection",
          "declaration": {
            "id": 121,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {},
            "signatures": [
              {
                "id": 122,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "parameters": [
                  {
                    "id": 123,
                    "name": "set",
                    "kind": 32768,
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "reference",
                      "id": 62,
                      "name": "CursorPaginationState"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "docFlags": {},
            "tagsByName": {}
          }
        },
        "inheritedFrom": {
          "type": "reference",
          "id": 485,
          "name": "default.setCurrentState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 124,
        "name": "setInternalState",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 103,
            "character": 4
          }
        ],
        "type": {
          "type": "reflection",
          "declaration": {
            "id": 125,
            "name": "__type",
            "kind": 65536,
            "kindString": "Type literal",
            "flags": {},
            "signatures": [
              {
                "id": 126,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "parameters": [
                  {
                    "id": 127,
                    "name": "set",
                    "kind": 32768,
                    "kindString": "Parameter",
                    "flags": {},
                    "type": {
                      "type": "reference",
                      "id": 66,
                      "name": "InternalCursorPaginatorState"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "type": {
                  "type": "intrinsic",
                  "name": "void"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "docFlags": {},
            "tagsByName": {}
          }
        },
        "inheritedFrom": {
          "type": "reference",
          "id": 489,
          "name": "default.setInternalState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 82,
        "name": "cursor",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 45,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 83,
            "name": "cursor",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The current cursor. This will be null before the first response is received.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The current cursor. This will be null before the first response is received.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "string"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 78,
        "name": "nextCursor",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 31,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 79,
            "name": "nextCursor",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The next cursor (if any)",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The next cursor (if any)\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "string"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 84,
        "name": "pageSize",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 52,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 85,
            "name": "pageSize",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "The current page size, if known",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The current page size, if known\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "number"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 80,
        "name": "previousCursor",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 38,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 81,
            "name": "previousCursor",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "THe previous cursor (if any)",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"THe previous cursor (if any)\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "intrinsic",
                  "name": "string"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 128,
        "name": "responseIsSet",
        "kind": 262144,
        "kindString": "Accessor",
        "flags": {},
        "comment": {
          "shortText": "True once setResponse has been called and pagination state is known.",
          "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
        },
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 108,
            "character": 8
          }
        ],
        "getSignature": [
          {
            "id": 129,
            "name": "responseIsSet",
            "kind": 524288,
            "kindString": "Get signature",
            "flags": {},
            "comment": {
              "shortText": "True once setResponse has been called and pagination state is known.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "inheritedFrom": {
              "type": "reference",
              "name": "Paginator.responseIsSet"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 493,
          "name": "default.responseIsSet"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 94,
        "name": "first",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 102,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 95,
            "name": "first",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the first page.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the first page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "overwrites": {
              "type": "reference",
              "id": 506,
              "name": "default.first"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 505,
          "name": "default.first"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 92,
        "name": "firstState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 92,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 93,
            "name": "firstState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the first page",
              "text": "Does not transition state. To transition state call `first` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "reference",
              "id": 62,
              "name": "CursorPaginationState"
            },
            "overwrites": {
              "type": "reference",
              "id": 508,
              "name": "default.firstState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 507,
          "name": "default.firstState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 104,
        "name": "getRequestInit",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 158,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 105,
            "name": "getRequestInit",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the options to use with `Endpoint.execute` or `Endpoint.prepare`. Usually\nthis just involves setting `query` to the query string parameters for the paginator\nbut can also provide custom headers or different URL resolve arguments.",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Return the options to use with \", _jsx(_components.code, {\n        children: \"Endpoint.execute\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"Endpoint.prepare\"\n      }), \". Usually\\nthis just involves setting \", _jsx(_components.code, {\n        children: \"query\"\n      }), \" to the query string parameters for the paginator\\nbut can also provide custom headers or different URL resolve arguments.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 106,
                "name": "__namedParameters",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "intrinsic",
                  "name": "Object"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 392,
              "name": "PaginatorRequestOptions"
            },
            "overwrites": {
              "type": "reference",
              "id": 500,
              "name": "default.getRequestInit"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 499,
          "name": "default.getRequestInit"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 114,
        "name": "hasNextPage",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 200,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 115,
            "name": "hasNextPage",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Returns true if there's more results after the current page",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns true if there's more results after the current page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "boolean"
            },
            "overwrites": {
              "type": "reference",
              "id": 518,
              "name": "default.hasNextPage"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 517,
          "name": "default.hasNextPage"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 98,
        "name": "next",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 125,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 99,
            "name": "next",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the next page.",
              "text": "If the last next is not yet known because results haven't been returned this function\ndoes nothing.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the next page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If the last next is not yet known because results haven't been returned this function\\ndoes nothing.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "overwrites": {
              "type": "reference",
              "id": 510,
              "name": "default.next"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 509,
          "name": "default.next"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 96,
        "name": "nextState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 112,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 97,
            "name": "nextState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the first page. If the next page isn't yet known (eg. results\nhaven't yet been returned) then null will be returned.",
              "text": "Does not transition state. To transition state call `next` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page. If the next page isn't yet known (eg. results\\nhaven't yet been returned) then null will be returned.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"next\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 62,
                  "name": "CursorPaginationState"
                }
              ]
            },
            "overwrites": {
              "type": "reference",
              "id": 512,
              "name": "default.nextState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 511,
          "name": "default.nextState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 86,
        "name": "pageSizeState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 61,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 87,
            "name": "pageSizeState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the specified page size",
              "text": "Does not transition state. To transition state call `setPageSize` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the specified page size\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"setPageSize\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 88,
                "name": "pageSize",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "reference",
              "id": 62,
              "name": "CursorPaginationState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 102,
        "name": "previous",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 151,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 103,
            "name": "previous",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Go to the previous page.",
              "text": "If the previous page is not yet known because results haven't been returned this function\ndoes nothing.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the previous page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If the previous page is not yet known because results haven't been returned this function\\ndoes nothing.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "overwrites": {
              "type": "reference",
              "id": 514,
              "name": "default.previous"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 513,
          "name": "default.previous"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 100,
        "name": "previousState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 138,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 101,
            "name": "previousState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the state for the previous page. If the previous page isn't yet known (eg. results\nhaven't yet been returned) then null will be returned.",
              "text": "Does not transition state. To transition state call `previous` instead.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the previous page. If the previous page isn't yet known (eg. results\\nhaven't yet been returned) then null will be returned.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"previous\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": null
                },
                {
                  "type": "reference",
                  "id": 62,
                  "name": "CursorPaginationState"
                }
              ]
            },
            "overwrites": {
              "type": "reference",
              "id": 516,
              "name": "default.previousState"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 515,
          "name": "default.previousState"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 130,
        "name": "replaceStateControllers",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
            "line": 151,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 131,
            "name": "replaceStateControllers",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Paginator receives 2 tuples of a state and state setter pair. This is expected to\nmatch the same interface as `useState` in React. The following is a valid simple usage:",
              "text": "```js\nconst paginator = new Paginator(useState(), useState());\n```\n\nNote that we can also pass the state controllers in via `replaceStateControllers` rather\nthan in the constructor. This is so we can memoize the `Paginator` instance which is desirable\nwhen using the paginator as a dependency to React hooks.\n\nAs state is passed in and managed external to the class be aware that any data stored\non the class instance will be lost unless written with `setCurrentState` or `setInternalState`.\nThis design is a compromise between allowing a clear interface for how paginators should\nbe defined and allowing the state to be managed externally (eg. using React state).\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Paginator receives 2 tuples of a state and state setter pair. This is expected to\\nmatch the same interface as \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" in React. The following is a valid simple usage:\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"const paginator = new Paginator(useState(), useState());\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note that we can also pass the state controllers in via \", _jsx(_components.code, {\n          children: \"replaceStateControllers\"\n        }), \" rather\\nthan in the constructor. This is so we can memoize the \", _jsx(_components.code, {\n          children: \"Paginator\"\n        }), \" instance which is desirable\\nwhen using the paginator as a dependency to React hooks.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As state is passed in and managed external to the class be aware that any data stored\\non the class instance will be lost unless written with \", _jsx(_components.code, {\n          children: \"setCurrentState\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"setInternalState\"\n        }), \".\\nThis design is a compromise between allowing a clear interface for how paginators should\\nbe defined and allowing the state to be managed externally (eg. using React state).\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 132,
                "name": "currentStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "comment": {
                  "shortText": "The state object and setter (eg. from `useState`) that is used to store\nand transition pagination state. Using this you can do things like easily store state in the URL\n(eg. using `useUrlQueryState`) or other data sources.",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter (eg. from \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \") that is used to store\\nand transition pagination state. Using this you can do things like easily store state in the URL\\n(eg. using \", _jsx(_components.code, {\n        children: \"useUrlQueryState\"\n      }), \") or other data sources.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                },
                "docFlags": {},
                "tagsByName": {}
              },
              {
                "id": 133,
                "name": "internalStatePair",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "comment": {
                  "shortText": "The state object and setter that is used for internal state. Internal state\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\nto store things like the total number of results or the current cursor. Passing `useState` here is\nfine.\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter that is used for internal state. Internal state\\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\\nto store things like the total number of results or the current cursor. Passing \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" here is\\nfine.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "intrinsic",
                  "name": "any"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "inheritedFrom": {
              "type": "reference",
              "id": 496,
              "name": "default.replaceStateControllers"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "inheritedFrom": {
          "type": "reference",
          "id": 495,
          "name": "default.replaceStateControllers"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 89,
        "name": "setPageSize",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 83,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 90,
            "name": "setPageSize",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Set the page size",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Set the page size\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 91,
                "name": "pageSize",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "union",
                  "types": [
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "number"
                    }
                  ]
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 107,
        "name": "setResponse",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 179,
            "character": 4
          }
        ],
        "signatures": [
          {
            "id": 108,
            "name": "setResponse",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Sets the internal data based on response. Expects `nextCursor`, `previousCursor` and optionally `pageSize` to be in\nresponse data.",
              "text": "See [getPaginationState](doc:getPaginationState) for how to customise this if your backend implementation\ndiffers.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Sets the internal data based on response. Expects \", _jsx(_components.code, {\n        children: \"nextCursor\"\n      }), \", \", _jsx(_components.code, {\n        children: \"previousCursor\"\n      }), \" and optionally \", _jsx(_components.code, {\n        children: \"pageSize\"\n      }), \" to be in\\nresponse data.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:getPaginationState\",\n        children: \"getPaginationState\"\n      }), \" for how to customise this if your backend implementation\\ndiffers.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "parameters": [
              {
                "id": 109,
                "name": "__namedParameters",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "type": {
                  "type": "reflection",
                  "declaration": {
                    "id": 110,
                    "name": "__type",
                    "kind": 65536,
                    "kindString": "Type literal",
                    "flags": {},
                    "children": [
                      {
                        "id": 111,
                        "name": "nextCursor",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {
                          "isOptional": true
                        },
                        "sources": [
                          {
                            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
                            "line": 184,
                            "character": 8
                          }
                        ],
                        "type": {
                          "type": "union",
                          "types": [
                            {
                              "type": "literal",
                              "value": null
                            },
                            {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          ]
                        },
                        "docFlags": {},
                        "tagsByName": {}
                      },
                      {
                        "id": 113,
                        "name": "pageSize",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {
                          "isOptional": true
                        },
                        "sources": [
                          {
                            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
                            "line": 186,
                            "character": 8
                          }
                        ],
                        "type": {
                          "type": "intrinsic",
                          "name": "number"
                        },
                        "docFlags": {},
                        "tagsByName": {}
                      },
                      {
                        "id": 112,
                        "name": "previousCursor",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": {
                          "isOptional": true
                        },
                        "sources": [
                          {
                            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
                            "line": 185,
                            "character": 8
                          }
                        ],
                        "type": {
                          "type": "union",
                          "types": [
                            {
                              "type": "literal",
                              "value": null
                            },
                            {
                              "type": "intrinsic",
                              "name": "string"
                            }
                          ]
                        },
                        "docFlags": {},
                        "tagsByName": {}
                      }
                    ],
                    "groups": [
                      {
                        "title": "Properties",
                        "kind": 1024,
                        "children": [111, 113, 112]
                      }
                    ],
                    "docFlags": {},
                    "tagsByName": {}
                  }
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "intrinsic",
              "name": "void"
            },
            "overwrites": {
              "type": "reference",
              "id": 503,
              "name": "default.setResponse"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "overwrites": {
          "type": "reference",
          "id": 502,
          "name": "default.setResponse"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      {
        "id": 71,
        "name": "getPaginationState",
        "kind": 2048,
        "kindString": "Method",
        "flags": {
          "isStatic": true
        },
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
            "line": 213,
            "character": 11
          }
        ],
        "signatures": [
          {
            "id": 72,
            "name": "getPaginationState",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Expected pagination state in the shape:\n{\n    next: null|'http://example.com/?cursor=abc123',\n    previous: null|'http://example.com/?cursor=abc123',\n    results: Array\n}",
              "shortTextMdx": "Expected pagination state in the shape:\n{\n    next: null|'http://example.com/?cursor=abc123',\n    previous: null|'http://example.com/?cursor=abc123',\n    results: Array\n}"
            },
            "parameters": [
              {
                "id": 73,
                "name": "requestDetails",
                "kind": 32768,
                "kindString": "Parameter",
                "flags": {},
                "comment": {
                  "shortText": "\n",
                  "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    return _jsx(_Fragment, {});\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                },
                "type": {
                  "type": "reference",
                  "id": 397,
                  "name": "PaginationRequestDetails"
                },
                "docFlags": {},
                "tagsByName": {}
              }
            ],
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "literal",
                  "value": false
                },
                {
                  "type": "reference",
                  "id": 1273,
                  "typeArguments": [
                    {
                      "type": "intrinsic",
                      "name": "string"
                    },
                    {
                      "type": "intrinsic",
                      "name": "any"
                    }
                  ],
                  "qualifiedName": "Record",
                  "package": "typescript",
                  "name": "Record"
                }
              ]
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      }
    ],
    "groups": [
      {
        "title": "Constructors",
        "kind": 512,
        "children": [74]
      },
      {
        "title": "Properties",
        "kind": 1024,
        "children": [116, 117, 120, 124]
      },
      {
        "title": "Accessors",
        "kind": 262144,
        "children": [82, 78, 84, 80, 128]
      },
      {
        "title": "Methods",
        "kind": 2048,
        "children": [94, 92, 104, 114, 98, 96, 86, 102, 100, 130, 89, 107, 71]
      }
    ],
    "sources": [
      {
        "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
        "line": 24,
        "character": 21
      }
    ],
    "extendedTypes": [
      {
        "type": "reference",
        "id": 472,
        "typeArguments": [
          {
            "type": "reference",
            "id": 62,
            "name": "CursorPaginationState"
          },
          {
            "type": "reference",
            "id": 66,
            "name": "InternalCursorPaginatorState"
          }
        ],
        "name": "default"
      }
    ],
    "docFlags": {},
    "tagsByName": {
      "menu-group": "Pagination",
      "extract-docs": ""
    }
  },
  "references": {
    "62": {
      "id": 62,
      "name": "CursorPaginationState",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
          "line": 4,
          "character": 12
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 63,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {},
          "children": [
            {
              "id": 65,
              "name": "cursor",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
                  "line": 6,
                  "character": 4
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 64,
              "name": "pageSize",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
                  "line": 5,
                  "character": 4
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [65, 64]
            }
          ],
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 4,
              "character": 36
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "66": {
      "id": 66,
      "name": "InternalCursorPaginatorState",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
          "line": 9,
          "character": 12
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 67,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {},
          "children": [
            {
              "id": 68,
              "name": "nextCursor",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
                  "line": 10,
                  "character": 4
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "literal",
                    "value": null
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 69,
              "name": "previousCursor",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
                  "line": 11,
                  "character": 4
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "literal",
                    "value": null
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [68, 69]
            }
          ],
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 9,
              "character": 43
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "70": {
      "id": 70,
      "name": "CursorPaginator",
      "kind": 128,
      "kindString": "Class",
      "flags": {},
      "comment": {
        "shortText": "Cursor based paginator",
        "text": "Expects a `nextCursor`, `previousCursor` and optional `pageSize` key in the response. See\n[getPaginationState](doc:getPaginationState) for how to customise this if your backend implementation\ndiffers.\n",
        "tags": [
          {
            "tag": "menu-group",
            "text": "Pagination"
          },
          {
            "tag": "extract-docs",
            "text": "\n"
          }
        ],
        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Cursor based paginator\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
        "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Expects a \", _jsx(_components.code, {\n        children: \"nextCursor\"\n      }), \", \", _jsx(_components.code, {\n        children: \"previousCursor\"\n      }), \" and optional \", _jsx(_components.code, {\n        children: \"pageSize\"\n      }), \" key in the response. See\\n\", _jsx(_components.a, {\n        href: \"doc:getPaginationState\",\n        children: \"getPaginationState\"\n      }), \" for how to customise this if your backend implementation\\ndiffers.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
      },
      "originalName": "default",
      "children": [
        {
          "id": 74,
          "name": "constructor",
          "kind": 512,
          "kindString": "Constructor",
          "flags": {},
          "comment": {},
          "signatures": [
            {
              "id": 75,
              "name": "new CursorPaginator",
              "kind": 16384,
              "kindString": "Constructor signature",
              "flags": {},
              "comment": {
                "tags": [
                  {
                    "tag": "see",
                    "text": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 76,
                  "name": "currentStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "literal",
                    "value": null
                  },
                  "defaultValue": "null",
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 77,
                  "name": "internalStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "literal",
                    "value": null
                  },
                  "defaultValue": "null",
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 70,
                "name": "default"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 474,
                "name": "default.constructor"
              },
              "docFlags": {},
              "tagsByName": {
                "see": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 473,
            "name": "default.constructor"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 116,
          "name": "currentState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 100,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 62,
            "name": "CursorPaginationState"
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 481,
            "name": "default.currentState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 117,
          "name": "internalState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 101,
              "character": 4
            }
          ],
          "type": {
            "type": "intersection",
            "types": [
              {
                "type": "reference",
                "id": 66,
                "name": "InternalCursorPaginatorState"
              },
              {
                "type": "reflection",
                "declaration": {
                  "id": 118,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 119,
                      "name": "responseIsSet",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {
                        "isOptional": true
                      },
                      "sources": [
                        {
                          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                          "line": 101,
                          "character": 37
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "groups": [
                    {
                      "title": "Properties",
                      "kind": 1024,
                      "children": [119]
                    }
                  ],
                  "docFlags": {},
                  "tagsByName": {}
                }
              }
            ]
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 482,
            "name": "default.internalState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 120,
          "name": "setCurrentState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 102,
              "character": 4
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 121,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "signatures": [
                {
                  "id": 122,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "parameters": [
                    {
                      "id": 123,
                      "name": "set",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "id": 62,
                        "name": "CursorPaginationState"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 485,
            "name": "default.setCurrentState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 124,
          "name": "setInternalState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 103,
              "character": 4
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 125,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "signatures": [
                {
                  "id": 126,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "parameters": [
                    {
                      "id": 127,
                      "name": "set",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "id": 66,
                        "name": "InternalCursorPaginatorState"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 489,
            "name": "default.setInternalState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 82,
          "name": "cursor",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 45,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 83,
              "name": "cursor",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The current cursor. This will be null before the first response is received.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The current cursor. This will be null before the first response is received.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 78,
          "name": "nextCursor",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 31,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 79,
              "name": "nextCursor",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The next cursor (if any)",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The next cursor (if any)\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 84,
          "name": "pageSize",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 52,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 85,
              "name": "pageSize",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The current page size, if known",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The current page size, if known\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 80,
          "name": "previousCursor",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 38,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 81,
              "name": "previousCursor",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "THe previous cursor (if any)",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"THe previous cursor (if any)\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 128,
          "name": "responseIsSet",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "comment": {
            "shortText": "True once setResponse has been called and pagination state is known.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 108,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 129,
              "name": "responseIsSet",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "True once setResponse has been called and pagination state is known.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Paginator.responseIsSet"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 493,
            "name": "default.responseIsSet"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 94,
          "name": "first",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 102,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 95,
              "name": "first",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the first page.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the first page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "overwrites": {
                "type": "reference",
                "id": 506,
                "name": "default.first"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 505,
            "name": "default.first"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 92,
          "name": "firstState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 92,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 93,
              "name": "firstState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the first page",
                "text": "Does not transition state. To transition state call `first` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "id": 62,
                "name": "CursorPaginationState"
              },
              "overwrites": {
                "type": "reference",
                "id": 508,
                "name": "default.firstState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 507,
            "name": "default.firstState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 104,
          "name": "getRequestInit",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 158,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 105,
              "name": "getRequestInit",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the options to use with `Endpoint.execute` or `Endpoint.prepare`. Usually\nthis just involves setting `query` to the query string parameters for the paginator\nbut can also provide custom headers or different URL resolve arguments.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Return the options to use with \", _jsx(_components.code, {\n        children: \"Endpoint.execute\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"Endpoint.prepare\"\n      }), \". Usually\\nthis just involves setting \", _jsx(_components.code, {\n        children: \"query\"\n      }), \" to the query string parameters for the paginator\\nbut can also provide custom headers or different URL resolve arguments.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 106,
                  "name": "__namedParameters",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "Object"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 392,
                "name": "PaginatorRequestOptions"
              },
              "overwrites": {
                "type": "reference",
                "id": 500,
                "name": "default.getRequestInit"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 499,
            "name": "default.getRequestInit"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 114,
          "name": "hasNextPage",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 200,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 115,
              "name": "hasNextPage",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if there's more results after the current page",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns true if there's more results after the current page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "overwrites": {
                "type": "reference",
                "id": 518,
                "name": "default.hasNextPage"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 517,
            "name": "default.hasNextPage"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 98,
          "name": "next",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 125,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 99,
              "name": "next",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the next page.",
                "text": "If the last next is not yet known because results haven't been returned this function\ndoes nothing.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the next page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If the last next is not yet known because results haven't been returned this function\\ndoes nothing.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "overwrites": {
                "type": "reference",
                "id": 510,
                "name": "default.next"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 509,
            "name": "default.next"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 96,
          "name": "nextState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 112,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 97,
              "name": "nextState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the first page. If the next page isn't yet known (eg. results\nhaven't yet been returned) then null will be returned.",
                "text": "Does not transition state. To transition state call `next` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page. If the next page isn't yet known (eg. results\\nhaven't yet been returned) then null will be returned.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"next\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 62,
                    "name": "CursorPaginationState"
                  }
                ]
              },
              "overwrites": {
                "type": "reference",
                "id": 512,
                "name": "default.nextState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 511,
            "name": "default.nextState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 86,
          "name": "pageSizeState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 61,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 87,
              "name": "pageSizeState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the specified page size",
                "text": "Does not transition state. To transition state call `setPageSize` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the specified page size\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"setPageSize\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 88,
                  "name": "pageSize",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 62,
                "name": "CursorPaginationState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 102,
          "name": "previous",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 151,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 103,
              "name": "previous",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the previous page.",
                "text": "If the previous page is not yet known because results haven't been returned this function\ndoes nothing.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the previous page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If the previous page is not yet known because results haven't been returned this function\\ndoes nothing.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "overwrites": {
                "type": "reference",
                "id": 514,
                "name": "default.previous"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 513,
            "name": "default.previous"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 100,
          "name": "previousState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 138,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 101,
              "name": "previousState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the previous page. If the previous page isn't yet known (eg. results\nhaven't yet been returned) then null will be returned.",
                "text": "Does not transition state. To transition state call `previous` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the previous page. If the previous page isn't yet known (eg. results\\nhaven't yet been returned) then null will be returned.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"previous\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 62,
                    "name": "CursorPaginationState"
                  }
                ]
              },
              "overwrites": {
                "type": "reference",
                "id": 516,
                "name": "default.previousState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 515,
            "name": "default.previousState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 130,
          "name": "replaceStateControllers",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 151,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 131,
              "name": "replaceStateControllers",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Paginator receives 2 tuples of a state and state setter pair. This is expected to\nmatch the same interface as `useState` in React. The following is a valid simple usage:",
                "text": "```js\nconst paginator = new Paginator(useState(), useState());\n```\n\nNote that we can also pass the state controllers in via `replaceStateControllers` rather\nthan in the constructor. This is so we can memoize the `Paginator` instance which is desirable\nwhen using the paginator as a dependency to React hooks.\n\nAs state is passed in and managed external to the class be aware that any data stored\non the class instance will be lost unless written with `setCurrentState` or `setInternalState`.\nThis design is a compromise between allowing a clear interface for how paginators should\nbe defined and allowing the state to be managed externally (eg. using React state).\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Paginator receives 2 tuples of a state and state setter pair. This is expected to\\nmatch the same interface as \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" in React. The following is a valid simple usage:\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"const paginator = new Paginator(useState(), useState());\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note that we can also pass the state controllers in via \", _jsx(_components.code, {\n          children: \"replaceStateControllers\"\n        }), \" rather\\nthan in the constructor. This is so we can memoize the \", _jsx(_components.code, {\n          children: \"Paginator\"\n        }), \" instance which is desirable\\nwhen using the paginator as a dependency to React hooks.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As state is passed in and managed external to the class be aware that any data stored\\non the class instance will be lost unless written with \", _jsx(_components.code, {\n          children: \"setCurrentState\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"setInternalState\"\n        }), \".\\nThis design is a compromise between allowing a clear interface for how paginators should\\nbe defined and allowing the state to be managed externally (eg. using React state).\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 132,
                  "name": "currentStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The state object and setter (eg. from `useState`) that is used to store\nand transition pagination state. Using this you can do things like easily store state in the URL\n(eg. using `useUrlQueryState`) or other data sources.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter (eg. from \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \") that is used to store\\nand transition pagination state. Using this you can do things like easily store state in the URL\\n(eg. using \", _jsx(_components.code, {\n        children: \"useUrlQueryState\"\n      }), \") or other data sources.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 133,
                  "name": "internalStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The state object and setter that is used for internal state. Internal state\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\nto store things like the total number of results or the current cursor. Passing `useState` here is\nfine.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter that is used for internal state. Internal state\\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\\nto store things like the total number of results or the current cursor. Passing \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" here is\\nfine.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 496,
                "name": "default.replaceStateControllers"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 495,
            "name": "default.replaceStateControllers"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 89,
          "name": "setPageSize",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 83,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 90,
              "name": "setPageSize",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Set the page size",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Set the page size\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 91,
                  "name": "pageSize",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 107,
          "name": "setResponse",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 179,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 108,
              "name": "setResponse",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Sets the internal data based on response. Expects `nextCursor`, `previousCursor` and optionally `pageSize` to be in\nresponse data.",
                "text": "See [getPaginationState](doc:getPaginationState) for how to customise this if your backend implementation\ndiffers.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Sets the internal data based on response. Expects \", _jsx(_components.code, {\n        children: \"nextCursor\"\n      }), \", \", _jsx(_components.code, {\n        children: \"previousCursor\"\n      }), \" and optionally \", _jsx(_components.code, {\n        children: \"pageSize\"\n      }), \" to be in\\nresponse data.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:getPaginationState\",\n        children: \"getPaginationState\"\n      }), \" for how to customise this if your backend implementation\\ndiffers.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 109,
                  "name": "__namedParameters",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 110,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "children": [
                        {
                          "id": 111,
                          "name": "nextCursor",
                          "kind": 1024,
                          "kindString": "Property",
                          "flags": {
                            "isOptional": true
                          },
                          "sources": [
                            {
                              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
                              "line": 184,
                              "character": 8
                            }
                          ],
                          "type": {
                            "type": "union",
                            "types": [
                              {
                                "type": "literal",
                                "value": null
                              },
                              {
                                "type": "intrinsic",
                                "name": "string"
                              }
                            ]
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        },
                        {
                          "id": 113,
                          "name": "pageSize",
                          "kind": 1024,
                          "kindString": "Property",
                          "flags": {
                            "isOptional": true
                          },
                          "sources": [
                            {
                              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
                              "line": 186,
                              "character": 8
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        },
                        {
                          "id": 112,
                          "name": "previousCursor",
                          "kind": 1024,
                          "kindString": "Property",
                          "flags": {
                            "isOptional": true
                          },
                          "sources": [
                            {
                              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
                              "line": 185,
                              "character": 8
                            }
                          ],
                          "type": {
                            "type": "union",
                            "types": [
                              {
                                "type": "literal",
                                "value": null
                              },
                              {
                                "type": "intrinsic",
                                "name": "string"
                              }
                            ]
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "groups": [
                        {
                          "title": "Properties",
                          "kind": 1024,
                          "children": [111, 113, 112]
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "overwrites": {
                "type": "reference",
                "id": 503,
                "name": "default.setResponse"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 502,
            "name": "default.setResponse"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 71,
          "name": "getPaginationState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isStatic": true
          },
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
              "line": 213,
              "character": 11
            }
          ],
          "signatures": [
            {
              "id": 72,
              "name": "getPaginationState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Expected pagination state in the shape:\n{\n    next: null|'http://example.com/?cursor=abc123',\n    previous: null|'http://example.com/?cursor=abc123',\n    results: Array\n}",
                "shortTextMdx": "Expected pagination state in the shape:\n{\n    next: null|'http://example.com/?cursor=abc123',\n    previous: null|'http://example.com/?cursor=abc123',\n    results: Array\n}"
              },
              "parameters": [
                {
                  "id": 73,
                  "name": "requestDetails",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    return _jsx(_Fragment, {});\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 397,
                    "name": "PaginationRequestDetails"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": false
                  },
                  {
                    "type": "reference",
                    "id": 1273,
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "qualifiedName": "Record",
                    "package": "typescript",
                    "name": "Record"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Constructors",
          "kind": 512,
          "children": [74]
        },
        {
          "title": "Properties",
          "kind": 1024,
          "children": [116, 117, 120, 124]
        },
        {
          "title": "Accessors",
          "kind": 262144,
          "children": [82, 78, 84, 80, 128]
        },
        {
          "title": "Methods",
          "kind": 2048,
          "children": [94, 92, 104, 114, 98, 96, 86, 102, 100, 130, 89, 107, 71]
        }
      ],
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/CursorPaginator.ts",
          "line": 24,
          "character": 21
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "id": 472,
          "typeArguments": [
            {
              "type": "reference",
              "id": 62,
              "name": "CursorPaginationState"
            },
            {
              "type": "reference",
              "id": 66,
              "name": "InternalCursorPaginatorState"
            }
          ],
          "name": "default"
        }
      ],
      "docFlags": {},
      "tagsByName": {
        "menu-group": "Pagination",
        "extract-docs": ""
      }
    },
    "135": {
      "id": 135,
      "name": "PaginatorState",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
          "line": 6,
          "character": 12
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "reference",
            "id": 311,
            "name": "PageNumberPaginationState"
          },
          {
            "type": "reference",
            "id": 62,
            "name": "CursorPaginationState"
          },
          {
            "type": "reference",
            "id": 235,
            "name": "LimitOffsetPaginationState"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "136": {
      "id": 136,
      "name": "InferredPaginator",
      "kind": 128,
      "kindString": "Class",
      "flags": {},
      "comment": {
        "shortText": "Class that infers the specific type of pagination based on the response.",
        "text": "Supports [PageNumberPaginator](doc:PageNumberPaginator), [LimitOffsetPaginator](LimitOffsetPaginator) and\n[CursorPaginator](doc:CursorPaginator) with the following rules based on the response data:\n\n* If response contains `nextCursor` or `previousCursor` value paginator is set to [CursorPaginator](doc:CursorPaginator)\n* If response contains `limit` then paginator is set to  [LimitOffsetPaginator](LimitOffsetPaginator)\n* If response contains `total` then paginator is set to [PageNumberPaginator](doc:PageNumberPaginator)\n",
        "tags": [
          {
            "tag": "menu-group",
            "text": "Pagination"
          },
          {
            "tag": "extract-docs",
            "text": "\n"
          }
        ],
        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Class that infers the specific type of pagination based on the response.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
        "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\",\n      ul: \"ul\",\n      li: \"li\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Supports \", _jsx(_components.a, {\n          href: \"doc:PageNumberPaginator\",\n          children: \"PageNumberPaginator\"\n        }), \", \", _jsx(_components.a, {\n          href: \"LimitOffsetPaginator\",\n          children: \"LimitOffsetPaginator\"\n        }), \" and\\n\", _jsx(_components.a, {\n          href: \"doc:CursorPaginator\",\n          children: \"CursorPaginator\"\n        }), \" with the following rules based on the response data:\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"If response contains \", _jsx(_components.code, {\n            children: \"nextCursor\"\n          }), \" or \", _jsx(_components.code, {\n            children: \"previousCursor\"\n          }), \" value paginator is set to \", _jsx(_components.a, {\n            href: \"doc:CursorPaginator\",\n            children: \"CursorPaginator\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"If response contains \", _jsx(_components.code, {\n            children: \"limit\"\n          }), \" then paginator is set to  \", _jsx(_components.a, {\n            href: \"LimitOffsetPaginator\",\n            children: \"LimitOffsetPaginator\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"If response contains \", _jsx(_components.code, {\n            children: \"total\"\n          }), \" then paginator is set to \", _jsx(_components.a, {\n            href: \"doc:PageNumberPaginator\",\n            children: \"PageNumberPaginator\"\n          })]\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
      },
      "originalName": "default",
      "children": [
        {
          "id": 140,
          "name": "constructor",
          "kind": 512,
          "kindString": "Constructor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 172,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 141,
              "name": "new InferredPaginator",
              "kind": 16384,
              "kindString": "Constructor signature",
              "flags": {},
              "comment": {
                "tags": [
                  {
                    "tag": "see",
                    "text": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 142,
                  "name": "currentStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 143,
                  "name": "internalStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 136,
                "name": "default"
              },
              "docFlags": {},
              "tagsByName": {
                "see": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are"
              }
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 144,
          "name": "__paginator",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isOptional": true
          },
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 26,
              "character": 4
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "reference",
                "id": 70,
                "name": "default"
              },
              {
                "type": "reference",
                "id": 318,
                "name": "default"
              },
              {
                "type": "reference",
                "id": 242,
                "name": "default"
              }
            ]
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 169,
          "name": "currentState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 164,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 135,
            "name": "PaginatorState"
          },
          "implementationOf": {
            "type": "reference",
            "id": 405,
            "name": "PaginatorInterface.currentState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 170,
          "name": "internalState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 165,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 1273,
            "typeArguments": [
              {
                "type": "intrinsic",
                "name": "string"
              },
              {
                "type": "intrinsic",
                "name": "any"
              }
            ],
            "qualifiedName": "Record",
            "package": "typescript",
            "name": "Record"
          },
          "implementationOf": {
            "type": "reference",
            "id": 406,
            "name": "PaginatorInterface.internalState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 171,
          "name": "setCurrentState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 166,
              "character": 4
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 172,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "signatures": [
                {
                  "id": 173,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "parameters": [
                    {
                      "id": 174,
                      "name": "nextValue",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "id": 135,
                        "name": "PaginatorState"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "implementationOf": {
            "type": "reference",
            "id": 407,
            "name": "PaginatorInterface.setCurrentState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 175,
          "name": "setInternalState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 167,
              "character": 4
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 176,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "signatures": [
                {
                  "id": 177,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "parameters": [
                    {
                      "id": 178,
                      "name": "set",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "reflection",
                        "declaration": {
                          "id": 179,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {},
                          "signatures": [
                            {
                              "id": 180,
                              "name": "__type",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {},
                              "parameters": [
                                {
                                  "id": 181,
                                  "name": "internalState",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {},
                                  "type": {
                                    "type": "reference",
                                    "id": 1273,
                                    "typeArguments": [
                                      {
                                        "type": "intrinsic",
                                        "name": "string"
                                      },
                                      {
                                        "type": "intrinsic",
                                        "name": "any"
                                      }
                                    ],
                                    "qualifiedName": "Record",
                                    "package": "typescript",
                                    "name": "Record"
                                  },
                                  "docFlags": {},
                                  "tagsByName": {}
                                }
                              ],
                              "type": {
                                "type": "reference",
                                "id": 1273,
                                "typeArguments": [
                                  {
                                    "type": "intrinsic",
                                    "name": "any"
                                  },
                                  {
                                    "type": "intrinsic",
                                    "name": "string"
                                  }
                                ],
                                "qualifiedName": "Record",
                                "package": "typescript",
                                "name": "Record"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "implementationOf": {
            "type": "reference",
            "id": 410,
            "name": "PaginatorInterface.setInternalState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 163,
          "name": "cursor",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 128,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 164,
              "name": "cursor",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The current cursor. Only valid if inferred paginator is [CursorPaginator](doc:CursorPaginator).",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The current cursor. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:CursorPaginator\",\n        children: \"CursorPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 155,
          "name": "limit",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 81,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 156,
              "name": "limit",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The current limit. Only valid if inferred paginator is [LimitOffsetPaginator](doc:LimitOffsetPaginator).",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The current limit. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator\",\n        children: \"LimitOffsetPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 159,
          "name": "nextCursor",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 104,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 160,
              "name": "nextCursor",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The next cursor. Only valid if inferred paginator is [CursorPaginator](doc:CursorPaginator).",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The next cursor. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:CursorPaginator\",\n        children: \"CursorPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 157,
          "name": "offset",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 94,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 158,
              "name": "offset",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The current offset. Only valid if inferred paginator is [LimitOffsetPaginator](doc:LimitOffsetPaginator).",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The current offset. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator\",\n        children: \"LimitOffsetPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 165,
          "name": "page",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 141,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 166,
              "name": "page",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The current page number. Only valid if inferred paginator is [PageNumberPaginator](doc:PageNumberPaginator).",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The current page number. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator\",\n        children: \"PageNumberPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 167,
          "name": "pageSize",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 154,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 168,
              "name": "pageSize",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The current page size. Only valid if inferred paginator is [PageNumberPaginator](doc:PageNumberPaginator).",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The current page size. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator\",\n        children: \"PageNumberPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 147,
          "name": "paginator",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 34,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 148,
              "name": "paginator",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The underlying inferred paginator instance (if known). Only available after `setResponse` has been called.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The underlying inferred paginator instance (if known). Only available after \", _jsx(_components.code, {\n        children: \"setResponse\"\n      }), \" has been called.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "undefined"
                  },
                  {
                    "type": "reference",
                    "id": 70,
                    "name": "default"
                  },
                  {
                    "type": "reference",
                    "id": 318,
                    "name": "default"
                  },
                  {
                    "type": "reference",
                    "id": 242,
                    "name": "default"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "setSignature": [
            {
              "id": 149,
              "name": "paginator",
              "kind": 1048576,
              "kindString": "Set signature",
              "flags": {},
              "comment": {
                "shortText": "The underlying inferred paginator instance (if known). Only available after `setResponse` has been called.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The underlying inferred paginator instance (if known). Only available after \", _jsx(_components.code, {\n        children: \"setResponse\"\n      }), \" has been called.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 150,
                  "name": "paginator",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "undefined"
                      },
                      {
                        "type": "reference",
                        "id": 70,
                        "name": "default"
                      },
                      {
                        "type": "reference",
                        "id": 318,
                        "name": "default"
                      },
                      {
                        "type": "reference",
                        "id": 242,
                        "name": "default"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 161,
          "name": "previousCursor",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 114,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 162,
              "name": "previousCursor",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The previous cursor. Only valid if inferred paginator is [CursorPaginator](doc:CursorPaginator).",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The previous cursor. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:CursorPaginator\",\n        children: \"CursorPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 145,
          "name": "responseIsSet",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 27,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 146,
              "name": "responseIsSet",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "implementationOf": {
                "type": "reference",
                "id": 413,
                "name": "PaginatorInterface.responseIsSet"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 413,
            "name": "PaginatorInterface.responseIsSet"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 151,
          "name": "total",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 55,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 152,
              "name": "total",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The total number of records available. Not valid if inferred paginator is [CursorPaginator](doc:CursorPaginator).",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The total number of records available. Not valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:CursorPaginator\",\n        children: \"CursorPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 153,
          "name": "totalPages",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 68,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 154,
              "name": "totalPages",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The total number of records available. Only valid if inferred paginator is [PageNumberPaginator](doc:PageNumberPaginator).",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The total number of records available. Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator\",\n        children: \"PageNumberPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 220,
          "name": "first",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 416,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 221,
              "name": "first",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the first page.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the first page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "implementationOf": {
                "type": "reference",
                "id": 417,
                "name": "PaginatorInterface.first"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 416,
            "name": "PaginatorInterface.first"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 218,
          "name": "firstState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 402,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 219,
              "name": "firstState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the first page",
                "text": "Does not transition state. To transition state call `first` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 62,
                    "name": "CursorPaginationState"
                  },
                  {
                    "type": "reference",
                    "id": 311,
                    "name": "PageNumberPaginationState"
                  },
                  {
                    "type": "reference",
                    "id": 235,
                    "name": "LimitOffsetPaginationState"
                  }
                ]
              },
              "implementationOf": {
                "type": "reference",
                "id": 419,
                "name": "PaginatorInterface.firstState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 418,
            "name": "PaginatorInterface.firstState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 228,
          "name": "getRequestInit",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 472,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 229,
              "name": "getRequestInit",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 230,
                  "name": "currentInit",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 392,
                "name": "PaginatorRequestOptions"
              },
              "implementationOf": {
                "type": "reference",
                "id": 429,
                "name": "PaginatorInterface.getRequestInit"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 428,
            "name": "PaginatorInterface.getRequestInit"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 226,
          "name": "hasNextPage",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 465,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 227,
              "name": "hasNextPage",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if there's more results after the current page",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns true if there's more results after the current page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "implementationOf": {
                "type": "reference",
                "id": 415,
                "name": "PaginatorInterface.hasNextPage"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 414,
            "name": "PaginatorInterface.hasNextPage"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 224,
          "name": "last",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 450,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 225,
              "name": "last",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the last page. If the last page isn't yet known (eg. results\nhaven't yet been returned) then null will be returned.",
                "text": "If the last page is not yet known because results haven't been returned this function\ndoes nothing.\nNot valid for [CursorPaginator](doc:CursorPaginator)\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the last page. If the last page isn't yet known (eg. results\\nhaven't yet been returned) then null will be returned.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"If the last page is not yet known because results haven't been returned this function\\ndoes nothing.\\nNot valid for \", _jsx(_components.a, {\n        href: \"doc:CursorPaginator\",\n        children: \"CursorPaginator\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 222,
          "name": "lastState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 432,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 223,
              "name": "lastState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the first page",
                "text": "Does not transition state. To transition state call `last` instead.\n\nNot valid for [CursorPaginator](doc:CursorPaginator)\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n          children: \"last\"\n        }), \" instead.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Not valid for \", _jsx(_components.a, {\n          href: \"doc:CursorPaginator\",\n          children: \"CursorPaginator\"\n        })]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 311,
                    "name": "PageNumberPaginationState"
                  },
                  {
                    "type": "reference",
                    "id": 235,
                    "name": "LimitOffsetPaginationState"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 198,
          "name": "limitState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 282,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 199,
              "name": "limitState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Only valid if inferred paginator is [LimitOffsetPaginator](doc:LimitOffsetPaginator).",
                "text": "See [LimitOffsetPaginator.limitState](doc:LimitOffsetPaginator#method-limitState)\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator\",\n        children: \"LimitOffsetPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator#method-limitState\",\n        children: \"LimitOffsetPaginator.limitState\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 200,
                  "name": "limit",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 235,
                    "name": "LimitOffsetPaginationState"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 212,
          "name": "next",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 360,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 213,
              "name": "next",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the next page.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the next page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "implementationOf": {
                "type": "reference",
                "id": 421,
                "name": "PaginatorInterface.next"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 420,
            "name": "PaginatorInterface.next"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 210,
          "name": "nextState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 346,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 211,
              "name": "nextState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the next page",
                "text": "Does not transition state. To transition state call `next` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the next page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"next\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 62,
                    "name": "CursorPaginationState"
                  },
                  {
                    "type": "reference",
                    "id": 311,
                    "name": "PageNumberPaginationState"
                  },
                  {
                    "type": "reference",
                    "id": 235,
                    "name": "LimitOffsetPaginationState"
                  }
                ]
              },
              "implementationOf": {
                "type": "reference",
                "id": 423,
                "name": "PaginatorInterface.nextState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 422,
            "name": "PaginatorInterface.nextState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 204,
          "name": "offsetState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 314,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 205,
              "name": "offsetState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Only valid if inferred paginator is [LimitOffsetPaginator](doc:LimitOffsetPaginator).",
                "text": "See [LimitOffsetPaginator.offsetState](doc:LimitOffsetPaginator#method-offsetState)\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator\",\n        children: \"LimitOffsetPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator#method-offsetState\",\n        children: \"LimitOffsetPaginator.offsetState\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 206,
                  "name": "offset",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 235,
                    "name": "LimitOffsetPaginationState"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 192,
          "name": "pageSizeState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 248,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 193,
              "name": "pageSizeState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Only valid if inferred paginator is [PageNumberPaginator](doc:PageNumberPaginator).",
                "text": "See [PageNumberPaginator.pageSizeState](doc:PageNumberPaginator#method-pageSizeState)\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator\",\n        children: \"PageNumberPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator#method-pageSizeState\",\n        children: \"PageNumberPaginator.pageSizeState\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 194,
                  "name": "pageSize",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 62,
                    "name": "CursorPaginationState"
                  },
                  {
                    "type": "reference",
                    "id": 311,
                    "name": "PageNumberPaginationState"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 186,
          "name": "pageState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 216,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 187,
              "name": "pageState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Only valid if inferred paginator is [PageNumberPaginator](doc:PageNumberPaginator).",
                "text": "See [PageNumberPaginator.pageState](doc:PageNumberPaginator#method-pageState)\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator\",\n        children: \"PageNumberPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator#method-pageState\",\n        children: \"PageNumberPaginator.pageState\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 188,
                  "name": "page",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 311,
                    "name": "PageNumberPaginationState"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 216,
          "name": "previous",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 388,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 217,
              "name": "previous",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the previous page.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the previous page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "implementationOf": {
                "type": "reference",
                "id": 425,
                "name": "PaginatorInterface.previous"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 424,
            "name": "PaginatorInterface.previous"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 214,
          "name": "previousState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 374,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 215,
              "name": "previousState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the previous page",
                "text": "Does not transition state. To transition state call `previous` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the previous page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"previous\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 62,
                    "name": "CursorPaginationState"
                  },
                  {
                    "type": "reference",
                    "id": 311,
                    "name": "PageNumberPaginationState"
                  },
                  {
                    "type": "reference",
                    "id": 235,
                    "name": "LimitOffsetPaginationState"
                  }
                ]
              },
              "implementationOf": {
                "type": "reference",
                "id": 427,
                "name": "PaginatorInterface.previousState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 426,
            "name": "PaginatorInterface.previousState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 182,
          "name": "replaceStateControllers",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 186,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 183,
              "name": "replaceStateControllers",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "tags": [
                  {
                    "tag": "see",
                    "text": "`Paginator.replaceStateControllers`\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 184,
                  "name": "__namedParameters",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "tuple",
                    "elements": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      },
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 185,
                  "name": "__namedParameters",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "tuple",
                    "elements": [
                      {
                        "type": "intrinsic",
                        "name": "any"
                      },
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "implementationOf": {
                "type": "reference",
                "id": 435,
                "name": "PaginatorInterface.replaceStateControllers"
              },
              "docFlags": {},
              "tagsByName": {
                "see": "`Paginator.replaceStateControllers`"
              }
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 434,
            "name": "PaginatorInterface.replaceStateControllers"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 201,
          "name": "setLimit",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 297,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 202,
              "name": "setLimit",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Only valid if inferred paginator is [LimitOffsetPaginator](doc:LimitOffsetPaginator).",
                "text": "See [LimitOffsetPaginator.setLimit](doc:LimitOffsetPaginator#method-setLimit)\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator\",\n        children: \"LimitOffsetPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator#method-setLimit\",\n        children: \"LimitOffsetPaginator.setLimit\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 203,
                  "name": "limit",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 207,
          "name": "setOffset",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 329,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 208,
              "name": "setOffset",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Only valid if inferred paginator is [LimitOffsetPaginator](doc:LimitOffsetPaginator).",
                "text": "See [LimitOffsetPaginator.setOffset](doc:LimitOffsetPaginator#method-setOffset)\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator\",\n        children: \"LimitOffsetPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:LimitOffsetPaginator#method-setOffset\",\n        children: \"LimitOffsetPaginator.setOffset\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 209,
                  "name": "offset",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 189,
          "name": "setPage",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 231,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 190,
              "name": "setPage",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Only valid if inferred paginator is [PageNumberPaginator](doc:PageNumberPaginator).",
                "text": "See [PageNumberPaginator.setPage](doc:PageNumberPaginator#method-setPage)\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator\",\n        children: \"PageNumberPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator#method-setPage\",\n        children: \"PageNumberPaginator.setPage\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 191,
                  "name": "page",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 195,
          "name": "setPageSize",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 265,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 196,
              "name": "setPageSize",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Only valid if inferred paginator is [PageNumberPaginator](doc:PageNumberPaginator).",
                "text": "See [PageNumberPaginator.setPageSize](doc:PageNumberPaginator#method-setPageSize)\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Only valid if inferred paginator is \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator\",\n        children: \"PageNumberPaginator\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:PageNumberPaginator#method-setPageSize\",\n        children: \"PageNumberPaginator.setPageSize\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 197,
                  "name": "pageSize",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 231,
          "name": "setResponse",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 492,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 232,
              "name": "setResponse",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Sets the internal data based on response. This is where the paginator is inferred based on values in the\n`response`.",
                "text": "See [getPaginationState](doc:getPaginationState) for how to customise this if your backend implementation\ndiffers.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Sets the internal data based on response. This is where the paginator is inferred based on values in the\\n\", _jsx(_components.code, {\n        children: \"response\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:getPaginationState\",\n        children: \"getPaginationState\"\n      }), \" for how to customise this if your backend implementation\\ndiffers.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 233,
                  "name": "response",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 1273,
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "qualifiedName": "Record",
                    "package": "typescript",
                    "name": "Record"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "implementationOf": {
                "type": "reference",
                "id": 432,
                "name": "PaginatorInterface.setResponse"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 431,
            "name": "PaginatorInterface.setResponse"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 137,
          "name": "getPaginationState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isStatic": true
          },
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
              "line": 518,
              "character": 11
            }
          ],
          "signatures": [
            {
              "id": 138,
              "name": "getPaginationState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 139,
                  "name": "requestDetails",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 397,
                    "name": "PaginationRequestDetails"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": false
                  },
                  {
                    "type": "reference",
                    "id": 1273,
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "qualifiedName": "Record",
                    "package": "typescript",
                    "name": "Record"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Constructors",
          "kind": 512,
          "children": [140]
        },
        {
          "title": "Properties",
          "kind": 1024,
          "children": [144, 169, 170, 171, 175]
        },
        {
          "title": "Accessors",
          "kind": 262144,
          "children": [163, 155, 159, 157, 165, 167, 147, 161, 145, 151, 153]
        },
        {
          "title": "Methods",
          "kind": 2048,
          "children": [
            220, 218, 228, 226, 224, 222, 198, 212, 210, 204, 192, 186, 216, 214, 182, 201, 207,
            189, 195, 231, 137
          ]
        }
      ],
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/InferredPaginator.ts",
          "line": 24,
          "character": 21
        }
      ],
      "implementedTypes": [
        {
          "type": "reference",
          "id": 404,
          "typeArguments": [
            {
              "type": "reference",
              "id": 135,
              "name": "PaginatorState"
            },
            {
              "type": "reference",
              "id": 1273,
              "typeArguments": [
                {
                  "type": "intrinsic",
                  "name": "string"
                },
                {
                  "type": "intrinsic",
                  "name": "any"
                }
              ],
              "qualifiedName": "Record",
              "package": "typescript",
              "name": "Record"
            }
          ],
          "name": "PaginatorInterface"
        }
      ],
      "docFlags": {},
      "tagsByName": {
        "menu-group": "Pagination",
        "extract-docs": ""
      }
    },
    "235": {
      "id": 235,
      "name": "LimitOffsetPaginationState",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
          "line": 4,
          "character": 12
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 236,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {},
          "children": [
            {
              "id": 237,
              "name": "limit",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
                  "line": 5,
                  "character": 4
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 238,
              "name": "offset",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
                  "line": 6,
                  "character": 4
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [237, 238]
            }
          ],
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 4,
              "character": 41
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "239": {
      "id": 239,
      "name": "InternalLimitOffsetPaginationState",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
          "line": 9,
          "character": 12
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 240,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {},
          "children": [
            {
              "id": 241,
              "name": "total",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
                  "line": 10,
                  "character": 4
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "literal",
                    "value": null
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [241]
            }
          ],
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 9,
              "character": 49
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "242": {
      "id": 242,
      "name": "LimitOffsetPaginator",
      "kind": 128,
      "kindString": "Class",
      "flags": {},
      "comment": {
        "shortText": "Limit & offset based paginator",
        "text": "Expects a `limit` key in the response. See [getPaginationState](doc:getPaginationState) for how\nto customise this if your backend implementation differs.\n",
        "tags": [
          {
            "tag": "menu-group",
            "text": "Pagination"
          },
          {
            "tag": "extract-docs",
            "text": "\n"
          }
        ],
        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Limit & offset based paginator\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
        "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Expects a \", _jsx(_components.code, {\n        children: \"limit\"\n      }), \" key in the response. See \", _jsx(_components.a, {\n        href: \"doc:getPaginationState\",\n        children: \"getPaginationState\"\n      }), \" for how\\nto customise this if your backend implementation differs.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
      },
      "originalName": "default",
      "children": [
        {
          "id": 246,
          "name": "constructor",
          "kind": 512,
          "kindString": "Constructor",
          "flags": {},
          "comment": {},
          "signatures": [
            {
              "id": 247,
              "name": "new LimitOffsetPaginator",
              "kind": 16384,
              "kindString": "Constructor signature",
              "flags": {},
              "comment": {
                "tags": [
                  {
                    "tag": "see",
                    "text": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 248,
                  "name": "currentStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "literal",
                    "value": null
                  },
                  "defaultValue": "null",
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 249,
                  "name": "internalStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "literal",
                    "value": null
                  },
                  "defaultValue": "null",
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 242,
                "name": "default"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 474,
                "name": "default.constructor"
              },
              "docFlags": {},
              "tagsByName": {
                "see": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 473,
            "name": "default.constructor"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 292,
          "name": "currentState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 100,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 235,
            "name": "LimitOffsetPaginationState"
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 481,
            "name": "default.currentState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 293,
          "name": "internalState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 101,
              "character": 4
            }
          ],
          "type": {
            "type": "intersection",
            "types": [
              {
                "type": "reference",
                "id": 239,
                "name": "InternalLimitOffsetPaginationState"
              },
              {
                "type": "reflection",
                "declaration": {
                  "id": 294,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 295,
                      "name": "responseIsSet",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {
                        "isOptional": true
                      },
                      "sources": [
                        {
                          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                          "line": 101,
                          "character": 37
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "groups": [
                    {
                      "title": "Properties",
                      "kind": 1024,
                      "children": [295]
                    }
                  ],
                  "docFlags": {},
                  "tagsByName": {}
                }
              }
            ]
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 482,
            "name": "default.internalState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 296,
          "name": "setCurrentState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 102,
              "character": 4
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 297,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "signatures": [
                {
                  "id": 298,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "parameters": [
                    {
                      "id": 299,
                      "name": "set",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "id": 235,
                        "name": "LimitOffsetPaginationState"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 485,
            "name": "default.setCurrentState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 300,
          "name": "setInternalState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 103,
              "character": 4
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 301,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "signatures": [
                {
                  "id": 302,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "parameters": [
                    {
                      "id": 303,
                      "name": "set",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "id": 239,
                        "name": "InternalLimitOffsetPaginationState"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 489,
            "name": "default.setInternalState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 252,
          "name": "limit",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 36,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 253,
              "name": "limit",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The current limit",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The current limit\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 254,
          "name": "offset",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 47,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 255,
              "name": "offset",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The current offset",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The current offset\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 304,
          "name": "responseIsSet",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "comment": {
            "shortText": "True once setResponse has been called and pagination state is known.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 108,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 305,
              "name": "responseIsSet",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "True once setResponse has been called and pagination state is known.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Paginator.responseIsSet"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 493,
            "name": "default.responseIsSet"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 250,
          "name": "total",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 29,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 251,
              "name": "total",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The total number of records available. This will be null before the first response is received.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The total number of records available. This will be null before the first response is received.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 278,
          "name": "first",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 169,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 279,
              "name": "first",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the first page.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the first page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "overwrites": {
                "type": "reference",
                "id": 506,
                "name": "default.first"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 505,
            "name": "default.first"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 276,
          "name": "firstState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 160,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 277,
              "name": "firstState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the first page",
                "text": "Does not transition state. To transition state call `first` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "id": 235,
                "name": "LimitOffsetPaginationState"
              },
              "overwrites": {
                "type": "reference",
                "id": 508,
                "name": "default.firstState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 507,
            "name": "default.firstState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 284,
          "name": "getRequestInit",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 204,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 285,
              "name": "getRequestInit",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the options to use with `Endpoint.execute` or `Endpoint.prepare`. Usually\nthis just involves setting `query` to the query string parameters for the paginator\nbut can also provide custom headers or different URL resolve arguments.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Return the options to use with \", _jsx(_components.code, {\n        children: \"Endpoint.execute\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"Endpoint.prepare\"\n      }), \". Usually\\nthis just involves setting \", _jsx(_components.code, {\n        children: \"query\"\n      }), \" to the query string parameters for the paginator\\nbut can also provide custom headers or different URL resolve arguments.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 286,
                  "name": "__namedParameters",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "Object"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 392,
                "name": "PaginatorRequestOptions"
              },
              "overwrites": {
                "type": "reference",
                "id": 500,
                "name": "default.getRequestInit"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 499,
            "name": "default.getRequestInit"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 290,
          "name": "hasNextPage",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 234,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 291,
              "name": "hasNextPage",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if there's more results after the current page",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns true if there's more results after the current page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "overwrites": {
                "type": "reference",
                "id": 518,
                "name": "default.hasNextPage"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 517,
            "name": "default.hasNextPage"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 282,
          "name": "last",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 196,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 283,
              "name": "last",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the last page.",
                "text": "If the last page is not yet known because results haven't been returned this function\ndoes nothing.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the last page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If the last page is not yet known because results haven't been returned this function\\ndoes nothing.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 280,
          "name": "lastState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 179,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 281,
              "name": "lastState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the last page. If the last page isn't yet known (eg. results\nhaven't yet been returned) then null will be returned.",
                "text": "Does not transition state. To transition state call `last` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the last page. If the last page isn't yet known (eg. results\\nhaven't yet been returned) then null will be returned.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"last\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 235,
                    "name": "LimitOffsetPaginationState"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 256,
          "name": "limitState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 60,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 257,
              "name": "limitState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the specified limit",
                "text": "Does not transition state. To transition state call `setLimit` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the specified limit\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"setLimit\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 258,
                  "name": "limit",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 235,
                "name": "LimitOffsetPaginationState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 270,
          "name": "next",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 126,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 271,
              "name": "next",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the next page",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the next page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "overwrites": {
                "type": "reference",
                "id": 510,
                "name": "default.next"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 509,
            "name": "default.next"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 268,
          "name": "nextState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 116,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 269,
              "name": "nextState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the next page",
                "text": "Does not transition state. To transition state call `next` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the next page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"next\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 235,
                    "name": "LimitOffsetPaginationState"
                  }
                ]
              },
              "overwrites": {
                "type": "reference",
                "id": 512,
                "name": "default.nextState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 511,
            "name": "default.nextState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 262,
          "name": "offsetState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 92,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 263,
              "name": "offsetState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the specified offset",
                "text": "Does not transition state. To transition state call `offsetState` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the specified offset\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"offsetState\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 264,
                  "name": "offset",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 235,
                "name": "LimitOffsetPaginationState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 274,
          "name": "previous",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 148,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 275,
              "name": "previous",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the previous page.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the previous page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "overwrites": {
                "type": "reference",
                "id": 514,
                "name": "default.previous"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 513,
            "name": "default.previous"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 272,
          "name": "previousState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 138,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 273,
              "name": "previousState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the previous page",
                "text": "Does not transition state. To transition state call `previous` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the previous page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"previous\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 235,
                    "name": "LimitOffsetPaginationState"
                  }
                ]
              },
              "overwrites": {
                "type": "reference",
                "id": 516,
                "name": "default.previousState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 515,
            "name": "default.previousState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 306,
          "name": "replaceStateControllers",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 151,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 307,
              "name": "replaceStateControllers",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Paginator receives 2 tuples of a state and state setter pair. This is expected to\nmatch the same interface as `useState` in React. The following is a valid simple usage:",
                "text": "```js\nconst paginator = new Paginator(useState(), useState());\n```\n\nNote that we can also pass the state controllers in via `replaceStateControllers` rather\nthan in the constructor. This is so we can memoize the `Paginator` instance which is desirable\nwhen using the paginator as a dependency to React hooks.\n\nAs state is passed in and managed external to the class be aware that any data stored\non the class instance will be lost unless written with `setCurrentState` or `setInternalState`.\nThis design is a compromise between allowing a clear interface for how paginators should\nbe defined and allowing the state to be managed externally (eg. using React state).\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Paginator receives 2 tuples of a state and state setter pair. This is expected to\\nmatch the same interface as \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" in React. The following is a valid simple usage:\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"const paginator = new Paginator(useState(), useState());\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note that we can also pass the state controllers in via \", _jsx(_components.code, {\n          children: \"replaceStateControllers\"\n        }), \" rather\\nthan in the constructor. This is so we can memoize the \", _jsx(_components.code, {\n          children: \"Paginator\"\n        }), \" instance which is desirable\\nwhen using the paginator as a dependency to React hooks.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As state is passed in and managed external to the class be aware that any data stored\\non the class instance will be lost unless written with \", _jsx(_components.code, {\n          children: \"setCurrentState\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"setInternalState\"\n        }), \".\\nThis design is a compromise between allowing a clear interface for how paginators should\\nbe defined and allowing the state to be managed externally (eg. using React state).\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 308,
                  "name": "currentStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The state object and setter (eg. from `useState`) that is used to store\nand transition pagination state. Using this you can do things like easily store state in the URL\n(eg. using `useUrlQueryState`) or other data sources.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter (eg. from \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \") that is used to store\\nand transition pagination state. Using this you can do things like easily store state in the URL\\n(eg. using \", _jsx(_components.code, {\n        children: \"useUrlQueryState\"\n      }), \") or other data sources.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 309,
                  "name": "internalStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The state object and setter that is used for internal state. Internal state\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\nto store things like the total number of results or the current cursor. Passing `useState` here is\nfine.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter that is used for internal state. Internal state\\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\\nto store things like the total number of results or the current cursor. Passing \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" here is\\nfine.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 496,
                "name": "default.replaceStateControllers"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 495,
            "name": "default.replaceStateControllers"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 259,
          "name": "setLimit",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 83,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 260,
              "name": "setLimit",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Set the limit",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Set the limit\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 261,
                  "name": "limit",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 265,
          "name": "setOffset",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 107,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 266,
              "name": "setOffset",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 267,
                  "name": "offset",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 287,
          "name": "setResponse",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 224,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 288,
              "name": "setResponse",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Sets the internal data based on response. Expects `limit` to be in response data.",
                "text": "See [getPaginationState](doc:getPaginationState) for how to customise this if your backend implementation\ndiffers.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Sets the internal data based on response. Expects \", _jsx(_components.code, {\n        children: \"limit\"\n      }), \" to be in response data.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:getPaginationState\",\n        children: \"getPaginationState\"\n      }), \" for how to customise this if your backend implementation\\ndiffers.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 289,
                  "name": "__namedParameters",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "Object"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "overwrites": {
                "type": "reference",
                "id": 503,
                "name": "default.setResponse"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 502,
            "name": "default.setResponse"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 243,
          "name": "getPaginationState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isStatic": true
          },
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
              "line": 241,
              "character": 11
            }
          ],
          "signatures": [
            {
              "id": 244,
              "name": "getPaginationState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 245,
                  "name": "requestDetails",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 397,
                    "name": "PaginationRequestDetails"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": false
                  },
                  {
                    "type": "reference",
                    "id": 1273,
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "qualifiedName": "Record",
                    "package": "typescript",
                    "name": "Record"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Constructors",
          "kind": 512,
          "children": [246]
        },
        {
          "title": "Properties",
          "kind": 1024,
          "children": [292, 293, 296, 300]
        },
        {
          "title": "Accessors",
          "kind": 262144,
          "children": [252, 254, 304, 250]
        },
        {
          "title": "Methods",
          "kind": 2048,
          "children": [
            278, 276, 284, 290, 282, 280, 256, 270, 268, 262, 274, 272, 306, 259, 265, 287, 243
          ]
        }
      ],
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/LimitOffsetPaginator.ts",
          "line": 22,
          "character": 21
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "id": 472,
          "typeArguments": [
            {
              "type": "reference",
              "id": 235,
              "name": "LimitOffsetPaginationState"
            },
            {
              "type": "reference",
              "id": 239,
              "name": "InternalLimitOffsetPaginationState"
            }
          ],
          "name": "default"
        }
      ],
      "docFlags": {},
      "tagsByName": {
        "menu-group": "Pagination",
        "extract-docs": ""
      }
    },
    "311": {
      "id": 311,
      "name": "PageNumberPaginationState",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
          "line": 3,
          "character": 12
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 312,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {},
          "children": [
            {
              "id": 313,
              "name": "page",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
                  "line": 4,
                  "character": 4
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 314,
              "name": "pageSize",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
                  "line": 5,
                  "character": 4
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [313, 314]
            }
          ],
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 3,
              "character": 40
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "315": {
      "id": 315,
      "name": "InternalPageNumberPaginationState",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
          "line": 7,
          "character": 12
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 316,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {},
          "children": [
            {
              "id": 317,
              "name": "total",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
                  "line": 8,
                  "character": 4
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  {
                    "type": "literal",
                    "value": null
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [317]
            }
          ],
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 7,
              "character": 48
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "318": {
      "id": 318,
      "name": "PageNumberPaginator",
      "kind": 128,
      "kindString": "Class",
      "flags": {},
      "comment": {
        "shortText": "Page number based paginator",
        "text": "Expects a `total` or `count` key and optional `pageSize` key in the response. `total` or `count` should be the total\nnumber of records available.\n\nIf your backend differs from this (for example by storing the values in different named keys or in headers instead of\nthe response body) you can handle that by extending this class and implementing `getPaginationState` or\nby passing `getPaginationState` to [usePaginator](doc:usePaginator).\n",
        "tags": [
          {
            "tag": "menu-group",
            "text": "Pagination"
          },
          {
            "tag": "extract-docs",
            "text": "\n"
          }
        ],
        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Page number based paginator\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
        "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Expects a \", _jsx(_components.code, {\n          children: \"total\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"count\"\n        }), \" key and optional \", _jsx(_components.code, {\n          children: \"pageSize\"\n        }), \" key in the response. \", _jsx(_components.code, {\n          children: \"total\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"count\"\n        }), \" should be the total\\nnumber of records available.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If your backend differs from this (for example by storing the values in different named keys or in headers instead of\\nthe response body) you can handle that by extending this class and implementing \", _jsx(_components.code, {\n          children: \"getPaginationState\"\n        }), \" or\\nby passing \", _jsx(_components.code, {\n          children: \"getPaginationState\"\n        }), \" to \", _jsx(_components.a, {\n          href: \"doc:usePaginator\",\n          children: \"usePaginator\"\n        }), \".\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
      },
      "originalName": "default",
      "children": [
        {
          "id": 322,
          "name": "constructor",
          "kind": 512,
          "kindString": "Constructor",
          "flags": {},
          "comment": {},
          "signatures": [
            {
              "id": 323,
              "name": "new PageNumberPaginator",
              "kind": 16384,
              "kindString": "Constructor signature",
              "flags": {},
              "comment": {
                "tags": [
                  {
                    "tag": "see",
                    "text": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are\n"
                  }
                ]
              },
              "parameters": [
                {
                  "id": 324,
                  "name": "currentStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "literal",
                    "value": null
                  },
                  "defaultValue": "null",
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 325,
                  "name": "internalStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "literal",
                    "value": null
                  },
                  "defaultValue": "null",
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 318,
                "name": "default"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 474,
                "name": "default.constructor"
              },
              "docFlags": {},
              "tagsByName": {
                "see": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 473,
            "name": "default.constructor"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 373,
          "name": "currentState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 100,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 311,
            "name": "PageNumberPaginationState"
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 481,
            "name": "default.currentState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 374,
          "name": "internalState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 101,
              "character": 4
            }
          ],
          "type": {
            "type": "intersection",
            "types": [
              {
                "type": "reference",
                "id": 315,
                "name": "InternalPageNumberPaginationState"
              },
              {
                "type": "reflection",
                "declaration": {
                  "id": 375,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 376,
                      "name": "responseIsSet",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {
                        "isOptional": true
                      },
                      "sources": [
                        {
                          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                          "line": 101,
                          "character": 37
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "groups": [
                    {
                      "title": "Properties",
                      "kind": 1024,
                      "children": [376]
                    }
                  ],
                  "docFlags": {},
                  "tagsByName": {}
                }
              }
            ]
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 482,
            "name": "default.internalState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 377,
          "name": "setCurrentState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 102,
              "character": 4
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 378,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "signatures": [
                {
                  "id": 379,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "parameters": [
                    {
                      "id": 380,
                      "name": "set",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "id": 311,
                        "name": "PageNumberPaginationState"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 485,
            "name": "default.setCurrentState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 381,
          "name": "setInternalState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 103,
              "character": 4
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 382,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "signatures": [
                {
                  "id": 383,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "parameters": [
                    {
                      "id": 384,
                      "name": "set",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "id": 315,
                        "name": "InternalPageNumberPaginationState"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 489,
            "name": "default.setInternalState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 330,
          "name": "page",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 51,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 331,
              "name": "page",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The current page",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The current page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 332,
          "name": "pageSize",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 68,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 333,
              "name": "pageSize",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The current page size (if known).",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The current page size (if known).\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 385,
          "name": "responseIsSet",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "comment": {
            "shortText": "True once setResponse has been called and pagination state is known.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 108,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 386,
              "name": "responseIsSet",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "True once setResponse has been called and pagination state is known.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Paginator.responseIsSet"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 493,
            "name": "default.responseIsSet"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 326,
          "name": "total",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 31,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 327,
              "name": "total",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The total number of results available on the backend",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The total number of results available on the backend\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 328,
          "name": "totalPages",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 41,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 329,
              "name": "totalPages",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "The total number of pages",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The total number of pages\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 356,
          "name": "first",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 171,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 357,
              "name": "first",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the first page.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the first page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "overwrites": {
                "type": "reference",
                "id": 506,
                "name": "default.first"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 505,
            "name": "default.first"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 354,
          "name": "firstState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 164,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 355,
              "name": "firstState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the first page",
                "text": "Does not transition state. To transition state call `first` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "id": 311,
                "name": "PageNumberPaginationState"
              },
              "overwrites": {
                "type": "reference",
                "id": 508,
                "name": "default.firstState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 507,
            "name": "default.firstState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 362,
          "name": "getRequestInit",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 204,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 363,
              "name": "getRequestInit",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Adds `page` and `pageSize` into query options passed through to the endpoint",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Adds \", _jsx(_components.code, {\n        children: \"page\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"pageSize\"\n      }), \" into query options passed through to the endpoint\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 364,
                  "name": "__namedParameters",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "Object"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 392,
                "name": "PaginatorRequestOptions"
              },
              "overwrites": {
                "type": "reference",
                "id": 500,
                "name": "default.getRequestInit"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 499,
            "name": "default.getRequestInit"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 371,
          "name": "hasNextPage",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 235,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 372,
              "name": "hasNextPage",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if there's more results after the current page",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns true if there's more results after the current page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "overwrites": {
                "type": "reference",
                "id": 518,
                "name": "default.hasNextPage"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 517,
            "name": "default.hasNextPage"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 360,
          "name": "last",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 194,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 361,
              "name": "last",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the last page. If the last page isn't yet known (eg. results\nhaven't yet been returned) then null will be returned.",
                "text": "If the last page is not yet known because results haven't been returned this function\ndoes nothing.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the last page. If the last page isn't yet known (eg. results\\nhaven't yet been returned) then null will be returned.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If the last page is not yet known because results haven't been returned this function\\ndoes nothing.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 358,
          "name": "lastState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 180,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 359,
              "name": "lastState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the first page",
                "text": "Does not transition state. To transition state call `last` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"last\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 311,
                    "name": "PageNumberPaginationState"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 348,
          "name": "next",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 139,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 349,
              "name": "next",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the next page.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the next page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "overwrites": {
                "type": "reference",
                "id": 510,
                "name": "default.next"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 509,
            "name": "default.next"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 346,
          "name": "nextState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 132,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 347,
              "name": "nextState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the next page",
                "text": "Does not transition state. To transition state call `next` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the next page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"next\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "id": 311,
                "name": "PageNumberPaginationState"
              },
              "overwrites": {
                "type": "reference",
                "id": 512,
                "name": "default.nextState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 511,
            "name": "default.nextState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 340,
          "name": "pageSizeState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 100,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 341,
              "name": "pageSizeState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the specified page size",
                "text": "Does not transition state. To transition state call `setPageSize` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the specified page size\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"setPageSize\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 342,
                  "name": "pageSize",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 311,
                "name": "PageNumberPaginationState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 334,
          "name": "pageState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 81,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 335,
              "name": "pageState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the specified page number",
                "text": "Does not transition state. To transition state call `setPage` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the specified page number\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"setPage\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 336,
                  "name": "page",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 311,
                "name": "PageNumberPaginationState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 352,
          "name": "previous",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 155,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 353,
              "name": "previous",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the previous page.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the previous page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "overwrites": {
                "type": "reference",
                "id": 514,
                "name": "default.previous"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 513,
            "name": "default.previous"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 350,
          "name": "previousState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 148,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 351,
              "name": "previousState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the previous page",
                "text": "Does not transition state. To transition state call `previous` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the previous page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"previous\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "id": 311,
                "name": "PageNumberPaginationState"
              },
              "overwrites": {
                "type": "reference",
                "id": 516,
                "name": "default.previousState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 515,
            "name": "default.previousState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 387,
          "name": "replaceStateControllers",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 151,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 388,
              "name": "replaceStateControllers",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Paginator receives 2 tuples of a state and state setter pair. This is expected to\nmatch the same interface as `useState` in React. The following is a valid simple usage:",
                "text": "```js\nconst paginator = new Paginator(useState(), useState());\n```\n\nNote that we can also pass the state controllers in via `replaceStateControllers` rather\nthan in the constructor. This is so we can memoize the `Paginator` instance which is desirable\nwhen using the paginator as a dependency to React hooks.\n\nAs state is passed in and managed external to the class be aware that any data stored\non the class instance will be lost unless written with `setCurrentState` or `setInternalState`.\nThis design is a compromise between allowing a clear interface for how paginators should\nbe defined and allowing the state to be managed externally (eg. using React state).\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Paginator receives 2 tuples of a state and state setter pair. This is expected to\\nmatch the same interface as \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" in React. The following is a valid simple usage:\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"const paginator = new Paginator(useState(), useState());\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note that we can also pass the state controllers in via \", _jsx(_components.code, {\n          children: \"replaceStateControllers\"\n        }), \" rather\\nthan in the constructor. This is so we can memoize the \", _jsx(_components.code, {\n          children: \"Paginator\"\n        }), \" instance which is desirable\\nwhen using the paginator as a dependency to React hooks.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As state is passed in and managed external to the class be aware that any data stored\\non the class instance will be lost unless written with \", _jsx(_components.code, {\n          children: \"setCurrentState\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"setInternalState\"\n        }), \".\\nThis design is a compromise between allowing a clear interface for how paginators should\\nbe defined and allowing the state to be managed externally (eg. using React state).\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 389,
                  "name": "currentStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The state object and setter (eg. from `useState`) that is used to store\nand transition pagination state. Using this you can do things like easily store state in the URL\n(eg. using `useUrlQueryState`) or other data sources.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter (eg. from \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \") that is used to store\\nand transition pagination state. Using this you can do things like easily store state in the URL\\n(eg. using \", _jsx(_components.code, {\n        children: \"useUrlQueryState\"\n      }), \") or other data sources.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 390,
                  "name": "internalStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The state object and setter that is used for internal state. Internal state\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\nto store things like the total number of results or the current cursor. Passing `useState` here is\nfine.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter that is used for internal state. Internal state\\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\\nto store things like the total number of results or the current cursor. Passing \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" here is\\nfine.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 496,
                "name": "default.replaceStateControllers"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 495,
            "name": "default.replaceStateControllers"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 337,
          "name": "setPage",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 91,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 338,
              "name": "setPage",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Change to the specified page",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Change to the specified page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 339,
                  "name": "page",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 343,
          "name": "setPageSize",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 123,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 344,
              "name": "setPageSize",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Change to the specified page size",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Change to the specified page size\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 345,
                  "name": "pageSize",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 365,
          "name": "setResponse",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 225,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 366,
              "name": "setResponse",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Sets the internal data based on response. Expects `total` and optionally `pageSize` to be in\nresponse data.",
                "text": "See [getPaginationState](doc:getPaginationState) for how to customise this if your backend implementation\ndiffers.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Sets the internal data based on response. Expects \", _jsx(_components.code, {\n        children: \"total\"\n      }), \" and optionally \", _jsx(_components.code, {\n        children: \"pageSize\"\n      }), \" to be in\\nresponse data.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:getPaginationState\",\n        children: \"getPaginationState\"\n      }), \" for how to customise this if your backend implementation\\ndiffers.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 367,
                  "name": "__namedParameters",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 368,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "children": [
                        {
                          "id": 370,
                          "name": "pageSize",
                          "kind": 1024,
                          "kindString": "Property",
                          "flags": {
                            "isOptional": true
                          },
                          "sources": [
                            {
                              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
                              "line": 225,
                              "character": 54
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        },
                        {
                          "id": 369,
                          "name": "total",
                          "kind": 1024,
                          "kindString": "Property",
                          "flags": {},
                          "sources": [
                            {
                              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
                              "line": 225,
                              "character": 39
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "groups": [
                        {
                          "title": "Properties",
                          "kind": 1024,
                          "children": [370, 369]
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "overwrites": {
                "type": "reference",
                "id": 503,
                "name": "default.setResponse"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "overwrites": {
            "type": "reference",
            "id": 502,
            "name": "default.setResponse"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 319,
          "name": "getPaginationState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isStatic": true
          },
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
              "line": 250,
              "character": 11
            }
          ],
          "signatures": [
            {
              "id": 320,
              "name": "getPaginationState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Expects `decodedBody` to include a key `results` which should be an array of return records and a variable\n`count` or `total` that contains the total number of records available.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Expects \", _jsx(_components.code, {\n        children: \"decodedBody\"\n      }), \" to include a key \", _jsx(_components.code, {\n        children: \"results\"\n      }), \" which should be an array of return records and a variable\\n\", _jsx(_components.code, {\n        children: \"count\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"total\"\n      }), \" that contains the total number of records available.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 321,
                  "name": "requestDetails",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    return _jsx(_Fragment, {});\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 397,
                    "name": "PaginationRequestDetails"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": false
                  },
                  {
                    "type": "reference",
                    "id": 1273,
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "qualifiedName": "Record",
                    "package": "typescript",
                    "name": "Record"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Constructors",
          "kind": 512,
          "children": [322]
        },
        {
          "title": "Properties",
          "kind": 1024,
          "children": [373, 374, 377, 381]
        },
        {
          "title": "Accessors",
          "kind": 262144,
          "children": [330, 332, 385, 326, 328]
        },
        {
          "title": "Methods",
          "kind": 2048,
          "children": [
            356, 354, 362, 371, 360, 358, 348, 346, 340, 334, 352, 350, 387, 337, 343, 365, 319
          ]
        }
      ],
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/PageNumberPaginator.ts",
          "line": 24,
          "character": 21
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "id": 472,
          "typeArguments": [
            {
              "type": "reference",
              "id": 311,
              "name": "PageNumberPaginationState"
            },
            {
              "type": "reference",
              "id": 315,
              "name": "InternalPageNumberPaginationState"
            }
          ],
          "name": "default"
        }
      ],
      "docFlags": {},
      "tagsByName": {
        "menu-group": "Pagination",
        "extract-docs": ""
      }
    },
    "392": {
      "id": 392,
      "name": "PaginatorRequestOptions",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 1,
          "character": 12
        }
      ],
      "type": {
        "type": "intersection",
        "types": [
          {
            "type": "reference",
            "id": 1277,
            "typeArguments": [
              {
                "type": "reference",
                "id": 1280,
                "qualifiedName": "RequestInit",
                "package": "typescript",
                "name": "RequestInit"
              },
              {
                "type": "literal",
                "value": "headers"
              }
            ],
            "qualifiedName": "Omit",
            "package": "typescript",
            "name": "Omit"
          },
          {
            "type": "reflection",
            "declaration": {
              "id": 393,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "children": [
                {
                  "id": 394,
                  "name": "headers",
                  "kind": 1024,
                  "kindString": "Property",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "Any headers to add to the request. You can unset default headers that might be specified in the default\n`Endpoint.defaultConfig.requestInit` by setting the value to `undefined`.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Any headers to add to the request. You can unset default headers that might be specified in the default\\n\", _jsx(_components.code, {\n        children: \"Endpoint.defaultConfig.requestInit\"\n      }), \" by setting the value to \", _jsx(_components.code, {\n        children: \"undefined\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "sources": [
                    {
                      "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                      "line": 6,
                      "character": 4
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "id": 1294,
                        "qualifiedName": "HeadersInit",
                        "package": "typescript",
                        "name": "HeadersInit"
                      },
                      {
                        "type": "reference",
                        "id": 1273,
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "union",
                            "types": [
                              {
                                "type": "intrinsic",
                                "name": "undefined"
                              },
                              {
                                "type": "intrinsic",
                                "name": "string"
                              }
                            ]
                          }
                        ],
                        "qualifiedName": "Record",
                        "package": "typescript",
                        "name": "Record"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 396,
                  "name": "query",
                  "kind": 1024,
                  "kindString": "Property",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "Any query request parameters",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Any query request parameters\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "sources": [
                    {
                      "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                      "line": 14,
                      "character": 4
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 1273,
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "boolean"
                          },
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "literal",
                            "value": null
                          },
                          {
                            "type": "intrinsic",
                            "name": "number"
                          }
                        ]
                      }
                    ],
                    "qualifiedName": "Record",
                    "package": "typescript",
                    "name": "Record"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 395,
                  "name": "urlArgs",
                  "kind": 1024,
                  "kindString": "Property",
                  "flags": {
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "Any arguments for the [URL](doc:UrlPattern)",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Any arguments for the \", _jsx(_components.a, {\n        href: \"doc:UrlPattern\",\n        children: \"URL\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "sources": [
                    {
                      "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                      "line": 10,
                      "character": 4
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 1273,
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "qualifiedName": "Record",
                    "package": "typescript",
                    "name": "Record"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "groups": [
                {
                  "title": "Properties",
                  "kind": 1024,
                  "children": [394, 396, 395]
                }
              ],
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                  "line": 1,
                  "character": 69
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "397": {
      "id": 397,
      "name": "PaginationRequestDetails",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {},
      "comment": {
        "tags": [
          {
            "tag": "expand-properties",
            "text": "eg. the return value from [Endpoint.execute](doc:Endpoint#method-execute)\n"
          }
        ]
      },
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 20,
          "character": 12
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 398,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {},
          "children": [
            {
              "id": 403,
              "name": "decodedBody",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "shortText": "The value returned by `decodedBody`. See [Endpoint.execute](doc:Endpoint#method-execute).",
                "text": "This may be a sub-key of the data returned by `Endpoint.execute`, eg. if the `path` option is used in\n[paginationMiddleware](doc:paginationMiddleware). eg. If `decodedBody` from the `Endpoint` was\n\n```json\n{\n    users: {\n        count: 10,\n        results: [...],\n    }\n    extraDetails: {...}\n}\n```\n\nand `paginationMiddleware` was used with `path: 'users'` then `decodedBody` would be:\n\n```json\n{\n    count: 10,\n    results: [...]\n}\n```\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The value returned by \", _jsx(_components.code, {\n        children: \"decodedBody\"\n      }), \". See \", _jsx(_components.a, {\n        href: \"doc:Endpoint#method-execute\",\n        children: \"Endpoint.execute\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      a: \"a\",\n      pre: \"pre\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"This may be a sub-key of the data returned by \", _jsx(_components.code, {\n          children: \"Endpoint.execute\"\n        }), \", eg. if the \", _jsx(_components.code, {\n          children: \"path\"\n        }), \" option is used in\\n\", _jsx(_components.a, {\n          href: \"doc:paginationMiddleware\",\n          children: \"paginationMiddleware\"\n        }), \". eg. If \", _jsx(_components.code, {\n          children: \"decodedBody\"\n        }), \" from the \", _jsx(_components.code, {\n          children: \"Endpoint\"\n        }), \" was\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n    users: {\\n        count: 10,\\n        results: [...],\\n    }\\n    extraDetails: {...}\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"and \", _jsx(_components.code, {\n          children: \"paginationMiddleware\"\n        }), \" was used with \", _jsx(_components.code, {\n          children: \"path: 'users'\"\n        }), \" then \", _jsx(_components.code, {\n          children: \"decodedBody\"\n        }), \" would be:\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n    count: 10,\\n    results: [...]\\n}\\n\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                  "line": 62,
                  "character": 4
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 399,
              "name": "query",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "shortText": "Any query string parameters",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Any query string parameters\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                  "line": 24,
                  "character": 4
                }
              ],
              "type": {
                "type": "reference",
                "id": 1273,
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "boolean"
                      },
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      }
                    ]
                  }
                ],
                "qualifiedName": "Record",
                "package": "typescript",
                "name": "Record"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 402,
              "name": "response",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "shortText": "The `Response` object, if available",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"Response\"\n      }), \" object, if available\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                  "line": 36,
                  "character": 4
                }
              ],
              "type": {
                "type": "reference",
                "id": 1295,
                "qualifiedName": "Response",
                "package": "typescript",
                "name": "Response"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 401,
              "name": "url",
              "kind": 1024,
              "kindString": "Property",
              "flags": {},
              "comment": {
                "shortText": "Resolved URL",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Resolved URL\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                  "line": 32,
                  "character": 4
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 400,
              "name": "urlArgs",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isOptional": true
              },
              "comment": {
                "shortText": "Any arguments used to resolve URL",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Any arguments used to resolve URL\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                  "line": 28,
                  "character": 4
                }
              ],
              "type": {
                "type": "reference",
                "id": 1273,
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "any"
                  }
                ],
                "qualifiedName": "Record",
                "package": "typescript",
                "name": "Record"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [403, 399, 402, 401, 400]
            }
          ],
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 20,
              "character": 39
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "docFlags": {
        "expandProperties": true
      },
      "tagsByName": {
        "expand-properties": "eg. the return value from [Endpoint.execute](doc:Endpoint#method-execute)"
      }
    },
    "404": {
      "id": 404,
      "name": "PaginatorInterface",
      "kind": 256,
      "kindString": "Interface",
      "flags": {},
      "children": [
        {
          "id": 405,
          "name": "currentState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 66,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 439,
            "name": "State"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 406,
          "name": "internalState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 67,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 441,
            "name": "InternalState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 413,
          "name": "responseIsSet",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 70,
              "character": 4
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 416,
          "name": "first",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 417,
              "name": "first",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 418,
          "name": "firstState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 419,
              "name": "firstState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 439,
                    "name": "State"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 428,
          "name": "getRequestInit",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 429,
              "name": "getRequestInit",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 430,
                  "name": "options",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 392,
                    "name": "PaginatorRequestOptions"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 392,
                "name": "PaginatorRequestOptions"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 414,
          "name": "hasNextPage",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 415,
              "name": "hasNextPage",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 420,
          "name": "next",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 421,
              "name": "next",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 422,
          "name": "nextState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 423,
              "name": "nextState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 439,
                    "name": "State"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 424,
          "name": "previous",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 425,
              "name": "previous",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 426,
          "name": "previousState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 427,
              "name": "previousState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 439,
                    "name": "State"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 434,
          "name": "replaceStateControllers",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 435,
              "name": "replaceStateControllers",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 436,
                  "name": "currentStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 437,
                  "name": "internalStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 407,
          "name": "setCurrentState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 68,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 408,
              "name": "setCurrentState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 409,
                  "name": "set",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 439,
                    "name": "State"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 410,
          "name": "setInternalState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 69,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 411,
              "name": "setInternalState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 412,
                  "name": "set",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 441,
                    "name": "InternalState"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 431,
          "name": "setResponse",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "signatures": [
            {
              "id": 432,
              "name": "setResponse",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 433,
                  "name": "response",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 1273,
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "qualifiedName": "Record",
                    "package": "typescript",
                    "name": "Record"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [405, 406, 413]
        },
        {
          "title": "Methods",
          "kind": 2048,
          "children": [416, 418, 428, 414, 420, 422, 424, 426, 434, 407, 410, 431]
        }
      ],
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 65,
          "character": 17
        }
      ],
      "typeParameter": [
        {
          "id": 439,
          "name": "State",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {},
          "default": {
            "type": "reflection",
            "declaration": {
              "id": 438,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                  "line": 65,
                  "character": 44
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 441,
          "name": "InternalState",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {},
          "default": {
            "type": "reflection",
            "declaration": {
              "id": 440,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                  "line": 65,
                  "character": 64
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "implementedBy": [
        {
          "type": "reference",
          "id": 136,
          "name": "InferredPaginator"
        },
        {
          "type": "reference",
          "id": 472,
          "name": "Paginator"
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "405": {
      "id": 405,
      "name": "currentState",
      "kind": 1024,
      "kindString": "Property",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 66,
          "character": 4
        }
      ],
      "type": {
        "type": "reference",
        "id": 439,
        "name": "State"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "406": {
      "id": 406,
      "name": "internalState",
      "kind": 1024,
      "kindString": "Property",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 67,
          "character": 4
        }
      ],
      "type": {
        "type": "reference",
        "id": 441,
        "name": "InternalState"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "407": {
      "id": 407,
      "name": "setCurrentState",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 68,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 408,
          "name": "setCurrentState",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "parameters": [
            {
              "id": 409,
              "name": "set",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "type": {
                "type": "reference",
                "id": 439,
                "name": "State"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "void"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "410": {
      "id": 410,
      "name": "setInternalState",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 69,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 411,
          "name": "setInternalState",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "parameters": [
            {
              "id": 412,
              "name": "set",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "type": {
                "type": "reference",
                "id": 441,
                "name": "InternalState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "void"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "413": {
      "id": 413,
      "name": "responseIsSet",
      "kind": 1024,
      "kindString": "Property",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 70,
          "character": 4
        }
      ],
      "type": {
        "type": "intrinsic",
        "name": "boolean"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "472": {
      "id": 472,
      "name": "Paginator",
      "kind": 128,
      "kindString": "Class",
      "flags": {
        "isAbstract": true
      },
      "comment": {
        "shortText": "Base class for a paginator.",
        "tags": [
          {
            "tag": "menu-group",
            "text": "Pagination"
          },
          {
            "tag": "extract-docs",
            "text": "\n"
          }
        ],
        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Base class for a paginator.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
      },
      "originalName": "default",
      "children": [
        {
          "id": 473,
          "name": "constructor",
          "kind": 512,
          "kindString": "Constructor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 115,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 474,
              "name": "new Paginator",
              "kind": 16384,
              "kindString": "Constructor signature",
              "flags": {},
              "comment": {
                "tags": [
                  {
                    "tag": "see",
                    "text": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are\n"
                  }
                ]
              },
              "typeParameter": [
                {
                  "id": 476,
                  "name": "State",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {},
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 475,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 478,
                  "name": "InternalState",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {},
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 477,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {},
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "parameters": [
                {
                  "id": 479,
                  "name": "currentStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "literal",
                    "value": null
                  },
                  "defaultValue": "null",
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 480,
                  "name": "internalStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "literal",
                    "value": null
                  },
                  "defaultValue": "null",
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 472,
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 476,
                    "name": "State"
                  },
                  {
                    "type": "reference",
                    "id": 478,
                    "name": "InternalState"
                  }
                ],
                "name": "default"
              },
              "docFlags": {},
              "tagsByName": {
                "see": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are"
              }
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 481,
          "name": "currentState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 100,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 476,
            "name": "State"
          },
          "implementationOf": {
            "type": "reference",
            "id": 405,
            "name": "PaginatorInterface.currentState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 482,
          "name": "internalState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 101,
              "character": 4
            }
          ],
          "type": {
            "type": "intersection",
            "types": [
              {
                "type": "reference",
                "id": 478,
                "name": "InternalState"
              },
              {
                "type": "reflection",
                "declaration": {
                  "id": 483,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "children": [
                    {
                      "id": 484,
                      "name": "responseIsSet",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {
                        "isOptional": true
                      },
                      "sources": [
                        {
                          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                          "line": 101,
                          "character": 37
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "groups": [
                    {
                      "title": "Properties",
                      "kind": 1024,
                      "children": [484]
                    }
                  ],
                  "docFlags": {},
                  "tagsByName": {}
                }
              }
            ]
          },
          "implementationOf": {
            "type": "reference",
            "id": 406,
            "name": "PaginatorInterface.internalState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 485,
          "name": "setCurrentState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 102,
              "character": 4
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 486,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "signatures": [
                {
                  "id": 487,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "parameters": [
                    {
                      "id": 488,
                      "name": "set",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "id": 476,
                        "name": "State"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "implementationOf": {
            "type": "reference",
            "id": 407,
            "name": "PaginatorInterface.setCurrentState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 489,
          "name": "setInternalState",
          "kind": 1024,
          "kindString": "Property",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 103,
              "character": 4
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 490,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "signatures": [
                {
                  "id": 491,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {},
                  "parameters": [
                    {
                      "id": 492,
                      "name": "set",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {},
                      "type": {
                        "type": "reference",
                        "id": 478,
                        "name": "InternalState"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "implementationOf": {
            "type": "reference",
            "id": 410,
            "name": "PaginatorInterface.setInternalState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 493,
          "name": "responseIsSet",
          "kind": 262144,
          "kindString": "Accessor",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 108,
              "character": 8
            }
          ],
          "getSignature": [
            {
              "id": 494,
              "name": "responseIsSet",
              "kind": 524288,
              "kindString": "Get signature",
              "flags": {},
              "comment": {
                "shortText": "True once setResponse has been called and pagination state is known.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "implementationOf": {
                "type": "reference",
                "id": 413,
                "name": "PaginatorInterface.responseIsSet"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 413,
            "name": "PaginatorInterface.responseIsSet"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 505,
          "name": "first",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 202,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 506,
              "name": "first",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the first page.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the first page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "implementationOf": {
                "type": "reference",
                "id": 417,
                "name": "PaginatorInterface.first"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 416,
            "name": "PaginatorInterface.first"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 507,
          "name": "firstState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 211,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 508,
              "name": "firstState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the first page",
                "text": "Does not transition state. To transition state call `first` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "id": 476,
                "name": "State"
              },
              "implementationOf": {
                "type": "reference",
                "id": 419,
                "name": "PaginatorInterface.firstState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 418,
            "name": "PaginatorInterface.firstState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 499,
          "name": "getRequestInit",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 184,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 500,
              "name": "getRequestInit",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the options to use with `Endpoint.execute` or `Endpoint.prepare`. Usually\nthis just involves setting `query` to the query string parameters for the paginator\nbut can also provide custom headers or different URL resolve arguments.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Return the options to use with \", _jsx(_components.code, {\n        children: \"Endpoint.execute\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"Endpoint.prepare\"\n      }), \". Usually\\nthis just involves setting \", _jsx(_components.code, {\n        children: \"query\"\n      }), \" to the query string parameters for the paginator\\nbut can also provide custom headers or different URL resolve arguments.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 501,
                  "name": "options",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The existing options for the endpoint\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The existing options for the endpoint\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 392,
                    "name": "PaginatorRequestOptions"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 392,
                "name": "PaginatorRequestOptions"
              },
              "implementationOf": {
                "type": "reference",
                "id": 429,
                "name": "PaginatorInterface.getRequestInit"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 428,
            "name": "PaginatorInterface.getRequestInit"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 517,
          "name": "hasNextPage",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 250,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 518,
              "name": "hasNextPage",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Returns true if there's more results after the current page",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns true if there's more results after the current page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "implementationOf": {
                "type": "reference",
                "id": 415,
                "name": "PaginatorInterface.hasNextPage"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 414,
            "name": "PaginatorInterface.hasNextPage"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 509,
          "name": "next",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 218,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 510,
              "name": "next",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the next page.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the next page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "implementationOf": {
                "type": "reference",
                "id": 421,
                "name": "PaginatorInterface.next"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 420,
            "name": "PaginatorInterface.next"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 511,
          "name": "nextState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 227,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 512,
              "name": "nextState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the next page",
                "text": "Does not transition state. To transition state call `next` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the next page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"next\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 476,
                    "name": "State"
                  }
                ]
              },
              "implementationOf": {
                "type": "reference",
                "id": 423,
                "name": "PaginatorInterface.nextState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 422,
            "name": "PaginatorInterface.nextState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 513,
          "name": "previous",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 234,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 514,
              "name": "previous",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Go to the previous page.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the previous page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "implementationOf": {
                "type": "reference",
                "id": 425,
                "name": "PaginatorInterface.previous"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 424,
            "name": "PaginatorInterface.previous"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 515,
          "name": "previousState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 243,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 516,
              "name": "previousState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Return the state for the previous page",
                "text": "Does not transition state. To transition state call `previous` instead.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the previous page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"previous\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 476,
                    "name": "State"
                  }
                ]
              },
              "implementationOf": {
                "type": "reference",
                "id": 427,
                "name": "PaginatorInterface.previousState"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 426,
            "name": "PaginatorInterface.previousState"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 495,
          "name": "replaceStateControllers",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 151,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 496,
              "name": "replaceStateControllers",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "Paginator receives 2 tuples of a state and state setter pair. This is expected to\nmatch the same interface as `useState` in React. The following is a valid simple usage:",
                "text": "```js\nconst paginator = new Paginator(useState(), useState());\n```\n\nNote that we can also pass the state controllers in via `replaceStateControllers` rather\nthan in the constructor. This is so we can memoize the `Paginator` instance which is desirable\nwhen using the paginator as a dependency to React hooks.\n\nAs state is passed in and managed external to the class be aware that any data stored\non the class instance will be lost unless written with `setCurrentState` or `setInternalState`.\nThis design is a compromise between allowing a clear interface for how paginators should\nbe defined and allowing the state to be managed externally (eg. using React state).\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Paginator receives 2 tuples of a state and state setter pair. This is expected to\\nmatch the same interface as \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" in React. The following is a valid simple usage:\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"const paginator = new Paginator(useState(), useState());\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note that we can also pass the state controllers in via \", _jsx(_components.code, {\n          children: \"replaceStateControllers\"\n        }), \" rather\\nthan in the constructor. This is so we can memoize the \", _jsx(_components.code, {\n          children: \"Paginator\"\n        }), \" instance which is desirable\\nwhen using the paginator as a dependency to React hooks.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As state is passed in and managed external to the class be aware that any data stored\\non the class instance will be lost unless written with \", _jsx(_components.code, {\n          children: \"setCurrentState\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"setInternalState\"\n        }), \".\\nThis design is a compromise between allowing a clear interface for how paginators should\\nbe defined and allowing the state to be managed externally (eg. using React state).\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 497,
                  "name": "currentStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The state object and setter (eg. from `useState`) that is used to store\nand transition pagination state. Using this you can do things like easily store state in the URL\n(eg. using `useUrlQueryState`) or other data sources.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter (eg. from \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \") that is used to store\\nand transition pagination state. Using this you can do things like easily store state in the URL\\n(eg. using \", _jsx(_components.code, {\n        children: \"useUrlQueryState\"\n      }), \") or other data sources.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 498,
                  "name": "internalStatePair",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The state object and setter that is used for internal state. Internal state\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\nto store things like the total number of results or the current cursor. Passing `useState` here is\nfine.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter that is used for internal state. Internal state\\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\\nto store things like the total number of results or the current cursor. Passing \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" here is\\nfine.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "implementationOf": {
                "type": "reference",
                "id": 435,
                "name": "PaginatorInterface.replaceStateControllers"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 434,
            "name": "PaginatorInterface.replaceStateControllers"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 502,
          "name": "setResponse",
          "kind": 2048,
          "kindString": "Method",
          "flags": {},
          "sources": [
            {
              "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
              "line": 195,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 503,
              "name": "setResponse",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "comment": {
                "shortText": "This is called when an `Endpoint` has resolved and is passed the response from the\nendpoint. This is used to update the relevant paginator state  - eg. the total\nnumber of records, next & previous cursors etc.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"This is called when an \", _jsx(_components.code, {\n        children: \"Endpoint\"\n      }), \" has resolved and is passed the response from the\\nendpoint. This is used to update the relevant paginator state  - eg. the total\\nnumber of records, next & previous cursors etc.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 504,
                  "name": "response",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "comment": {
                    "shortText": "The response as returned by the endpoint this paginator is used with.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The response as returned by the endpoint this paginator is used with.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 1273,
                    "typeArguments": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "qualifiedName": "Record",
                    "package": "typescript",
                    "name": "Record"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "implementationOf": {
                "type": "reference",
                "id": 432,
                "name": "PaginatorInterface.setResponse"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "implementationOf": {
            "type": "reference",
            "id": 431,
            "name": "PaginatorInterface.setResponse"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Constructors",
          "kind": 512,
          "children": [473]
        },
        {
          "title": "Properties",
          "kind": 1024,
          "children": [481, 482, 485, 489]
        },
        {
          "title": "Accessors",
          "kind": 262144,
          "children": [493]
        },
        {
          "title": "Methods",
          "kind": 2048,
          "children": [505, 507, 499, 517, 509, 511, 513, 515, 495, 502]
        }
      ],
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 98,
          "character": 30
        }
      ],
      "typeParameter": [
        {
          "id": 520,
          "name": "State",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {},
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 519,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                  "line": 98,
                  "character": 54
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 522,
          "name": "InternalState",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {},
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 521,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "sources": [
                {
                  "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                  "line": 98,
                  "character": 80
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "id": 70,
          "name": "CursorPaginator"
        },
        {
          "type": "reference",
          "id": 242,
          "name": "LimitOffsetPaginator"
        },
        {
          "type": "reference",
          "id": 318,
          "name": "PageNumberPaginator"
        }
      ],
      "implementedTypes": [
        {
          "type": "reference",
          "id": 404,
          "typeArguments": [
            {
              "type": "reference",
              "id": 476,
              "name": "State"
            },
            {
              "type": "reference",
              "id": 478,
              "name": "InternalState"
            }
          ],
          "name": "PaginatorInterface"
        }
      ],
      "docFlags": {},
      "tagsByName": {
        "menu-group": "Pagination",
        "extract-docs": ""
      }
    },
    "473": {
      "id": 473,
      "name": "constructor",
      "kind": 512,
      "kindString": "Constructor",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 115,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 474,
          "name": "new Paginator",
          "kind": 16384,
          "kindString": "Constructor signature",
          "flags": {},
          "comment": {
            "tags": [
              {
                "tag": "see",
                "text": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are\n"
              }
            ]
          },
          "typeParameter": [
            {
              "id": 476,
              "name": "State",
              "kind": 131072,
              "kindString": "Type parameter",
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 475,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "docFlags": {},
                  "tagsByName": {}
                }
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 478,
              "name": "InternalState",
              "kind": 131072,
              "kindString": "Type parameter",
              "flags": {},
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 477,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {},
                  "docFlags": {},
                  "tagsByName": {}
                }
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "parameters": [
            {
              "id": 479,
              "name": "currentStatePair",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "type": {
                "type": "literal",
                "value": null
              },
              "defaultValue": "null",
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 480,
              "name": "internalStatePair",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "type": {
                "type": "literal",
                "value": null
              },
              "defaultValue": "null",
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "type": {
            "type": "reference",
            "id": 472,
            "typeArguments": [
              {
                "type": "reference",
                "id": 476,
                "name": "State"
              },
              {
                "type": "reference",
                "id": 478,
                "name": "InternalState"
              }
            ],
            "name": "default"
          },
          "docFlags": {},
          "tagsByName": {
            "see": "documentation for `replaceStateControllers` for what `currentStatePair` and `internalStatePair` are"
          }
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "481": {
      "id": 481,
      "name": "currentState",
      "kind": 1024,
      "kindString": "Property",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 100,
          "character": 4
        }
      ],
      "type": {
        "type": "reference",
        "id": 476,
        "name": "State"
      },
      "implementationOf": {
        "type": "reference",
        "id": 405,
        "name": "PaginatorInterface.currentState"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "482": {
      "id": 482,
      "name": "internalState",
      "kind": 1024,
      "kindString": "Property",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 101,
          "character": 4
        }
      ],
      "type": {
        "type": "intersection",
        "types": [
          {
            "type": "reference",
            "id": 478,
            "name": "InternalState"
          },
          {
            "type": "reflection",
            "declaration": {
              "id": 483,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {},
              "children": [
                {
                  "id": 484,
                  "name": "responseIsSet",
                  "kind": 1024,
                  "kindString": "Property",
                  "flags": {
                    "isOptional": true
                  },
                  "sources": [
                    {
                      "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
                      "line": 101,
                      "character": 37
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "groups": [
                {
                  "title": "Properties",
                  "kind": 1024,
                  "children": [484]
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          }
        ]
      },
      "implementationOf": {
        "type": "reference",
        "id": 406,
        "name": "PaginatorInterface.internalState"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "485": {
      "id": 485,
      "name": "setCurrentState",
      "kind": 1024,
      "kindString": "Property",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 102,
          "character": 4
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 486,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {},
          "signatures": [
            {
              "id": 487,
              "name": "__type",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 488,
                  "name": "set",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 476,
                    "name": "State"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "implementationOf": {
        "type": "reference",
        "id": 407,
        "name": "PaginatorInterface.setCurrentState"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "489": {
      "id": 489,
      "name": "setInternalState",
      "kind": 1024,
      "kindString": "Property",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 103,
          "character": 4
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 490,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {},
          "signatures": [
            {
              "id": 491,
              "name": "__type",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {},
              "parameters": [
                {
                  "id": 492,
                  "name": "set",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {},
                  "type": {
                    "type": "reference",
                    "id": 478,
                    "name": "InternalState"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "implementationOf": {
        "type": "reference",
        "id": 410,
        "name": "PaginatorInterface.setInternalState"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "493": {
      "id": 493,
      "name": "responseIsSet",
      "kind": 262144,
      "kindString": "Accessor",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 108,
          "character": 8
        }
      ],
      "getSignature": [
        {
          "id": 494,
          "name": "responseIsSet",
          "kind": 524288,
          "kindString": "Get signature",
          "flags": {},
          "comment": {
            "shortText": "True once setResponse has been called and pagination state is known.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"True once setResponse has been called and pagination state is known.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          },
          "implementationOf": {
            "type": "reference",
            "id": 413,
            "name": "PaginatorInterface.responseIsSet"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "implementationOf": {
        "type": "reference",
        "id": 413,
        "name": "PaginatorInterface.responseIsSet"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "495": {
      "id": 495,
      "name": "replaceStateControllers",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 151,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 496,
          "name": "replaceStateControllers",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Paginator receives 2 tuples of a state and state setter pair. This is expected to\nmatch the same interface as `useState` in React. The following is a valid simple usage:",
            "text": "```js\nconst paginator = new Paginator(useState(), useState());\n```\n\nNote that we can also pass the state controllers in via `replaceStateControllers` rather\nthan in the constructor. This is so we can memoize the `Paginator` instance which is desirable\nwhen using the paginator as a dependency to React hooks.\n\nAs state is passed in and managed external to the class be aware that any data stored\non the class instance will be lost unless written with `setCurrentState` or `setInternalState`.\nThis design is a compromise between allowing a clear interface for how paginators should\nbe defined and allowing the state to be managed externally (eg. using React state).\n",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Paginator receives 2 tuples of a state and state setter pair. This is expected to\\nmatch the same interface as \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" in React. The following is a valid simple usage:\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
            "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\",\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"const paginator = new Paginator(useState(), useState());\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Note that we can also pass the state controllers in via \", _jsx(_components.code, {\n          children: \"replaceStateControllers\"\n        }), \" rather\\nthan in the constructor. This is so we can memoize the \", _jsx(_components.code, {\n          children: \"Paginator\"\n        }), \" instance which is desirable\\nwhen using the paginator as a dependency to React hooks.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"As state is passed in and managed external to the class be aware that any data stored\\non the class instance will be lost unless written with \", _jsx(_components.code, {\n          children: \"setCurrentState\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"setInternalState\"\n        }), \".\\nThis design is a compromise between allowing a clear interface for how paginators should\\nbe defined and allowing the state to be managed externally (eg. using React state).\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "parameters": [
            {
              "id": 497,
              "name": "currentStatePair",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The state object and setter (eg. from `useState`) that is used to store\nand transition pagination state. Using this you can do things like easily store state in the URL\n(eg. using `useUrlQueryState`) or other data sources.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter (eg. from \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \") that is used to store\\nand transition pagination state. Using this you can do things like easily store state in the URL\\n(eg. using \", _jsx(_components.code, {\n        children: \"useUrlQueryState\"\n      }), \") or other data sources.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "any"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 498,
              "name": "internalStatePair",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The state object and setter that is used for internal state. Internal state\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\nto store things like the total number of results or the current cursor. Passing `useState` here is\nfine.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"The state object and setter that is used for internal state. Internal state\\nis stored separately as it does not need to be restored (eg. if you refresh the page). It is used\\nto store things like the total number of results or the current cursor. Passing \", _jsx(_components.code, {\n        children: \"useState\"\n      }), \" here is\\nfine.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "any"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "void"
          },
          "implementationOf": {
            "type": "reference",
            "id": 435,
            "name": "PaginatorInterface.replaceStateControllers"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "implementationOf": {
        "type": "reference",
        "id": 434,
        "name": "PaginatorInterface.replaceStateControllers"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "499": {
      "id": 499,
      "name": "getRequestInit",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 184,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 500,
          "name": "getRequestInit",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Return the options to use with `Endpoint.execute` or `Endpoint.prepare`. Usually\nthis just involves setting `query` to the query string parameters for the paginator\nbut can also provide custom headers or different URL resolve arguments.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Return the options to use with \", _jsx(_components.code, {\n        children: \"Endpoint.execute\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"Endpoint.prepare\"\n      }), \". Usually\\nthis just involves setting \", _jsx(_components.code, {\n        children: \"query\"\n      }), \" to the query string parameters for the paginator\\nbut can also provide custom headers or different URL resolve arguments.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "parameters": [
            {
              "id": 501,
              "name": "options",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The existing options for the endpoint\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The existing options for the endpoint\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "id": 392,
                "name": "PaginatorRequestOptions"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "type": {
            "type": "reference",
            "id": 392,
            "name": "PaginatorRequestOptions"
          },
          "implementationOf": {
            "type": "reference",
            "id": 429,
            "name": "PaginatorInterface.getRequestInit"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "implementationOf": {
        "type": "reference",
        "id": 428,
        "name": "PaginatorInterface.getRequestInit"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "502": {
      "id": 502,
      "name": "setResponse",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 195,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 503,
          "name": "setResponse",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "This is called when an `Endpoint` has resolved and is passed the response from the\nendpoint. This is used to update the relevant paginator state  - eg. the total\nnumber of records, next & previous cursors etc.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"This is called when an \", _jsx(_components.code, {\n        children: \"Endpoint\"\n      }), \" has resolved and is passed the response from the\\nendpoint. This is used to update the relevant paginator state  - eg. the total\\nnumber of records, next & previous cursors etc.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "parameters": [
            {
              "id": 504,
              "name": "response",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {},
              "comment": {
                "shortText": "The response as returned by the endpoint this paginator is used with.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The response as returned by the endpoint this paginator is used with.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "id": 1273,
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  {
                    "type": "intrinsic",
                    "name": "any"
                  }
                ],
                "qualifiedName": "Record",
                "package": "typescript",
                "name": "Record"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "void"
          },
          "implementationOf": {
            "type": "reference",
            "id": 432,
            "name": "PaginatorInterface.setResponse"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "implementationOf": {
        "type": "reference",
        "id": 431,
        "name": "PaginatorInterface.setResponse"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "505": {
      "id": 505,
      "name": "first",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 202,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 506,
          "name": "first",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Go to the first page.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the first page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "type": {
            "type": "intrinsic",
            "name": "void"
          },
          "implementationOf": {
            "type": "reference",
            "id": 417,
            "name": "PaginatorInterface.first"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "implementationOf": {
        "type": "reference",
        "id": 416,
        "name": "PaginatorInterface.first"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "507": {
      "id": 507,
      "name": "firstState",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 211,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 508,
          "name": "firstState",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Return the state for the first page",
            "text": "Does not transition state. To transition state call `first` instead.\n",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the first page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
            "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"first\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "type": {
            "type": "reference",
            "id": 476,
            "name": "State"
          },
          "implementationOf": {
            "type": "reference",
            "id": 419,
            "name": "PaginatorInterface.firstState"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "implementationOf": {
        "type": "reference",
        "id": 418,
        "name": "PaginatorInterface.firstState"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "509": {
      "id": 509,
      "name": "next",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 218,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 510,
          "name": "next",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Go to the next page.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the next page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "type": {
            "type": "intrinsic",
            "name": "void"
          },
          "implementationOf": {
            "type": "reference",
            "id": 421,
            "name": "PaginatorInterface.next"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "implementationOf": {
        "type": "reference",
        "id": 420,
        "name": "PaginatorInterface.next"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "511": {
      "id": 511,
      "name": "nextState",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 227,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 512,
          "name": "nextState",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Return the state for the next page",
            "text": "Does not transition state. To transition state call `next` instead.\n",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the next page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
            "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"next\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "type": {
            "type": "union",
            "types": [
              {
                "type": "literal",
                "value": null
              },
              {
                "type": "reference",
                "id": 476,
                "name": "State"
              }
            ]
          },
          "implementationOf": {
            "type": "reference",
            "id": 423,
            "name": "PaginatorInterface.nextState"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "implementationOf": {
        "type": "reference",
        "id": 422,
        "name": "PaginatorInterface.nextState"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "513": {
      "id": 513,
      "name": "previous",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 234,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 514,
          "name": "previous",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Go to the previous page.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Go to the previous page.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "type": {
            "type": "intrinsic",
            "name": "void"
          },
          "implementationOf": {
            "type": "reference",
            "id": 425,
            "name": "PaginatorInterface.previous"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "implementationOf": {
        "type": "reference",
        "id": 424,
        "name": "PaginatorInterface.previous"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "515": {
      "id": 515,
      "name": "previousState",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 243,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 516,
          "name": "previousState",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Return the state for the previous page",
            "text": "Does not transition state. To transition state call `previous` instead.\n",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the state for the previous page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
            "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Does not transition state. To transition state call \", _jsx(_components.code, {\n        children: \"previous\"\n      }), \" instead.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "type": {
            "type": "union",
            "types": [
              {
                "type": "literal",
                "value": null
              },
              {
                "type": "reference",
                "id": 476,
                "name": "State"
              }
            ]
          },
          "implementationOf": {
            "type": "reference",
            "id": 427,
            "name": "PaginatorInterface.previousState"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "implementationOf": {
        "type": "reference",
        "id": 426,
        "name": "PaginatorInterface.previousState"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "517": {
      "id": 517,
      "name": "hasNextPage",
      "kind": 2048,
      "kindString": "Method",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/pagination/Paginator.ts",
          "line": 250,
          "character": 4
        }
      ],
      "signatures": [
        {
          "id": 518,
          "name": "hasNextPage",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {},
          "comment": {
            "shortText": "Returns true if there's more results after the current page",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns true if there's more results after the current page\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          },
          "implementationOf": {
            "type": "reference",
            "id": 415,
            "name": "PaginatorInterface.hasNextPage"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "implementationOf": {
        "type": "reference",
        "id": 414,
        "name": "PaginatorInterface.hasNextPage"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1164": {
      "id": 1164,
      "name": "Pick",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "comment": {
        "shortText": "From T, pick a set of properties whose keys are in the union K",
        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"From T, pick a set of properties whose keys are in the union K\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
          "line": 1552,
          "character": 5
        }
      ],
      "typeParameter": [
        {
          "id": 1165,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1166,
          "name": "K",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "type": {
            "type": "typeOperator",
            "operator": "keyof",
            "target": {
              "type": "reference",
              "id": 1165,
              "qualifiedName": "T",
              "package": "typescript",
              "name": "T"
            }
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "type": {
        "type": "mapped",
        "parameter": "P",
        "parameterType": {
          "type": "reference",
          "id": 1166,
          "qualifiedName": "K",
          "package": "typescript",
          "name": "K"
        },
        "templateType": {
          "type": "indexedAccess",
          "indexType": {
            "type": "reference",
            "qualifiedName": "P",
            "package": "typescript",
            "name": "P"
          },
          "objectType": {
            "type": "reference",
            "id": 1165,
            "qualifiedName": "T",
            "package": "typescript",
            "name": "T"
          }
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1273": {
      "id": 1273,
      "name": "Record",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "comment": {
        "shortText": "Construct a type with a set of properties K of type T",
        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Construct a type with a set of properties K of type T\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
          "line": 1559,
          "character": 5
        }
      ],
      "typeParameter": [
        {
          "id": 1274,
          "name": "K",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "type": {
            "type": "typeOperator",
            "operator": "keyof",
            "target": {
              "type": "intrinsic",
              "name": "any"
            }
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1275,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "type": {
        "type": "mapped",
        "parameter": "P",
        "parameterType": {
          "type": "reference",
          "id": 1274,
          "qualifiedName": "K",
          "package": "typescript",
          "name": "K"
        },
        "templateType": {
          "type": "reference",
          "id": 1275,
          "qualifiedName": "T",
          "package": "typescript",
          "name": "T"
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1277": {
      "id": 1277,
      "name": "Omit",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "comment": {
        "shortText": "Construct a type with the properties of T except for those in type K.",
        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Construct a type with the properties of T except for those in type K.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
          "line": 1576,
          "character": 5
        }
      ],
      "typeParameter": [
        {
          "id": 1278,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1279,
          "name": "K",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "type": {
            "type": "typeOperator",
            "operator": "keyof",
            "target": {
              "type": "intrinsic",
              "name": "any"
            }
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "type": {
        "type": "reference",
        "id": 1164,
        "typeArguments": [
          {
            "type": "reference",
            "id": 1278,
            "qualifiedName": "T",
            "package": "typescript",
            "name": "T"
          },
          {
            "type": "reference",
            "id": 1326,
            "typeArguments": [
              {
                "type": "typeOperator",
                "operator": "keyof",
                "target": {
                  "type": "reference",
                  "id": 1278,
                  "qualifiedName": "T",
                  "package": "typescript",
                  "name": "T"
                }
              },
              {
                "type": "reference",
                "id": 1279,
                "qualifiedName": "K",
                "package": "typescript",
                "name": "K"
              }
            ],
            "qualifiedName": "Exclude",
            "package": "typescript",
            "name": "Exclude"
          }
        ],
        "qualifiedName": "Pick",
        "package": "typescript",
        "name": "Pick"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1280": {
      "id": 1280,
      "name": "RequestInit",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1281,
          "name": "body",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "A BodyInit object or null to set request's body.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A BodyInit object or null to set request's body.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "line": 1468,
              "character": 4
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "literal",
                "value": null
              },
              {
                "type": "reference",
                "id": 1342,
                "qualifiedName": "BodyInit",
                "package": "typescript",
                "name": "BodyInit"
              }
            ]
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1282,
          "name": "cache",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "A string indicating how the request will interact with the browser's cache to set request's cache.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A string indicating how the request will interact with the browser's cache to set request's cache.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "line": 1470,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 1343,
            "qualifiedName": "RequestCache",
            "package": "typescript",
            "name": "RequestCache"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1283,
          "name": "credentials",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "line": 1472,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 1344,
            "qualifiedName": "RequestCredentials",
            "package": "typescript",
            "name": "RequestCredentials"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1284,
          "name": "headers",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "A Headers object, an object literal, or an array of two-item arrays to set request's headers.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A Headers object, an object literal, or an array of two-item arrays to set request's headers.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "line": 1474,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 1294,
            "qualifiedName": "HeadersInit",
            "package": "typescript",
            "name": "HeadersInit"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1285,
          "name": "integrity",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "A cryptographic hash of the resource to be fetched by request. Sets request's integrity.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A cryptographic hash of the resource to be fetched by request. Sets request's integrity.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "line": 1476,
              "character": 4
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1286,
          "name": "keepalive",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "A boolean to set request's keepalive.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A boolean to set request's keepalive.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "line": 1478,
              "character": 4
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "boolean"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1287,
          "name": "method",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "A string to set request's method.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A string to set request's method.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "line": 1480,
              "character": 4
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1288,
          "name": "mode",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "line": 1482,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 1345,
            "qualifiedName": "RequestMode",
            "package": "typescript",
            "name": "RequestMode"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1289,
          "name": "redirect",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "line": 1484,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 1346,
            "qualifiedName": "RequestRedirect",
            "package": "typescript",
            "name": "RequestRedirect"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1290,
          "name": "referrer",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "A string whose value is a same-origin URL, \"about:client\", or the empty string, to set request's referrer.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A string whose value is a same-origin URL, \\\"about:client\\\", or the empty string, to set request's referrer.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "line": 1486,
              "character": 4
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1291,
          "name": "referrerPolicy",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "A referrer policy to set request's referrerPolicy.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A referrer policy to set request's referrerPolicy.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "line": 1488,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 1347,
            "qualifiedName": "ReferrerPolicy",
            "package": "typescript",
            "name": "ReferrerPolicy"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1292,
          "name": "signal",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "An AbortSignal to set request's signal.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An AbortSignal to set request's signal.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "line": 1490,
              "character": 4
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "literal",
                "value": null
              },
              {
                "type": "reference",
                "id": 1348,
                "qualifiedName": "AbortSignal",
                "package": "typescript",
                "name": "AbortSignal"
              }
            ]
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1293,
          "name": "window",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "Can only be null. Used to disassociate request from any Window.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Can only be null. Used to disassociate request from any Window.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
              "line": 1492,
              "character": 4
            }
          ],
          "type": {
            "type": "literal",
            "value": null
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 1466,
          "character": 10
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1294": {
      "id": 1294,
      "name": "HeadersInit",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 17622,
          "character": 5
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "array",
            "elementType": {
              "type": "array",
              "elementType": {
                "type": "intrinsic",
                "name": "string"
              }
            }
          },
          {
            "type": "reference",
            "id": 1273,
            "typeArguments": [
              {
                "type": "intrinsic",
                "name": "string"
              },
              {
                "type": "intrinsic",
                "name": "string"
              }
            ],
            "qualifiedName": "Record",
            "package": "typescript",
            "name": "Record"
          },
          {
            "type": "reference",
            "qualifiedName": "Headers",
            "package": "typescript",
            "name": "Headers"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1295": {
      "id": 1295,
      "name": "Response",
      "kind": 32,
      "kindString": "Variable",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 11146,
          "character": 12
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 1296,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {
            "isExternal": true
          },
          "children": [
            {
              "id": 1297,
              "name": "prototype",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
                  "line": 11147,
                  "character": 4
                }
              ],
              "type": {
                "type": "reference",
                "id": 1295,
                "qualifiedName": "Response",
                "package": "typescript",
                "name": "Response"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 1298,
              "name": "error",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 1299,
                  "name": "error",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1295,
                    "qualifiedName": "Response",
                    "package": "typescript",
                    "name": "Response"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 1300,
              "name": "redirect",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 1301,
                  "name": "redirect",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExternal": true
                  },
                  "parameters": [
                    {
                      "id": 1302,
                      "name": "url",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExternal": true
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "intrinsic",
                            "name": "string"
                          },
                          {
                            "type": "reference",
                            "id": 1426,
                            "qualifiedName": "URL",
                            "package": "typescript",
                            "name": "URL"
                          }
                        ]
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    },
                    {
                      "id": 1303,
                      "name": "status",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExternal": true,
                        "isOptional": true
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 1295,
                    "qualifiedName": "Response",
                    "package": "typescript",
                    "name": "Response"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [1297]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [1298, 1300]
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1326": {
      "id": 1326,
      "name": "Exclude",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "comment": {
        "shortText": "Exclude from T those types that are assignable to U",
        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Exclude from T those types that are assignable to U\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
          "line": 1566,
          "character": 5
        }
      ],
      "typeParameter": [
        {
          "id": 1327,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1328,
          "name": "U",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "type": {
        "type": "conditional",
        "checkType": {
          "type": "reference",
          "id": 1327,
          "qualifiedName": "T",
          "package": "typescript",
          "name": "T"
        },
        "extendsType": {
          "type": "reference",
          "id": 1328,
          "qualifiedName": "U",
          "package": "typescript",
          "name": "U"
        },
        "trueType": {
          "type": "intrinsic",
          "name": "never"
        },
        "falseType": {
          "type": "reference",
          "id": 1327,
          "qualifiedName": "T",
          "package": "typescript",
          "name": "T"
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1342": {
      "id": 1342,
      "name": "BodyInit",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 17590,
          "character": 5
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "reference",
            "id": 1387,
            "qualifiedName": "ReadableStream",
            "package": "typescript",
            "name": "ReadableStream"
          },
          {
            "type": "reference",
            "id": 1452,
            "qualifiedName": "XMLHttpRequestBodyInit",
            "package": "typescript",
            "name": "XMLHttpRequestBodyInit"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1343": {
      "id": 1343,
      "name": "RequestCache",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 17762,
          "character": 5
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "literal",
            "value": "default"
          },
          {
            "type": "literal",
            "value": "force-cache"
          },
          {
            "type": "literal",
            "value": "no-cache"
          },
          {
            "type": "literal",
            "value": "no-store"
          },
          {
            "type": "literal",
            "value": "only-if-cached"
          },
          {
            "type": "literal",
            "value": "reload"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1344": {
      "id": 1344,
      "name": "RequestCredentials",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 17763,
          "character": 5
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "literal",
            "value": "include"
          },
          {
            "type": "literal",
            "value": "omit"
          },
          {
            "type": "literal",
            "value": "same-origin"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1345": {
      "id": 1345,
      "name": "RequestMode",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 17765,
          "character": 5
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "literal",
            "value": "cors"
          },
          {
            "type": "literal",
            "value": "navigate"
          },
          {
            "type": "literal",
            "value": "no-cors"
          },
          {
            "type": "literal",
            "value": "same-origin"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1346": {
      "id": 1346,
      "name": "RequestRedirect",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 17766,
          "character": 5
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "literal",
            "value": "error"
          },
          {
            "type": "literal",
            "value": "follow"
          },
          {
            "type": "literal",
            "value": "manual"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1347": {
      "id": 1347,
      "name": "ReferrerPolicy",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 17760,
          "character": 5
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "literal",
            "value": ""
          },
          {
            "type": "literal",
            "value": "no-referrer"
          },
          {
            "type": "literal",
            "value": "no-referrer-when-downgrade"
          },
          {
            "type": "literal",
            "value": "origin"
          },
          {
            "type": "literal",
            "value": "origin-when-cross-origin"
          },
          {
            "type": "literal",
            "value": "same-origin"
          },
          {
            "type": "literal",
            "value": "strict-origin"
          },
          {
            "type": "literal",
            "value": "strict-origin-when-cross-origin"
          },
          {
            "type": "literal",
            "value": "unsafe-url"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1348": {
      "id": 1348,
      "name": "AbortSignal",
      "kind": 32,
      "kindString": "Variable",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 1893,
          "character": 12
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 1349,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {
            "isExternal": true
          },
          "children": [
            {
              "id": 1350,
              "name": "prototype",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
                  "line": 1894,
                  "character": 4
                }
              ],
              "type": {
                "type": "reference",
                "id": 1348,
                "qualifiedName": "AbortSignal",
                "package": "typescript",
                "name": "AbortSignal"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [1350]
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1387": {
      "id": 1387,
      "name": "ReadableStream",
      "kind": 32,
      "kindString": "Variable",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 11008,
          "character": 12
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 1388,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {
            "isExternal": true
          },
          "children": [
            {
              "id": 1389,
              "name": "prototype",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
                  "line": 11009,
                  "character": 4
                }
              ],
              "type": {
                "type": "reference",
                "id": 1387,
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "any"
                  }
                ],
                "qualifiedName": "ReadableStream",
                "package": "typescript",
                "name": "ReadableStream"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [1389]
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1409": {
      "id": 1409,
      "name": "Blob",
      "kind": 32,
      "kindString": "Variable",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 2386,
          "character": 12
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 1410,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {
            "isExternal": true
          },
          "children": [
            {
              "id": 1411,
              "name": "prototype",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
                  "line": 2387,
                  "character": 4
                }
              ],
              "type": {
                "type": "reference",
                "id": 1409,
                "qualifiedName": "Blob",
                "package": "typescript",
                "name": "Blob"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [1411]
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1426": {
      "id": 1426,
      "name": "URL",
      "kind": 32,
      "kindString": "Variable",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 13865,
          "character": 12
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 1427,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {
            "isExternal": true
          },
          "children": [
            {
              "id": 1428,
              "name": "prototype",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
                  "line": 13866,
                  "character": 4
                }
              ],
              "type": {
                "type": "reference",
                "id": 1426,
                "qualifiedName": "URL",
                "package": "typescript",
                "name": "URL"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 1429,
              "name": "createObjectURL",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 1430,
                  "name": "createObjectURL",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExternal": true
                  },
                  "parameters": [
                    {
                      "id": 1431,
                      "name": "obj",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExternal": true
                      },
                      "type": {
                        "type": "union",
                        "types": [
                          {
                            "type": "reference",
                            "id": 1409,
                            "qualifiedName": "Blob",
                            "package": "typescript",
                            "name": "Blob"
                          },
                          {
                            "type": "reference",
                            "id": 1497,
                            "qualifiedName": "MediaSource",
                            "package": "typescript",
                            "name": "MediaSource"
                          }
                        ]
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 1432,
              "name": "revokeObjectURL",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 1433,
                  "name": "revokeObjectURL",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExternal": true
                  },
                  "parameters": [
                    {
                      "id": 1434,
                      "name": "url",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExternal": true
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "void"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [1428]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [1429, 1432]
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1452": {
      "id": 1452,
      "name": "XMLHttpRequestBodyInit",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 17648,
          "character": 5
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "reference",
            "id": 1409,
            "qualifiedName": "Blob",
            "package": "typescript",
            "name": "Blob"
          },
          {
            "type": "reference",
            "id": 1566,
            "qualifiedName": "BufferSource",
            "package": "typescript",
            "name": "BufferSource"
          },
          {
            "type": "reference",
            "qualifiedName": "FormData",
            "package": "typescript",
            "name": "FormData"
          },
          {
            "type": "reference",
            "qualifiedName": "URLSearchParams",
            "package": "typescript",
            "name": "URLSearchParams"
          },
          {
            "type": "intrinsic",
            "name": "string"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1497": {
      "id": 1497,
      "name": "MediaSource",
      "kind": 32,
      "kindString": "Variable",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 9197,
          "character": 12
        }
      ],
      "type": {
        "type": "reflection",
        "declaration": {
          "id": 1498,
          "name": "__type",
          "kind": 65536,
          "kindString": "Type literal",
          "flags": {
            "isExternal": true
          },
          "children": [
            {
              "id": 1499,
              "name": "prototype",
              "kind": 1024,
              "kindString": "Property",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
                  "line": 9198,
                  "character": 4
                }
              ],
              "type": {
                "type": "reference",
                "id": 1497,
                "qualifiedName": "MediaSource",
                "package": "typescript",
                "name": "MediaSource"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 1500,
              "name": "isTypeSupported",
              "kind": 2048,
              "kindString": "Method",
              "flags": {
                "isExternal": true
              },
              "signatures": [
                {
                  "id": 1501,
                  "name": "isTypeSupported",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExternal": true
                  },
                  "parameters": [
                    {
                      "id": 1502,
                      "name": "type",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExternal": true
                      },
                      "type": {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "groups": [
            {
              "title": "Properties",
              "kind": 1024,
              "children": [1499]
            },
            {
              "title": "Methods",
              "kind": 2048,
              "children": [1500]
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1566": {
      "id": 1566,
      "name": "BufferSource",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.dom.d.ts",
          "line": 17591,
          "character": 5
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "reference",
            "id": 1669,
            "qualifiedName": "ArrayBufferView",
            "package": "typescript",
            "name": "ArrayBufferView"
          },
          {
            "type": "reference",
            "qualifiedName": "ArrayBuffer",
            "package": "typescript",
            "name": "ArrayBuffer"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1669": {
      "id": 1669,
      "name": "ArrayBufferView",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1670,
          "name": "buffer",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "comment": {
            "shortText": "The ArrayBuffer instance referenced by the array.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The ArrayBuffer instance referenced by the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "line": 1665,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 1698,
            "qualifiedName": "ArrayBufferLike",
            "package": "typescript",
            "name": "ArrayBufferLike"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1671,
          "name": "byteLength",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "comment": {
            "shortText": "The length in bytes of the array.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The length in bytes of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "line": 1670,
              "character": 4
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1672,
          "name": "byteOffset",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "comment": {
            "shortText": "The offset in bytes of the array.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The offset in bytes of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "line": 1675,
              "character": 4
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [1670, 1671, 1672]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
          "line": 1661,
          "character": 10
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1698": {
      "id": 1698,
      "name": "ArrayBufferLike",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
          "line": 1652,
          "character": 5
        }
      ],
      "type": {
        "type": "indexedAccess",
        "indexType": {
          "type": "typeOperator",
          "operator": "keyof",
          "target": {
            "type": "reference",
            "qualifiedName": "ArrayBufferTypes",
            "package": "typescript",
            "name": "ArrayBufferTypes"
          }
        },
        "objectType": {
          "type": "reference",
          "qualifiedName": "ArrayBufferTypes",
          "package": "typescript",
          "name": "ArrayBufferTypes"
        }
      },
      "docFlags": {},
      "tagsByName": {}
    }
  },
  "meta": {
    "packageName": "util",
    "permaLink": "util/pagination/CursorPaginator",
    "menuGroup": "Pagination"
  }
}
