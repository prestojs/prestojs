{
  "node": {
    "id": 20,
    "name": "NodeLabeled",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "comment": {
      "shortText": "Interface for items that provide a React node label (anything that React can render). Implementing this can save you having to pass\nexplicit functions to label an item in other parts of the system (eg. for [AsyncChoices](doc:AsyncChoices))",
      "text": "See [isNodeLabeled](doc:isNodeLabeled) and [getNodeLabel](doc:getNodeLabel).\n",
      "tags": [
        {
          "tag": "extract-docs",
          "text": ""
        },
        {
          "tag": "menu-group",
          "text": "Labeled\n"
        }
      ],
      "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Interface for items that provide a React node label (anything that React can render). Implementing this can save you having to pass\\nexplicit functions to label an item in other parts of the system (eg. for \", _jsx(_components.a, {\n        href: \"doc:AsyncChoices\",\n        children: \"AsyncChoices\"\n      }), \")\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
      "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:isNodeLabeled\",\n        children: \"isNodeLabeled\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"doc:getNodeLabel\",\n        children: \"getNodeLabel\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
    },
    "children": [
      {
        "id": 21,
        "name": "getNodeLabel",
        "kind": 2048,
        "kindString": "Method",
        "flags": {},
        "signatures": [
          {
            "id": 22,
            "name": "getNodeLabel",
            "kind": 4096,
            "kindString": "Call signature",
            "flags": {},
            "comment": {
              "shortText": "Return the node label for this item. This can be anything renderable by React.",
              "text": "See [isNodeLabeled](doc:isNodeLabeled) to test for support and [getNodeLabel](doc:getNodeLabel) for easiest way\nto get the label.\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Return the node label for this item. This can be anything renderable by React.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
              "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"doc:isNodeLabeled\",\n        children: \"isNodeLabeled\"\n      }), \" to test for support and \", _jsx(_components.a, {\n        href: \"doc:getNodeLabel\",\n        children: \"getNodeLabel\"\n      }), \" for easiest way\\nto get the label.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "reference",
              "id": 717,
              "qualifiedName": "React.ReactNode",
              "package": "@types/react",
              "name": "ReactNode"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "docFlags": {},
        "tagsByName": {}
      }
    ],
    "groups": [
      {
        "title": "Methods",
        "kind": 2048,
        "children": [21]
      }
    ],
    "sources": [
      {
        "fileName": "js-packages/@prestojs/util/src/Labeled.ts",
        "line": 29,
        "character": 17
      }
    ],
    "docFlags": {},
    "tagsByName": {
      "extract-docs": "",
      "menu-group": "Labeled"
    }
  },
  "references": {
    "564": {
      "id": 564,
      "name": "InvalidTimeError",
      "kind": 128,
      "kindString": "Class",
      "flags": {},
      "children": [
        {
          "id": 574,
          "name": "constructor",
          "kind": 512,
          "kindString": "Constructor",
          "flags": {},
          "signatures": [
            {
              "id": 575,
              "name": "new InvalidTimeError",
              "kind": 16384,
              "kindString": "Constructor signature",
              "flags": {},
              "parameters": [
                {
                  "id": 576,
                  "name": "message",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isOptional": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 564,
                "name": "InvalidTimeError"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Error.constructor"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Error.constructor"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 578,
          "name": "message",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "line": 1023,
              "character": 4
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "Error.message"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 577,
          "name": "name",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "line": 1022,
              "character": 4
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "Error.name"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 579,
          "name": "stack",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "line": 1024,
              "character": 4
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "Error.stack"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 573,
          "name": "stackTraceLimit",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isStatic": true,
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/node/globals.d.ts",
              "line": 117,
              "character": 4
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "Error.stackTraceLimit"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 565,
          "name": "captureStackTrace",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isStatic": true,
            "isExternal": true
          },
          "signatures": [
            {
              "id": 566,
              "name": "captureStackTrace",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Create .stack property on a target object",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Create .stack property on a target object\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 567,
                  "name": "targetObject",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "object"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 568,
                  "name": "constructorOpt",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "reference",
                    "qualifiedName": "Function",
                    "package": "typescript",
                    "name": "Function"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Error.captureStackTrace"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Error.captureStackTrace"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 569,
          "name": "prepareStackTrace",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isStatic": true,
            "isExternal": true,
            "isOptional": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/node/globals.d.ts",
              "line": 115,
              "character": 4
            }
          ],
          "signatures": [
            {
              "id": 570,
              "name": "prepareStackTrace",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Optional override for formatting stack traces",
                "tags": [
                  {
                    "tag": "see",
                    "text": "https://github.com/v8/v8/wiki/Stack%20Trace%20API#customizing-stack-traces\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Optional override for formatting stack traces\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 571,
                  "name": "err",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1168,
                    "qualifiedName": "Error",
                    "package": "typescript",
                    "name": "Error"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 572,
                  "name": "stackTraces",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "id": 1713,
                      "qualifiedName": "NodeJS.CallSite",
                      "package": "@types/node",
                      "name": "CallSite"
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "any"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Error.prepareStackTrace"
              },
              "docFlags": {},
              "tagsByName": {
                "see": "https://github.com/v8/v8/wiki/Stack%20Trace%20API#customizing-stack-traces"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Error.prepareStackTrace"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Constructors",
          "kind": 512,
          "children": [574]
        },
        {
          "title": "Properties",
          "kind": 1024,
          "children": [578, 577, 579, 573]
        },
        {
          "title": "Methods",
          "kind": 2048,
          "children": [565, 569]
        }
      ],
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/time.ts",
          "line": 17,
          "character": 13
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "id": 1168,
          "qualifiedName": "Error",
          "package": "typescript",
          "name": "Error"
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "717": {
      "id": 717,
      "name": "ReactNode",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 241,
          "character": 9
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "reference",
            "id": 718,
            "qualifiedName": "React.ReactChild",
            "package": "@types/react",
            "name": "ReactChild"
          },
          {
            "type": "reference",
            "id": 719,
            "qualifiedName": "React.ReactFragment",
            "package": "@types/react",
            "name": "ReactFragment"
          },
          {
            "type": "reference",
            "id": 721,
            "qualifiedName": "React.ReactPortal",
            "package": "@types/react",
            "name": "ReactPortal"
          },
          {
            "type": "intrinsic",
            "name": "boolean"
          },
          {
            "type": "literal",
            "value": null
          },
          {
            "type": "intrinsic",
            "name": "undefined"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "718": {
      "id": 718,
      "name": "ReactChild",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 237,
          "character": 9
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "reference",
            "id": 726,
            "qualifiedName": "React.ReactElement",
            "package": "@types/react",
            "name": "ReactElement"
          },
          {
            "type": "reference",
            "id": 732,
            "qualifiedName": "React.ReactText",
            "package": "@types/react",
            "name": "ReactText"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "719": {
      "id": 719,
      "name": "ReactFragment",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 240,
          "character": 9
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "reflection",
            "declaration": {
              "id": 720,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "node_modules/@types/react/index.d.ts",
                  "line": 240,
                  "character": 25
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          {
            "type": "reference",
            "id": 733,
            "qualifiedName": "React.ReactNodeArray",
            "package": "@types/react",
            "name": "ReactNodeArray"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "721": {
      "id": 721,
      "name": "ReactPortal",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 723,
          "name": "children",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 195,
              "character": 8
            }
          ],
          "type": {
            "type": "reference",
            "id": 717,
            "qualifiedName": "React.ReactNode",
            "package": "@types/react",
            "name": "ReactNode"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 722,
          "name": "key",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 194,
              "character": 8
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "literal",
                "value": null
              },
              {
                "type": "reference",
                "id": 965,
                "qualifiedName": "React.Key",
                "package": "@types/react",
                "name": "Key"
              }
            ]
          },
          "overwrites": {
            "type": "reference",
            "id": 729,
            "name": "ReactElement.key"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 725,
          "name": "props",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 150,
              "character": 8
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "any"
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 728,
            "name": "ReactElement.props"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 724,
          "name": "type",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 149,
              "character": 8
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "intrinsic",
                "name": "string"
              },
              {
                "type": "reference",
                "id": 966,
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "any"
                  }
                ],
                "qualifiedName": "React.JSXElementConstructor",
                "package": "@types/react",
                "name": "JSXElementConstructor"
              }
            ]
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 727,
            "name": "ReactElement.type"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [723, 722, 725, 724]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 193,
          "character": 14
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "id": 726,
          "qualifiedName": "React.ReactElement",
          "package": "@types/react",
          "name": "ReactElement"
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "726": {
      "id": 726,
      "name": "ReactElement",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 729,
          "name": "key",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 151,
              "character": 8
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "literal",
                "value": null
              },
              {
                "type": "reference",
                "id": 965,
                "qualifiedName": "React.Key",
                "package": "@types/react",
                "name": "Key"
              }
            ]
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 728,
          "name": "props",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 150,
              "character": 8
            }
          ],
          "type": {
            "type": "reference",
            "id": 730,
            "qualifiedName": "React.ReactElement.P",
            "package": "@types/react",
            "name": "P"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 727,
          "name": "type",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 149,
              "character": 8
            }
          ],
          "type": {
            "type": "reference",
            "id": 731,
            "qualifiedName": "React.ReactElement.T",
            "package": "@types/react",
            "name": "T"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [729, 728, 727]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 148,
          "character": 14
        }
      ],
      "typeParameter": [
        {
          "id": 730,
          "name": "P",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "default": {
            "type": "intrinsic",
            "name": "any"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 731,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "type": {
            "type": "union",
            "types": [
              {
                "type": "intrinsic",
                "name": "string"
              },
              {
                "type": "reference",
                "id": 966,
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "any"
                  }
                ],
                "qualifiedName": "React.JSXElementConstructor",
                "package": "@types/react",
                "name": "JSXElementConstructor"
              }
            ]
          },
          "default": {
            "type": "union",
            "types": [
              {
                "type": "intrinsic",
                "name": "string"
              },
              {
                "type": "reference",
                "id": 966,
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "any"
                  }
                ],
                "qualifiedName": "React.JSXElementConstructor",
                "package": "@types/react",
                "name": "JSXElementConstructor"
              }
            ]
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "id": 721,
          "name": "ReactPortal"
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "727": {
      "id": 727,
      "name": "type",
      "kind": 1024,
      "kindString": "Property",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 149,
          "character": 8
        }
      ],
      "type": {
        "type": "reference",
        "id": 731,
        "qualifiedName": "React.ReactElement.T",
        "package": "@types/react",
        "name": "T"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "728": {
      "id": 728,
      "name": "props",
      "kind": 1024,
      "kindString": "Property",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 150,
          "character": 8
        }
      ],
      "type": {
        "type": "reference",
        "id": 730,
        "qualifiedName": "React.ReactElement.P",
        "package": "@types/react",
        "name": "P"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "729": {
      "id": 729,
      "name": "key",
      "kind": 1024,
      "kindString": "Property",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 151,
          "character": 8
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "literal",
            "value": null
          },
          {
            "type": "reference",
            "id": 965,
            "qualifiedName": "React.Key",
            "package": "@types/react",
            "name": "Key"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "732": {
      "id": 732,
      "name": "ReactText",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 236,
          "character": 9
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "intrinsic",
            "name": "string"
          },
          {
            "type": "intrinsic",
            "name": "number"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "733": {
      "id": 733,
      "name": "ReactNodeArray",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 734,
          "name": "length",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "comment": {
            "shortText": "Gets or sets the length of the array. This is a number one higher than the highest index in the array.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Gets or sets the length of the array. This is a number one higher than the highest index in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "line": 1273,
              "character": 4
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          },
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.length"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 953,
          "name": "[iterator]",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 954,
              "name": "[iterator]",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Iterator",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Iterator\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "id": 974,
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 717,
                    "qualifiedName": "React.ReactNode",
                    "package": "@types/react",
                    "name": "ReactNode"
                  }
                ],
                "qualifiedName": "IterableIterator",
                "package": "typescript",
                "name": "IterableIterator"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.__@iterator@79"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.__@iterator@79"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 955,
          "name": "[unscopables]",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 956,
              "name": "[unscopables]",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns an object whose properties have the value 'true'\\nwhen they will be absent when used in a 'with' statement.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 957,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExternal": true
                  },
                  "children": [
                    {
                      "id": 958,
                      "name": "copyWithin",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {
                        "isExternal": true
                      },
                      "sources": [
                        {
                          "fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                          "line": 100,
                          "character": 8
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    },
                    {
                      "id": 959,
                      "name": "entries",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {
                        "isExternal": true
                      },
                      "sources": [
                        {
                          "fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                          "line": 101,
                          "character": 8
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    },
                    {
                      "id": 960,
                      "name": "fill",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {
                        "isExternal": true
                      },
                      "sources": [
                        {
                          "fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                          "line": 102,
                          "character": 8
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    },
                    {
                      "id": 961,
                      "name": "find",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {
                        "isExternal": true
                      },
                      "sources": [
                        {
                          "fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                          "line": 103,
                          "character": 8
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    },
                    {
                      "id": 962,
                      "name": "findIndex",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {
                        "isExternal": true
                      },
                      "sources": [
                        {
                          "fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                          "line": 104,
                          "character": 8
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    },
                    {
                      "id": 963,
                      "name": "keys",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {
                        "isExternal": true
                      },
                      "sources": [
                        {
                          "fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                          "line": 105,
                          "character": 8
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    },
                    {
                      "id": 964,
                      "name": "values",
                      "kind": 1024,
                      "kindString": "Property",
                      "flags": {
                        "isExternal": true
                      },
                      "sources": [
                        {
                          "fileName": "node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts",
                          "line": 106,
                          "character": 8
                        }
                      ],
                      "type": {
                        "type": "intrinsic",
                        "name": "boolean"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "groups": [
                    {
                      "title": "Properties",
                      "kind": 1024,
                      "children": [958, 959, 960, 961, 962, 963, 964]
                    }
                  ],
                  "docFlags": {},
                  "tagsByName": {}
                }
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.__@unscopables@103"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.__@unscopables@103"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 744,
          "name": "concat",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 745,
              "name": "concat",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Combines two or more arrays.\\nThis method returns a new array without modifying any existing arrays.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 746,
                  "name": "items",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isRest": true
                  },
                  "comment": {
                    "shortText": "Additional arrays and/or items to add to the end of the array.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Additional arrays and/or items to add to the end of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "id": 1081,
                      "typeArguments": [
                        {
                          "type": "reference",
                          "id": 717,
                          "qualifiedName": "React.ReactNode",
                          "package": "@types/react",
                          "name": "ReactNode"
                        }
                      ],
                      "qualifiedName": "ConcatArray",
                      "package": "typescript",
                      "name": "ConcatArray"
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.concat"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 747,
              "name": "concat",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Combines two or more arrays.\\nThis method returns a new array without modifying any existing arrays.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 748,
                  "name": "items",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isRest": true
                  },
                  "comment": {
                    "shortText": "Additional arrays and/or items to add to the end of the array.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Additional arrays and/or items to add to the end of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "union",
                      "types": [
                        {
                          "type": "reference",
                          "id": 717,
                          "qualifiedName": "React.ReactNode",
                          "package": "@types/react",
                          "name": "ReactNode"
                        },
                        {
                          "type": "reference",
                          "id": 1081,
                          "typeArguments": [
                            {
                              "type": "reference",
                              "id": 717,
                              "qualifiedName": "React.ReactNode",
                              "package": "@types/react",
                              "name": "ReactNode"
                            }
                          ],
                          "qualifiedName": "ConcatArray",
                          "package": "typescript",
                          "name": "ConcatArray"
                        }
                      ]
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.concat"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.concat"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 938,
          "name": "copyWithin",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 939,
              "name": "copyWithin",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns the this object after copying a section of the array identified by start and end\\nto the same array starting at position target\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 940,
                  "name": "target",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "If target is negative, it is treated as length+target where length is the\nlength of the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If target is negative, it is treated as length+target where length is the\\nlength of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 941,
                  "name": "start",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "If start is negative, it is treated as length+start. If end is negative, it\nis treated as length+end.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If start is negative, it is treated as length+start. If end is negative, it\\nis treated as length+end.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 942,
                  "name": "end",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "If not specified, length of the this object is used as its default value.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If not specified, length of the this object is used as its default value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 733,
                "qualifiedName": "React.ReactNodeArray",
                "package": "@types/react",
                "name": "ReactNodeArray"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.copyWithin"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.copyWithin"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 943,
          "name": "entries",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 944,
              "name": "entries",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns an iterable of key, value pairs for every entry in the array",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns an iterable of key, value pairs for every entry in the array\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "id": 974,
                "typeArguments": [
                  {
                    "type": "tuple",
                    "elements": [
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "reference",
                        "id": 717,
                        "qualifiedName": "React.ReactNode",
                        "package": "@types/react",
                        "name": "ReactNode"
                      }
                    ]
                  }
                ],
                "qualifiedName": "IterableIterator",
                "package": "typescript",
                "name": "IterableIterator"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.entries"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.entries"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 786,
          "name": "every",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 787,
              "name": "every",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Determines whether all the members of an array satisfy the specified test.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Determines whether all the members of an array satisfy the specified test.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "typeParameter": [
                {
                  "id": 788,
                  "name": "S",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 717,
                    "qualifiedName": "React.ReactNode",
                    "package": "@types/react",
                    "name": "ReactNode"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "parameters": [
                {
                  "id": 789,
                  "name": "predicate",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to three arguments. The every method calls\\nthe predicate function for each element in the array until the predicate returns a value\\nwhich is coercible to the Boolean value false, or until the end of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 790,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 791,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 792,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 793,
                              "name": "index",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 794,
                              "name": "array",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "predicate",
                            "name": "value",
                            "asserts": false,
                            "targetType": {
                              "type": "reference",
                              "id": 788,
                              "qualifiedName": "S",
                              "package": "typescript",
                              "name": "S"
                            }
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 795,
                  "name": "thisArg",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An object to which the this keyword can refer in the predicate function.\\nIf thisArg is omitted, undefined is used as the this value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "predicate",
                "name": "this",
                "asserts": false,
                "targetType": {
                  "type": "array",
                  "elementType": {
                    "type": "reference",
                    "id": 788,
                    "qualifiedName": "S",
                    "package": "typescript",
                    "name": "S"
                  }
                }
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.every"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 796,
              "name": "every",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Determines whether all the members of an array satisfy the specified test.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Determines whether all the members of an array satisfy the specified test.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 797,
                  "name": "predicate",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "A function that accepts up to three arguments. The every method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value false, or until the end of the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to three arguments. The every method calls\\nthe predicate function for each element in the array until the predicate returns a value\\nwhich is coercible to the Boolean value false, or until the end of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 798,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 799,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 800,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 801,
                              "name": "index",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 802,
                              "name": "array",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "unknown"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 803,
                  "name": "thisArg",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An object to which the this keyword can refer in the predicate function.\\nIf thisArg is omitted, undefined is used as the this value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.every"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.every"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 933,
          "name": "fill",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 934,
              "name": "fill",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Changes all array elements from \", _jsx(_components.code, {\n        children: \"start\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"end\"\n      }), \" index to a static \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" and returns the modified array\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 935,
                  "name": "value",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "value to fill array section with",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"value to fill array section with\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 717,
                    "qualifiedName": "React.ReactNode",
                    "package": "@types/react",
                    "name": "ReactNode"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 936,
                  "name": "start",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "index to start filling the array at. If start is negative, it is treated as\nlength+start where length is the length of the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"index to start filling the array at. If start is negative, it is treated as\\nlength+start where length is the length of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 937,
                  "name": "end",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "index to stop filling the array at. If end is negative, it is treated as\nlength+end.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"index to stop filling the array at. If end is negative, it is treated as\\nlength+end.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 733,
                "qualifiedName": "React.ReactNodeArray",
                "package": "@types/react",
                "name": "ReactNodeArray"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.fill"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.fill"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 832,
          "name": "filter",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 833,
              "name": "filter",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns the elements of an array that meet the condition specified in a callback function.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns the elements of an array that meet the condition specified in a callback function.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "typeParameter": [
                {
                  "id": 834,
                  "name": "S",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 717,
                    "qualifiedName": "React.ReactNode",
                    "package": "@types/react",
                    "name": "ReactNode"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "parameters": [
                {
                  "id": 835,
                  "name": "predicate",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 836,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 837,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 838,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 839,
                              "name": "index",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 840,
                              "name": "array",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "predicate",
                            "name": "value",
                            "asserts": false,
                            "targetType": {
                              "type": "reference",
                              "id": 834,
                              "qualifiedName": "S",
                              "package": "typescript",
                              "name": "S"
                            }
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 841,
                  "name": "thisArg",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "id": 834,
                  "qualifiedName": "S",
                  "package": "typescript",
                  "name": "S"
                }
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.filter"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 842,
              "name": "filter",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns the elements of an array that meet the condition specified in a callback function.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns the elements of an array that meet the condition specified in a callback function.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 843,
                  "name": "predicate",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 844,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 845,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 846,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 847,
                              "name": "index",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 848,
                              "name": "array",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "unknown"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 849,
                  "name": "thisArg",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.filter"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.filter"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 906,
          "name": "find",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 907,
              "name": "find",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns the value of the first element in the array where predicate is true, and undefined\\notherwise.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "typeParameter": [
                {
                  "id": 908,
                  "name": "S",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 717,
                    "qualifiedName": "React.ReactNode",
                    "package": "@types/react",
                    "name": "ReactNode"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "parameters": [
                {
                  "id": 909,
                  "name": "predicate",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found, find\nimmediately returns that element value. Otherwise, find returns undefined.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"find calls predicate once for each element of the array, in ascending\\norder, until it finds one where predicate returns true. If such an element is found, find\\nimmediately returns that element value. Otherwise, find returns undefined.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 910,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 911,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 912,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 913,
                              "name": "index",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 914,
                              "name": "obj",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "predicate",
                            "name": "value",
                            "asserts": false,
                            "targetType": {
                              "type": "reference",
                              "id": 908,
                              "qualifiedName": "S",
                              "package": "typescript",
                              "name": "S"
                            }
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 915,
                  "name": "thisArg",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If provided, it will be used as the this value for each invocation of\\npredicate. If it is not provided, undefined is used instead.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "undefined"
                  },
                  {
                    "type": "reference",
                    "id": 908,
                    "qualifiedName": "S",
                    "package": "typescript",
                    "name": "S"
                  }
                ]
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.find"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 916,
              "name": "find",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "parameters": [
                {
                  "id": 917,
                  "name": "predicate",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 918,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 919,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 920,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 921,
                              "name": "index",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 922,
                              "name": "obj",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "unknown"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 923,
                  "name": "thisArg",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.find"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.find"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 924,
          "name": "findIndex",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 925,
              "name": "findIndex",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns the index of the first element in the array where predicate is true, and -1\notherwise.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns the index of the first element in the array where predicate is true, and -1\\notherwise.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 926,
                  "name": "predicate",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "find calls predicate once for each element of the array, in ascending\norder, until it finds one where predicate returns true. If such an element is found,\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"find calls predicate once for each element of the array, in ascending\\norder, until it finds one where predicate returns true. If such an element is found,\\nfindIndex immediately returns that element index. Otherwise, findIndex returns -1.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 927,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 928,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 929,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 930,
                              "name": "index",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 931,
                              "name": "obj",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "unknown"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 932,
                  "name": "thisArg",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "If provided, it will be used as the this value for each invocation of\npredicate. If it is not provided, undefined is used instead.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If provided, it will be used as the this value for each invocation of\\npredicate. If it is not provided, undefined is used instead.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.findIndex"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.findIndex"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 813,
          "name": "forEach",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 814,
              "name": "forEach",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Performs the specified action for each element in an array.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Performs the specified action for each element in an array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 815,
                  "name": "callbackfn",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 816,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 817,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 818,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 819,
                              "name": "index",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 820,
                              "name": "array",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "void"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 821,
                  "name": "thisArg",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.forEach"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.forEach"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 949,
          "name": "includes",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 950,
              "name": "includes",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Determines whether an array includes a certain element, returning true or false as appropriate.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Determines whether an array includes a certain element, returning true or false as appropriate.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 951,
                  "name": "searchElement",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "The element to search for.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The element to search for.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 717,
                    "qualifiedName": "React.ReactNode",
                    "package": "@types/react",
                    "name": "ReactNode"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 952,
                  "name": "fromIndex",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "The position in this array at which to begin searching for searchElement.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The position in this array at which to begin searching for searchElement.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.includes"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.includes"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 778,
          "name": "indexOf",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 779,
              "name": "indexOf",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 780,
                  "name": "searchElement",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "The value to locate in the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The value to locate in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 717,
                    "qualifiedName": "React.ReactNode",
                    "package": "@types/react",
                    "name": "ReactNode"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 781,
                  "name": "fromIndex",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.indexOf"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.indexOf"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 749,
          "name": "join",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 750,
              "name": "join",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Adds all the elements of an array into a string, separated by the specified separator string.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Adds all the elements of an array into a string, separated by the specified separator string.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 751,
                  "name": "separator",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.join"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.join"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 945,
          "name": "keys",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 946,
              "name": "keys",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns an iterable of keys in the array",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns an iterable of keys in the array\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "id": 974,
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ],
                "qualifiedName": "IterableIterator",
                "package": "typescript",
                "name": "IterableIterator"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.keys"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.keys"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 782,
          "name": "lastIndexOf",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 783,
              "name": "lastIndexOf",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 784,
                  "name": "searchElement",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "The value to locate in the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The value to locate in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 717,
                    "qualifiedName": "React.ReactNode",
                    "package": "@types/react",
                    "name": "ReactNode"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 785,
                  "name": "fromIndex",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.lastIndexOf"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.lastIndexOf"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 822,
          "name": "map",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 823,
              "name": "map",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Calls a defined callback function on each element of an array, and returns an array that contains the results.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Calls a defined callback function on each element of an array, and returns an array that contains the results.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "typeParameter": [
                {
                  "id": 824,
                  "name": "U",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "parameters": [
                {
                  "id": 825,
                  "name": "callbackfn",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 826,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 827,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 828,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 829,
                              "name": "index",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 830,
                              "name": "array",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 824,
                            "qualifiedName": "U",
                            "package": "typescript",
                            "name": "U"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 831,
                  "name": "thisArg",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "id": 824,
                  "qualifiedName": "U",
                  "package": "typescript",
                  "name": "U"
                }
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.map"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.map"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 739,
          "name": "pop",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 740,
              "name": "pop",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Removes the last element from an array and returns it.\\nIf the array is empty, undefined is returned and the array is not modified.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.pop"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.pop"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 741,
          "name": "push",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 742,
              "name": "push",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Appends new elements to the end of an array, and returns the new length of the array.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Appends new elements to the end of an array, and returns the new length of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 743,
                  "name": "items",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isRest": true
                  },
                  "comment": {
                    "shortText": "New elements to add to the array.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"New elements to add to the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "id": 717,
                      "qualifiedName": "React.ReactNode",
                      "package": "@types/react",
                      "name": "ReactNode"
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.push"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.push"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 850,
          "name": "reduce",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 851,
              "name": "reduce",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 852,
                  "name": "callbackfn",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 853,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 854,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 855,
                              "name": "previousValue",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 856,
                              "name": "currentValue",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 857,
                              "name": "currentIndex",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 858,
                              "name": "array",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 717,
                            "qualifiedName": "React.ReactNode",
                            "package": "@types/react",
                            "name": "ReactNode"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.reduce"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 859,
              "name": "reduce",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "parameters": [
                {
                  "id": 860,
                  "name": "callbackfn",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 861,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 862,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 863,
                              "name": "previousValue",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 864,
                              "name": "currentValue",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 865,
                              "name": "currentIndex",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 866,
                              "name": "array",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 717,
                            "qualifiedName": "React.ReactNode",
                            "package": "@types/react",
                            "name": "ReactNode"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 867,
                  "name": "initialValue",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 717,
                    "qualifiedName": "React.ReactNode",
                    "package": "@types/react",
                    "name": "ReactNode"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.reduce"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 868,
              "name": "reduce",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "typeParameter": [
                {
                  "id": 869,
                  "name": "U",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "parameters": [
                {
                  "id": 870,
                  "name": "callbackfn",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 871,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 872,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 873,
                              "name": "previousValue",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 869,
                                "qualifiedName": "U",
                                "package": "typescript",
                                "name": "U"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 874,
                              "name": "currentValue",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 875,
                              "name": "currentIndex",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 876,
                              "name": "array",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 869,
                            "qualifiedName": "U",
                            "package": "typescript",
                            "name": "U"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 877,
                  "name": "initialValue",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 869,
                    "qualifiedName": "U",
                    "package": "typescript",
                    "name": "U"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 869,
                "qualifiedName": "U",
                "package": "typescript",
                "name": "U"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.reduce"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.reduce"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 878,
          "name": "reduceRight",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 879,
              "name": "reduceRight",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 880,
                  "name": "callbackfn",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 881,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 882,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 883,
                              "name": "previousValue",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 884,
                              "name": "currentValue",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 885,
                              "name": "currentIndex",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 886,
                              "name": "array",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 717,
                            "qualifiedName": "React.ReactNode",
                            "package": "@types/react",
                            "name": "ReactNode"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.reduceRight"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 887,
              "name": "reduceRight",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "parameters": [
                {
                  "id": 888,
                  "name": "callbackfn",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 889,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 890,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 891,
                              "name": "previousValue",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 892,
                              "name": "currentValue",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 893,
                              "name": "currentIndex",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 894,
                              "name": "array",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 717,
                            "qualifiedName": "React.ReactNode",
                            "package": "@types/react",
                            "name": "ReactNode"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 895,
                  "name": "initialValue",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 717,
                    "qualifiedName": "React.ReactNode",
                    "package": "@types/react",
                    "name": "ReactNode"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.reduceRight"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 896,
              "name": "reduceRight",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "typeParameter": [
                {
                  "id": 897,
                  "name": "U",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "parameters": [
                {
                  "id": 898,
                  "name": "callbackfn",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 899,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 900,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 901,
                              "name": "previousValue",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 897,
                                "qualifiedName": "U",
                                "package": "typescript",
                                "name": "U"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 902,
                              "name": "currentValue",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 903,
                              "name": "currentIndex",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 904,
                              "name": "array",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 897,
                            "qualifiedName": "U",
                            "package": "typescript",
                            "name": "U"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 905,
                  "name": "initialValue",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reference",
                    "id": 897,
                    "qualifiedName": "U",
                    "package": "typescript",
                    "name": "U"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 897,
                "qualifiedName": "U",
                "package": "typescript",
                "name": "U"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.reduceRight"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.reduceRight"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 752,
          "name": "reverse",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 753,
              "name": "reverse",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Reverses the elements in an array in place.\\nThis method mutates the array and returns a reference to the same array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.reverse"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.reverse"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 754,
          "name": "shift",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 755,
              "name": "shift",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Removes the first element from an array and returns it.\\nIf the array is empty, undefined is returned and the array is not modified.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.shift"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.shift"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 756,
          "name": "slice",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 757,
              "name": "slice",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns a copy of a section of an array.\\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\\nFor example, -2 refers to the second to last element of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 758,
                  "name": "start",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "The beginning index of the specified portion of the array.\nIf start is undefined, then the slice begins at index 0.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The beginning index of the specified portion of the array.\\nIf start is undefined, then the slice begins at index 0.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 759,
                  "name": "end",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\nIf end is undefined, then the slice extends to the end of the array.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\\nIf end is undefined, then the slice extends to the end of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.slice"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.slice"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 804,
          "name": "some",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 805,
              "name": "some",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Determines whether the specified callback function returns true for any element of an array.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Determines whether the specified callback function returns true for any element of an array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 806,
                  "name": "predicate",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "A function that accepts up to three arguments. The some method calls\nthe predicate function for each element in the array until the predicate returns a value\nwhich is coercible to the Boolean value true, or until the end of the array.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A function that accepts up to three arguments. The some method calls\\nthe predicate function for each element in the array until the predicate returns a value\\nwhich is coercible to the Boolean value true, or until the end of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 807,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 808,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 809,
                              "name": "value",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 810,
                              "name": "index",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "intrinsic",
                                "name": "number"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 811,
                              "name": "array",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "array",
                                "elementType": {
                                  "type": "reference",
                                  "id": 717,
                                  "qualifiedName": "React.ReactNode",
                                  "package": "@types/react",
                                  "name": "ReactNode"
                                }
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "unknown"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 812,
                  "name": "thisArg",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "An object to which the this keyword can refer in the predicate function.\nIf thisArg is omitted, undefined is used as the this value.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An object to which the this keyword can refer in the predicate function.\\nIf thisArg is omitted, undefined is used as the this value.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.some"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.some"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 760,
          "name": "sort",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 761,
              "name": "sort",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Sorts an array in place.\\nThis method mutates the array and returns a reference to the same array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 762,
                  "name": "compareFn",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "Function used to determine the order of the elements. It is expected to return\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n```ts\n[11,2,22,1].sort((a, b) => a - b)\n```\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"Function used to determine the order of the elements. It is expected to return\\na negative value if the first argument is less than the second argument, zero if they're equal, and a positive\\nvalue otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ts\",\n          children: \"[11,2,22,1].sort((a, b) => a - b)\\n\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 763,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 764,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "parameters": [
                            {
                              "id": 765,
                              "name": "a",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            },
                            {
                              "id": 766,
                              "name": "b",
                              "kind": 32768,
                              "kindString": "Parameter",
                              "flags": {
                                "isExternal": true
                              },
                              "type": {
                                "type": "reference",
                                "id": 717,
                                "qualifiedName": "React.ReactNode",
                                "package": "@types/react",
                                "name": "ReactNode"
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "type": {
                            "type": "intrinsic",
                            "name": "number"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 733,
                "qualifiedName": "React.ReactNodeArray",
                "package": "@types/react",
                "name": "ReactNodeArray"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.sort"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.sort"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 767,
          "name": "splice",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 768,
              "name": "splice",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
                "returns": "An array containing the elements that were deleted.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "returnsMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An array containing the elements that were deleted.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 769,
                  "name": "start",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "The zero-based location in the array from which to start removing elements.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The zero-based location in the array from which to start removing elements.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 770,
                  "name": "deleteCount",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "comment": {
                    "shortText": "The number of elements to remove.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The number of elements to remove.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.splice"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 771,
              "name": "splice",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.",
                "returns": "An array containing the elements that were deleted.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "returnsMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"An array containing the elements that were deleted.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 772,
                  "name": "start",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "The zero-based location in the array from which to start removing elements.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The zero-based location in the array from which to start removing elements.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 773,
                  "name": "deleteCount",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "comment": {
                    "shortText": "The number of elements to remove.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The number of elements to remove.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 774,
                  "name": "items",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isRest": true
                  },
                  "comment": {
                    "shortText": "Elements to insert into the array in place of the deleted elements.",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Elements to insert into the array in place of the deleted elements.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "id": 717,
                      "qualifiedName": "React.ReactNode",
                      "package": "@types/react",
                      "name": "ReactNode"
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "id": 717,
                  "qualifiedName": "React.ReactNode",
                  "package": "@types/react",
                  "name": "ReactNode"
                }
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.splice"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.splice"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 737,
          "name": "toLocaleString",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 738,
              "name": "toLocaleString",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.toLocaleString"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.toLocaleString"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 735,
          "name": "toString",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 736,
              "name": "toString",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns a string representation of an array.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns a string representation of an array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.toString"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.toString"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 775,
          "name": "unshift",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 776,
              "name": "unshift",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Inserts new elements at the start of an array, and returns the new length of the array.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Inserts new elements at the start of an array, and returns the new length of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 777,
                  "name": "items",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isRest": true
                  },
                  "comment": {
                    "shortText": "Elements to insert at the start of the array.\n",
                    "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Elements to insert at the start of the array.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
                  },
                  "type": {
                    "type": "array",
                    "elementType": {
                      "type": "reference",
                      "id": 717,
                      "qualifiedName": "React.ReactNode",
                      "package": "@types/react",
                      "name": "ReactNode"
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "number"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.unshift"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.unshift"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 947,
          "name": "values",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 948,
              "name": "values",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Returns an iterable of values in the array",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Returns an iterable of values in the array\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "reference",
                "id": 974,
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 717,
                    "qualifiedName": "React.ReactNode",
                    "package": "@types/react",
                    "name": "ReactNode"
                  }
                ],
                "qualifiedName": "IterableIterator",
                "package": "typescript",
                "name": "IterableIterator"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "Array.values"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "Array.values"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [734]
        },
        {
          "title": "Methods",
          "kind": 2048,
          "children": [
            953, 955, 744, 938, 943, 786, 933, 832, 906, 924, 813, 949, 778, 749, 945, 782, 822,
            739, 741, 850, 878, 752, 754, 756, 804, 760, 767, 737, 735, 775, 947
          ]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 239,
          "character": 14
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "typeArguments": [
            {
              "type": "reference",
              "id": 717,
              "qualifiedName": "React.ReactNode",
              "package": "@types/react",
              "name": "ReactNode"
            }
          ],
          "qualifiedName": "Array",
          "package": "typescript",
          "name": "Array"
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "965": {
      "id": 965,
      "name": "Key",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 132,
          "character": 9
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "intrinsic",
            "name": "string"
          },
          {
            "type": "intrinsic",
            "name": "number"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "966": {
      "id": 966,
      "name": "JSXElementConstructor",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 83,
          "character": 9
        }
      ],
      "typeParameter": [
        {
          "id": 973,
          "name": "P",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "reflection",
            "declaration": {
              "id": 967,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "node_modules/@types/react/index.d.ts",
                  "line": 84,
                  "character": 11
                }
              ],
              "signatures": [
                {
                  "id": 968,
                  "name": "__type",
                  "kind": 4096,
                  "kindString": "Call signature",
                  "flags": {
                    "isExternal": true
                  },
                  "parameters": [
                    {
                      "id": 969,
                      "name": "props",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExternal": true
                      },
                      "type": {
                        "type": "reference",
                        "id": 973,
                        "qualifiedName": "P",
                        "package": "@types/react",
                        "name": "P"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "reference",
                        "id": 726,
                        "qualifiedName": "React.ReactElement",
                        "package": "@types/react",
                        "name": "ReactElement"
                      },
                      {
                        "type": "literal",
                        "value": null
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          {
            "type": "reflection",
            "declaration": {
              "id": 970,
              "name": "__type",
              "kind": 512,
              "kindString": "Constructor",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "node_modules/@types/react/index.d.ts",
                  "line": 85,
                  "character": 11
                }
              ],
              "signatures": [
                {
                  "id": 971,
                  "name": "__type",
                  "kind": 16384,
                  "kindString": "Constructor signature",
                  "flags": {
                    "isExternal": true
                  },
                  "parameters": [
                    {
                      "id": 972,
                      "name": "props",
                      "kind": 32768,
                      "kindString": "Parameter",
                      "flags": {
                        "isExternal": true
                      },
                      "type": {
                        "type": "reference",
                        "id": 973,
                        "qualifiedName": "P",
                        "package": "@types/react",
                        "name": "P"
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 987,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 973,
                        "qualifiedName": "P",
                        "package": "@types/react",
                        "name": "P"
                      },
                      {
                        "type": "intrinsic",
                        "name": "any"
                      }
                    ],
                    "qualifiedName": "React.Component",
                    "package": "@types/react",
                    "name": "Component"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "974": {
      "id": 974,
      "name": "IterableIterator",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 975,
          "name": "[iterator]",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 976,
              "name": "[iterator]",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "type": {
                "type": "reference",
                "id": 974,
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 986,
                    "qualifiedName": "IterableIterator.T",
                    "package": "typescript",
                    "name": "T"
                  }
                ],
                "qualifiedName": "IterableIterator",
                "package": "typescript",
                "name": "IterableIterator"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 977,
          "name": "next",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 978,
              "name": "next",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "parameters": [
                {
                  "id": 979,
                  "name": "args",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isRest": true
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "tuple"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "intrinsic",
                            "name": "undefined"
                          }
                        ]
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 1161,
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 986,
                    "qualifiedName": "IterableIterator.T",
                    "package": "typescript",
                    "name": "T"
                  },
                  {
                    "type": "intrinsic",
                    "name": "any"
                  }
                ],
                "qualifiedName": "IteratorResult",
                "package": "typescript",
                "name": "IteratorResult"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1095,
                "name": "Iterator.next"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1094,
            "name": "Iterator.next"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 980,
          "name": "return",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 981,
              "name": "return",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "parameters": [
                {
                  "id": 982,
                  "name": "value",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 1161,
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 986,
                    "qualifiedName": "IterableIterator.T",
                    "package": "typescript",
                    "name": "T"
                  },
                  {
                    "type": "intrinsic",
                    "name": "any"
                  }
                ],
                "qualifiedName": "IteratorResult",
                "package": "typescript",
                "name": "IteratorResult"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1098,
                "name": "Iterator.return"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1097,
            "name": "Iterator.return"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 983,
          "name": "throw",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 984,
              "name": "throw",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "parameters": [
                {
                  "id": 985,
                  "name": "e",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 1161,
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 986,
                    "qualifiedName": "IterableIterator.T",
                    "package": "typescript",
                    "name": "T"
                  },
                  {
                    "type": "intrinsic",
                    "name": "any"
                  }
                ],
                "qualifiedName": "IteratorResult",
                "package": "typescript",
                "name": "IteratorResult"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1101,
                "name": "Iterator.throw"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1100,
            "name": "Iterator.throw"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Methods",
          "kind": 2048,
          "children": [975, 977, 980, 983]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          "line": 54,
          "character": 10
        }
      ],
      "typeParameter": [
        {
          "id": 986,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "id": 1093,
          "typeArguments": [
            {
              "type": "reference",
              "id": 986,
              "qualifiedName": "IterableIterator.T",
              "package": "typescript",
              "name": "T"
            }
          ],
          "qualifiedName": "Iterator",
          "package": "typescript",
          "name": "Iterator"
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "987": {
      "id": 987,
      "name": "Component",
      "kind": 128,
      "kindString": "Class",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 989,
          "name": "constructor",
          "kind": 512,
          "kindString": "Constructor",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 488,
              "character": 8
            }
          ],
          "signatures": [
            {
              "id": 990,
              "name": "new Component",
              "kind": 16384,
              "kindString": "Constructor signature",
              "flags": {
                "isExternal": true
              },
              "typeParameter": [
                {
                  "id": 992,
                  "name": "P",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "default": {
                    "type": "reflection",
                    "declaration": {
                      "id": 991,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 994,
                  "name": "S",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "default": {
                    "type": "reflection",
                    "declaration": {
                      "id": 993,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 995,
                  "name": "SS",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "default": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "parameters": [
                {
                  "id": 996,
                  "name": "props",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 992,
                        "qualifiedName": "React.Component.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 987,
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 992,
                    "qualifiedName": "React.Component.P",
                    "package": "@types/react",
                    "name": "P"
                  },
                  {
                    "type": "reference",
                    "id": 994,
                    "qualifiedName": "React.Component.S",
                    "package": "@types/react",
                    "name": "S"
                  },
                  {
                    "type": "reference",
                    "id": 995,
                    "qualifiedName": "React.Component.SS",
                    "package": "@types/react",
                    "name": "SS"
                  }
                ],
                "qualifiedName": "React.Component",
                "package": "@types/react",
                "name": "Component"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "ComponentLifecycle<P, S, SS>.constructor"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 997,
              "name": "new Component",
              "kind": 16384,
              "kindString": "Constructor signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": ""
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/docs/legacy-context.html\n"
                  }
                ]
              },
              "typeParameter": [
                {
                  "id": 999,
                  "name": "P",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "default": {
                    "type": "reflection",
                    "declaration": {
                      "id": 998,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1001,
                  "name": "S",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "default": {
                    "type": "reflection",
                    "declaration": {
                      "id": 1000,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1002,
                  "name": "SS",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "default": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "parameters": [
                {
                  "id": 1003,
                  "name": "props",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 992,
                    "qualifiedName": "React.Component.P",
                    "package": "@types/react",
                    "name": "P"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1004,
                  "name": "context",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 987,
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 992,
                    "qualifiedName": "React.Component.P",
                    "package": "@types/react",
                    "name": "P"
                  },
                  {
                    "type": "reference",
                    "id": 994,
                    "qualifiedName": "React.Component.S",
                    "package": "@types/react",
                    "name": "S"
                  },
                  {
                    "type": "reference",
                    "id": 995,
                    "qualifiedName": "React.Component.SS",
                    "package": "@types/react",
                    "name": "SS"
                  }
                ],
                "qualifiedName": "React.Component",
                "package": "@types/react",
                "name": "Component"
              },
              "inheritedFrom": {
                "type": "reference",
                "name": "ComponentLifecycle<P, S, SS>.constructor"
              },
              "docFlags": {
                "deprecated": true
              },
              "tagsByName": {
                "deprecated": "",
                "see": "https://reactjs.org/docs/legacy-context.html"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "name": "ComponentLifecycle<P, S, SS>.constructor"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1005,
          "name": "context",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "comment": {
            "shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.",
            "text": "```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
            "tags": [
              {
                "tag": "see",
                "text": "https://reactjs.org/docs/context.html\n"
              }
            ],
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"If using the new style context, re-declare this in your class to be the\\n\", _jsx(_components.code, {\n        children: \"React.ContextType\"\n      }), \" of your \", _jsx(_components.code, {\n        children: \"static contextType\"\n      }), \".\\nShould be used with type annotation or static contextType.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
            "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"static contextType = MyContext\\n// For TS pre-3.7:\\ncontext!: React.ContextType<typeof MyContext>\\n// For TS 3.7 and above:\\ndeclare context: React.ContextType<typeof MyContext>\\n\"\n      })\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 486,
              "character": 8
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "any"
          },
          "docFlags": {},
          "tagsByName": {
            "see": "https://reactjs.org/docs/context.html"
          }
        },
        {
          "id": 1024,
          "name": "props",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isReadonly": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 511,
              "character": 17
            }
          ],
          "type": {
            "type": "intersection",
            "types": [
              {
                "type": "reference",
                "id": 1159,
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 992,
                    "qualifiedName": "React.Component.P",
                    "package": "@types/react",
                    "name": "P"
                  }
                ],
                "qualifiedName": "Readonly",
                "package": "typescript",
                "name": "Readonly"
              },
              {
                "type": "reference",
                "id": 1159,
                "typeArguments": [
                  {
                    "type": "reflection",
                    "declaration": {
                      "id": 1025,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "children": [
                        {
                          "id": 1026,
                          "name": "children",
                          "kind": 1024,
                          "kindString": "Property",
                          "flags": {
                            "isExternal": true,
                            "isOptional": true
                          },
                          "sources": [
                            {
                              "fileName": "node_modules/@types/react/index.d.ts",
                              "line": 511,
                              "character": 49
                            }
                          ],
                          "type": {
                            "type": "reference",
                            "id": 717,
                            "qualifiedName": "React.ReactNode",
                            "package": "@types/react",
                            "name": "ReactNode"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "groups": [
                        {
                          "title": "Properties",
                          "kind": 1024,
                          "children": [1026]
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  }
                ],
                "qualifiedName": "Readonly",
                "package": "typescript",
                "name": "Readonly"
              }
            ]
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1028,
          "name": "refs",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "comment": {
            "tags": [
              {
                "tag": "deprecated",
                "text": "\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"
              }
            ]
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 517,
              "character": 8
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1029,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {
                "isExternal": true
              },
              "indexSignature": {
                "id": 1030,
                "name": "__index",
                "kind": 8192,
                "kindString": "Index signature",
                "flags": {
                  "isExternal": true
                },
                "parameters": [
                  {
                    "id": 1031,
                    "name": "key",
                    "kind": 32768,
                    "flags": {
                      "isExternal": true
                    },
                    "type": {
                      "type": "intrinsic",
                      "name": "string"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  }
                ],
                "type": {
                  "type": "reference",
                  "id": 1167,
                  "qualifiedName": "React.ReactInstance",
                  "package": "@types/react",
                  "name": "ReactInstance"
                },
                "docFlags": {},
                "tagsByName": {}
              },
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "docFlags": {
            "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "tagsByName": {
            "deprecated": "https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs"
          }
        },
        {
          "id": 1027,
          "name": "state",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 512,
              "character": 8
            }
          ],
          "type": {
            "type": "reference",
            "id": 1159,
            "typeArguments": [
              {
                "type": "reference",
                "id": 994,
                "qualifiedName": "React.Component.S",
                "package": "@types/react",
                "name": "S"
              }
            ],
            "qualifiedName": "Readonly",
            "package": "typescript",
            "name": "Readonly"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 988,
          "name": "contextType",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isStatic": true,
            "isExternal": true,
            "isOptional": true
          },
          "comment": {
            "shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
            "text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
            "tags": [
              {
                "tag": "see",
                "text": "https://reactjs.org/docs/context.html#classcontexttype\n"
              }
            ],
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"If set, \", _jsx(_components.code, {\n        children: \"this.context\"\n      }), \" will be set at runtime to the current value of the given Context.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
            "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"Usage:\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-ts\",\n          children: \"type MyContext = number\\nconst Ctx = React.createContext<MyContext>(0)\\n\\nclass Foo extends React.Component {\\n  static contextType = Ctx\\n  context!: React.ContextType<typeof Ctx>\\n  render () {\\n    return <>My context's value: {this.context}</>;\\n  }\\n}\\n\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 468,
              "character": 15
            }
          ],
          "type": {
            "type": "reference",
            "id": 1154,
            "typeArguments": [
              {
                "type": "intrinsic",
                "name": "any"
              }
            ],
            "qualifiedName": "React.Context",
            "package": "@types/react",
            "name": "Context"
          },
          "docFlags": {},
          "tagsByName": {
            "see": "https://reactjs.org/docs/context.html#classcontexttype"
          }
        },
        {
          "id": 1056,
          "name": "UNSAFE_componentWillMount",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1057,
              "name": "UNSAFE_componentWillMount",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
                "text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use componentDidMount or the constructor instead"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Called immediately before mounting occurs, and before \", _jsx(_components.code, {\n        children: \"Component#render\"\n      }), \".\\nAvoid introducing any side-effects or subscriptions in this method.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"This method will not stop working in React 17.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1132,
                "name": "ComponentLifecycle.UNSAFE_componentWillMount"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use componentDidMount or the constructor instead\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use componentDidMount or the constructor instead",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1131,
            "name": "ComponentLifecycle.UNSAFE_componentWillMount"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1062,
          "name": "UNSAFE_componentWillReceiveProps",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1063,
              "name": "UNSAFE_componentWillReceiveProps",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
                "text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use static getDerivedStateFromProps instead"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called when the component may be receiving new props.\\nReact may call this even if props have not changed, so be sure to compare new and existing\\nprops if you only want to handle changes.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Calling \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" generally does not trigger this method.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This method will not stop working in React 17.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1064,
                  "name": "nextProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 992,
                        "qualifiedName": "React.Component.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1065,
                  "name": "nextContext",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1138,
                "name": "ComponentLifecycle.UNSAFE_componentWillReceiveProps"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use static getDerivedStateFromProps instead\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use static getDerivedStateFromProps instead",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1137,
            "name": "ComponentLifecycle.UNSAFE_componentWillReceiveProps"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1071,
          "name": "UNSAFE_componentWillUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1072,
              "name": "UNSAFE_componentWillUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
                "text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use getSnapshotBeforeUpdate instead"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately before rendering when new props or state is received. Not called for the initial render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Note: You cannot call \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" here.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This method will not stop working in React 17.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1073,
                  "name": "nextProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 992,
                        "qualifiedName": "React.Component.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1074,
                  "name": "nextState",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 994,
                        "qualifiedName": "React.Component.S",
                        "package": "@types/react",
                        "name": "S"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1075,
                  "name": "nextContext",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1147,
                "name": "ComponentLifecycle.UNSAFE_componentWillUpdate"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use getSnapshotBeforeUpdate instead\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use getSnapshotBeforeUpdate instead",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1146,
            "name": "ComponentLifecycle.UNSAFE_componentWillUpdate"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1041,
          "name": "componentDidCatch",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1042,
              "name": "componentDidCatch",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Catches exceptions generated in descendant components. Unhandled exceptions will cause\\nthe entire component tree to unmount.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1043,
                  "name": "error",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1168,
                    "qualifiedName": "Error",
                    "package": "typescript",
                    "name": "Error"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1044,
                  "name": "errorInfo",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1173,
                    "qualifiedName": "React.ErrorInfo",
                    "package": "@types/react",
                    "name": "ErrorInfo"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1117,
                "name": "ComponentLifecycle.componentDidCatch"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1116,
            "name": "ComponentLifecycle.componentDidCatch"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1032,
          "name": "componentDidMount",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1033,
              "name": "componentDidMount",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately after a component is mounted. Setting state here will trigger re-rendering.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1108,
                "name": "ComponentLifecycle.componentDidMount"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1107,
            "name": "ComponentLifecycle.componentDidMount"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1049,
          "name": "componentDidUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1050,
              "name": "componentDidUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately after updating occurs. Not called for the initial render.",
                "text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately after updating occurs. Not called for the initial render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1051,
                  "name": "prevProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 992,
                        "qualifiedName": "React.Component.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1052,
                  "name": "prevState",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 994,
                        "qualifiedName": "React.Component.S",
                        "package": "@types/react",
                        "name": "S"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1053,
                  "name": "snapshot",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 995,
                    "qualifiedName": "React.Component.SS",
                    "package": "@types/react",
                    "name": "SS"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1125,
                "name": "ComponentLifecycle.componentDidUpdate"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1124,
            "name": "ComponentLifecycle.componentDidUpdate"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1054,
          "name": "componentWillMount",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1055,
              "name": "componentWillMount",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
                "text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Called immediately before mounting occurs, and before \", _jsx(_components.code, {\n        children: \"Component#render\"\n      }), \".\\nAvoid introducing any side-effects or subscriptions in this method.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1130,
                "name": "ComponentLifecycle.componentWillMount"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use componentDidMount or the constructor instead; will stop working in React 17\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use componentDidMount or the constructor instead; will stop working in React 17",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1129,
            "name": "ComponentLifecycle.componentWillMount"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1058,
          "name": "componentWillReceiveProps",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1059,
              "name": "componentWillReceiveProps",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
                "text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called when the component may be receiving new props.\\nReact may call this even if props have not changed, so be sure to compare new and existing\\nprops if you only want to handle changes.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Calling \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" generally does not trigger this method.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1060,
                  "name": "nextProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 992,
                        "qualifiedName": "React.Component.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1061,
                  "name": "nextContext",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1134,
                "name": "ComponentLifecycle.componentWillReceiveProps"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use static getDerivedStateFromProps instead; will stop working in React 17\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1133,
            "name": "ComponentLifecycle.componentWillReceiveProps"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1039,
          "name": "componentWillUnmount",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1040,
              "name": "componentWillUnmount",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\\ncancelled network requests, or cleaning up any DOM elements created in \", _jsx(_components.code, {\n        children: \"componentDidMount\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1115,
                "name": "ComponentLifecycle.componentWillUnmount"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1114,
            "name": "ComponentLifecycle.componentWillUnmount"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1066,
          "name": "componentWillUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1067,
              "name": "componentWillUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
                "text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately before rendering when new props or state is received. Not called for the initial render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Note: You cannot call \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" here.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1068,
                  "name": "nextProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 992,
                        "qualifiedName": "React.Component.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1069,
                  "name": "nextState",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 994,
                        "qualifiedName": "React.Component.S",
                        "package": "@types/react",
                        "name": "S"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1070,
                  "name": "nextContext",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1142,
                "name": "ComponentLifecycle.componentWillUpdate"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1141,
            "name": "ComponentLifecycle.componentWillUpdate"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1017,
          "name": "forceUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 503,
              "character": 8
            }
          ],
          "signatures": [
            {
              "id": 1018,
              "name": "forceUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "parameters": [
                {
                  "id": 1019,
                  "name": "callback",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 1020,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 1021,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "void"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1045,
          "name": "getSnapshotBeforeUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1046,
              "name": "getSnapshotBeforeUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
                "text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Runs before React applies the result of \", _jsx(_components.code, {\n        children: \"render\"\n      }), \" to the document, and\\nreturns an object to be given to componentDidUpdate. Useful for saving\\nthings such as scroll position before \", _jsx(_components.code, {\n        children: \"render\"\n      }), \" causes changes to it.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\\nlifecycle events from running.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1047,
                  "name": "prevProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 992,
                        "qualifiedName": "React.Component.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1048,
                  "name": "prevState",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 994,
                        "qualifiedName": "React.Component.S",
                        "package": "@types/react",
                        "name": "S"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 995,
                    "qualifiedName": "React.Component.SS",
                    "package": "@types/react",
                    "name": "SS"
                  }
                ]
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1121,
                "name": "ComponentLifecycle.getSnapshotBeforeUpdate"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1120,
            "name": "ComponentLifecycle.getSnapshotBeforeUpdate"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1022,
          "name": "render",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 504,
              "character": 8
            }
          ],
          "signatures": [
            {
              "id": 1023,
              "name": "render",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "type": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1006,
          "name": "setState",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 498,
              "character": 8
            }
          ],
          "signatures": [
            {
              "id": 1007,
              "name": "setState",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "typeParameter": [
                {
                  "id": 1008,
                  "name": "K",
                  "kind": 131072,
                  "kindString": "Type parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "intrinsic",
                        "name": "number"
                      },
                      {
                        "type": "intrinsic",
                        "name": "symbol"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "parameters": [
                {
                  "id": 1009,
                  "name": "state",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "literal",
                        "value": null
                      },
                      {
                        "type": "reference",
                        "id": 994,
                        "qualifiedName": "React.Component.S",
                        "package": "@types/react",
                        "name": "S"
                      },
                      {
                        "type": "reflection",
                        "declaration": {
                          "id": 1010,
                          "name": "__type",
                          "kind": 65536,
                          "kindString": "Type literal",
                          "flags": {
                            "isExternal": true
                          },
                          "signatures": [
                            {
                              "id": 1011,
                              "name": "__type",
                              "kind": 4096,
                              "kindString": "Call signature",
                              "flags": {
                                "isExternal": true
                              },
                              "parameters": [
                                {
                                  "id": 1012,
                                  "name": "prevState",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExternal": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "id": 1159,
                                    "typeArguments": [
                                      {
                                        "type": "reference",
                                        "id": 994,
                                        "qualifiedName": "React.Component.S",
                                        "package": "@types/react",
                                        "name": "S"
                                      }
                                    ],
                                    "qualifiedName": "Readonly",
                                    "package": "typescript",
                                    "name": "Readonly"
                                  },
                                  "docFlags": {},
                                  "tagsByName": {}
                                },
                                {
                                  "id": 1013,
                                  "name": "props",
                                  "kind": 32768,
                                  "kindString": "Parameter",
                                  "flags": {
                                    "isExternal": true
                                  },
                                  "type": {
                                    "type": "reference",
                                    "id": 1159,
                                    "typeArguments": [
                                      {
                                        "type": "reference",
                                        "id": 992,
                                        "qualifiedName": "React.Component.P",
                                        "package": "@types/react",
                                        "name": "P"
                                      }
                                    ],
                                    "qualifiedName": "Readonly",
                                    "package": "typescript",
                                    "name": "Readonly"
                                  },
                                  "docFlags": {},
                                  "tagsByName": {}
                                }
                              ],
                              "type": {
                                "type": "union",
                                "types": [
                                  {
                                    "type": "literal",
                                    "value": null
                                  },
                                  {
                                    "type": "reference",
                                    "id": 994,
                                    "qualifiedName": "React.Component.S",
                                    "package": "@types/react",
                                    "name": "S"
                                  },
                                  {
                                    "type": "reference",
                                    "id": 1164,
                                    "typeArguments": [
                                      {
                                        "type": "reference",
                                        "id": 994,
                                        "qualifiedName": "React.Component.S",
                                        "package": "@types/react",
                                        "name": "S"
                                      },
                                      {
                                        "type": "reference",
                                        "id": 1008,
                                        "qualifiedName": "K",
                                        "package": "@types/react",
                                        "name": "K"
                                      }
                                    ],
                                    "qualifiedName": "Pick",
                                    "package": "typescript",
                                    "name": "Pick"
                                  }
                                ]
                              },
                              "docFlags": {},
                              "tagsByName": {}
                            }
                          ],
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      },
                      {
                        "type": "reference",
                        "id": 1164,
                        "typeArguments": [
                          {
                            "type": "reference",
                            "id": 994,
                            "qualifiedName": "React.Component.S",
                            "package": "@types/react",
                            "name": "S"
                          },
                          {
                            "type": "reference",
                            "id": 1008,
                            "qualifiedName": "K",
                            "package": "@types/react",
                            "name": "K"
                          }
                        ],
                        "qualifiedName": "Pick",
                        "package": "typescript",
                        "name": "Pick"
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1014,
                  "name": "callback",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "reflection",
                    "declaration": {
                      "id": 1015,
                      "name": "__type",
                      "kind": 65536,
                      "kindString": "Type literal",
                      "flags": {
                        "isExternal": true
                      },
                      "signatures": [
                        {
                          "id": 1016,
                          "name": "__type",
                          "kind": 4096,
                          "kindString": "Call signature",
                          "flags": {
                            "isExternal": true
                          },
                          "type": {
                            "type": "intrinsic",
                            "name": "void"
                          },
                          "docFlags": {},
                          "tagsByName": {}
                        }
                      ],
                      "docFlags": {},
                      "tagsByName": {}
                    }
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1034,
          "name": "shouldComponentUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1035,
              "name": "shouldComponentUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called to determine whether the change in props and state should trigger a re-render.",
                "text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called to determine whether the change in props and state should trigger a re-render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"Component\"\n        }), \" always returns true.\\n\", _jsx(_components.code, {\n          children: \"PureComponent\"\n        }), \" implements a shallow comparison on props and state and returns true if any\\nprops or states have changed.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If false is returned, \", _jsx(_components.code, {\n          children: \"Component#render\"\n        }), \", \", _jsx(_components.code, {\n          children: \"componentWillUpdate\"\n        }), \"\\nand \", _jsx(_components.code, {\n          children: \"componentDidUpdate\"\n        }), \" will not be called.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1036,
                  "name": "nextProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 992,
                        "qualifiedName": "React.Component.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1037,
                  "name": "nextState",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 994,
                        "qualifiedName": "React.Component.S",
                        "package": "@types/react",
                        "name": "S"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1038,
                  "name": "nextContext",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1110,
                "name": "ComponentLifecycle.shouldComponentUpdate"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1109,
            "name": "ComponentLifecycle.shouldComponentUpdate"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Constructors",
          "kind": 512,
          "children": [989]
        },
        {
          "title": "Properties",
          "kind": 1024,
          "children": [1005, 1024, 1028, 1027, 988]
        },
        {
          "title": "Methods",
          "kind": 2048,
          "children": [
            1056, 1062, 1071, 1041, 1032, 1049, 1054, 1058, 1039, 1066, 1017, 1045, 1022, 1006, 1034
          ]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 446,
          "character": 10
        }
      ],
      "typeParameter": [
        {
          "id": 1077,
          "name": "P",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "default": {
            "type": "reflection",
            "declaration": {
              "id": 1076,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "node_modules/@types/react/index.d.ts",
                  "line": 445,
                  "character": 28
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1079,
          "name": "S",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "default": {
            "type": "reflection",
            "declaration": {
              "id": 1078,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "node_modules/@types/react/index.d.ts",
                  "line": 445,
                  "character": 36
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1080,
          "name": "SS",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "default": {
            "type": "intrinsic",
            "name": "any"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "id": 1106,
          "typeArguments": [
            {
              "type": "reference",
              "id": 992,
              "qualifiedName": "React.Component.P",
              "package": "@types/react",
              "name": "P"
            },
            {
              "type": "reference",
              "id": 994,
              "qualifiedName": "React.Component.S",
              "package": "@types/react",
              "name": "S"
            },
            {
              "type": "reference",
              "id": 995,
              "qualifiedName": "React.Component.SS",
              "package": "@types/react",
              "name": "SS"
            }
          ],
          "qualifiedName": "React.ComponentLifecycle",
          "package": "@types/react",
          "name": "ComponentLifecycle"
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1081": {
      "id": 1081,
      "name": "ConcatArray",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1082,
          "name": "length",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isReadonly": true
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
              "line": 1263,
              "character": 13
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1083,
          "name": "join",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1084,
              "name": "join",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "parameters": [
                {
                  "id": 1085,
                  "name": "separator",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "string"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1086,
          "name": "slice",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1087,
              "name": "slice",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "parameters": [
                {
                  "id": 1088,
                  "name": "start",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1089,
                  "name": "end",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "number"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "array",
                "elementType": {
                  "type": "reference",
                  "id": 1090,
                  "qualifiedName": "ConcatArray.T",
                  "package": "typescript",
                  "name": "T"
                }
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [1082]
        },
        {
          "title": "Methods",
          "kind": 2048,
          "children": [1083, 1086]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
          "line": 1262,
          "character": 10
        }
      ],
      "typeParameter": [
        {
          "id": 1090,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "indexSignature": {
        "id": 1091,
        "name": "__index",
        "kind": 8192,
        "kindString": "Index signature",
        "flags": {
          "isExternal": true
        },
        "parameters": [
          {
            "id": 1092,
            "name": "n",
            "kind": 32768,
            "flags": {
              "isExternal": true
            },
            "type": {
              "type": "intrinsic",
              "name": "number"
            },
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "type": {
          "type": "reference",
          "id": 1090,
          "qualifiedName": "ConcatArray.T",
          "package": "typescript",
          "name": "T"
        },
        "docFlags": {},
        "tagsByName": {}
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1093": {
      "id": 1093,
      "name": "Iterator",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1094,
          "name": "next",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1095,
              "name": "next",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "parameters": [
                {
                  "id": 1096,
                  "name": "args",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isRest": true
                  },
                  "type": {
                    "type": "union",
                    "types": [
                      {
                        "type": "tuple"
                      },
                      {
                        "type": "tuple",
                        "elements": [
                          {
                            "type": "reference",
                            "id": 1105,
                            "qualifiedName": "Iterator.TNext",
                            "package": "typescript",
                            "name": "TNext"
                          }
                        ]
                      }
                    ]
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 1161,
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 1103,
                    "qualifiedName": "Iterator.T",
                    "package": "typescript",
                    "name": "T"
                  },
                  {
                    "type": "reference",
                    "id": 1104,
                    "qualifiedName": "Iterator.TReturn",
                    "package": "typescript",
                    "name": "TReturn"
                  }
                ],
                "qualifiedName": "IteratorResult",
                "package": "typescript",
                "name": "IteratorResult"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1097,
          "name": "return",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1098,
              "name": "return",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "parameters": [
                {
                  "id": 1099,
                  "name": "value",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1104,
                    "qualifiedName": "Iterator.TReturn",
                    "package": "typescript",
                    "name": "TReturn"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 1161,
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 1103,
                    "qualifiedName": "Iterator.T",
                    "package": "typescript",
                    "name": "T"
                  },
                  {
                    "type": "reference",
                    "id": 1104,
                    "qualifiedName": "Iterator.TReturn",
                    "package": "typescript",
                    "name": "TReturn"
                  }
                ],
                "qualifiedName": "IteratorResult",
                "package": "typescript",
                "name": "IteratorResult"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1100,
          "name": "throw",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1101,
              "name": "throw",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "parameters": [
                {
                  "id": 1102,
                  "name": "e",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 1161,
                "typeArguments": [
                  {
                    "type": "reference",
                    "id": 1103,
                    "qualifiedName": "Iterator.T",
                    "package": "typescript",
                    "name": "T"
                  },
                  {
                    "type": "reference",
                    "id": 1104,
                    "qualifiedName": "Iterator.TReturn",
                    "package": "typescript",
                    "name": "TReturn"
                  }
                ],
                "qualifiedName": "IteratorResult",
                "package": "typescript",
                "name": "IteratorResult"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Methods",
          "kind": 2048,
          "children": [1094, 1097, 1100]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          "line": 43,
          "character": 10
        }
      ],
      "typeParameter": [
        {
          "id": 1103,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1104,
          "name": "TReturn",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "default": {
            "type": "intrinsic",
            "name": "any"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1105,
          "name": "TNext",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "default": {
            "type": "intrinsic",
            "name": "undefined"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "id": 974,
          "name": "IterableIterator"
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1106": {
      "id": 1106,
      "name": "ComponentLifecycle",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1131,
          "name": "UNSAFE_componentWillMount",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1132,
              "name": "UNSAFE_componentWillMount",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
                "text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use componentDidMount or the constructor instead"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Called immediately before mounting occurs, and before \", _jsx(_components.code, {\n        children: \"Component#render\"\n      }), \".\\nAvoid introducing any side-effects or subscriptions in this method.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"This method will not stop working in React 17.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1192,
                "name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use componentDidMount or the constructor instead\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use componentDidMount or the constructor instead",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1191,
            "name": "DeprecatedLifecycle.UNSAFE_componentWillMount"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1137,
          "name": "UNSAFE_componentWillReceiveProps",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1138,
              "name": "UNSAFE_componentWillReceiveProps",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
                "text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use static getDerivedStateFromProps instead"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called when the component may be receiving new props.\\nReact may call this even if props have not changed, so be sure to compare new and existing\\nprops if you only want to handle changes.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Calling \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" generally does not trigger this method.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This method will not stop working in React 17.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1139,
                  "name": "nextProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1151,
                        "qualifiedName": "React.ComponentLifecycle.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1140,
                  "name": "nextContext",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1198,
                "name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use static getDerivedStateFromProps instead\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use static getDerivedStateFromProps instead",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1197,
            "name": "DeprecatedLifecycle.UNSAFE_componentWillReceiveProps"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1146,
          "name": "UNSAFE_componentWillUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1147,
              "name": "UNSAFE_componentWillUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
                "text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use getSnapshotBeforeUpdate instead"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately before rendering when new props or state is received. Not called for the initial render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Note: You cannot call \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" here.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This method will not stop working in React 17.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1148,
                  "name": "nextProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1151,
                        "qualifiedName": "React.ComponentLifecycle.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1149,
                  "name": "nextState",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1152,
                        "qualifiedName": "React.ComponentLifecycle.S",
                        "package": "@types/react",
                        "name": "S"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1150,
                  "name": "nextContext",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1207,
                "name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use getSnapshotBeforeUpdate instead\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use getSnapshotBeforeUpdate instead",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1206,
            "name": "DeprecatedLifecycle.UNSAFE_componentWillUpdate"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1116,
          "name": "componentDidCatch",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1117,
              "name": "componentDidCatch",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Catches exceptions generated in descendant components. Unhandled exceptions will cause\\nthe entire component tree to unmount.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1118,
                  "name": "error",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1168,
                    "qualifiedName": "Error",
                    "package": "typescript",
                    "name": "Error"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1119,
                  "name": "errorInfo",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1173,
                    "qualifiedName": "React.ErrorInfo",
                    "package": "@types/react",
                    "name": "ErrorInfo"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1107,
          "name": "componentDidMount",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1108,
              "name": "componentDidMount",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately after a component is mounted. Setting state here will trigger re-rendering.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1124,
          "name": "componentDidUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1125,
              "name": "componentDidUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately after updating occurs. Not called for the initial render.",
                "text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately after updating occurs. Not called for the initial render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1126,
                  "name": "prevProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1151,
                        "qualifiedName": "React.ComponentLifecycle.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1127,
                  "name": "prevState",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1152,
                        "qualifiedName": "React.ComponentLifecycle.S",
                        "package": "@types/react",
                        "name": "S"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1128,
                  "name": "snapshot",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1153,
                    "qualifiedName": "React.ComponentLifecycle.SS",
                    "package": "@types/react",
                    "name": "SS"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1181,
                "name": "NewLifecycle.componentDidUpdate"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1180,
            "name": "NewLifecycle.componentDidUpdate"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1129,
          "name": "componentWillMount",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1130,
              "name": "componentWillMount",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
                "text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Called immediately before mounting occurs, and before \", _jsx(_components.code, {\n        children: \"Component#render\"\n      }), \".\\nAvoid introducing any side-effects or subscriptions in this method.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1190,
                "name": "DeprecatedLifecycle.componentWillMount"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use componentDidMount or the constructor instead; will stop working in React 17\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use componentDidMount or the constructor instead; will stop working in React 17",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1189,
            "name": "DeprecatedLifecycle.componentWillMount"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1133,
          "name": "componentWillReceiveProps",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1134,
              "name": "componentWillReceiveProps",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
                "text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called when the component may be receiving new props.\\nReact may call this even if props have not changed, so be sure to compare new and existing\\nprops if you only want to handle changes.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Calling \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" generally does not trigger this method.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1135,
                  "name": "nextProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1151,
                        "qualifiedName": "React.ComponentLifecycle.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1136,
                  "name": "nextContext",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1194,
                "name": "DeprecatedLifecycle.componentWillReceiveProps"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use static getDerivedStateFromProps instead; will stop working in React 17\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1193,
            "name": "DeprecatedLifecycle.componentWillReceiveProps"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1114,
          "name": "componentWillUnmount",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1115,
              "name": "componentWillUnmount",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\\ncancelled network requests, or cleaning up any DOM elements created in \", _jsx(_components.code, {\n        children: \"componentDidMount\"\n      }), \".\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1141,
          "name": "componentWillUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1142,
              "name": "componentWillUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
                "text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately before rendering when new props or state is received. Not called for the initial render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Note: You cannot call \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" here.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1143,
                  "name": "nextProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1151,
                        "qualifiedName": "React.ComponentLifecycle.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1144,
                  "name": "nextState",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1152,
                        "qualifiedName": "React.ComponentLifecycle.S",
                        "package": "@types/react",
                        "name": "S"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1145,
                  "name": "nextContext",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1202,
                "name": "DeprecatedLifecycle.componentWillUpdate"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1201,
            "name": "DeprecatedLifecycle.componentWillUpdate"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1120,
          "name": "getSnapshotBeforeUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1121,
              "name": "getSnapshotBeforeUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
                "text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Runs before React applies the result of \", _jsx(_components.code, {\n        children: \"render\"\n      }), \" to the document, and\\nreturns an object to be given to componentDidUpdate. Useful for saving\\nthings such as scroll position before \", _jsx(_components.code, {\n        children: \"render\"\n      }), \" causes changes to it.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\\nlifecycle events from running.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1122,
                  "name": "prevProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1151,
                        "qualifiedName": "React.ComponentLifecycle.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1123,
                  "name": "prevState",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1152,
                        "qualifiedName": "React.ComponentLifecycle.S",
                        "package": "@types/react",
                        "name": "S"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 1153,
                    "qualifiedName": "React.ComponentLifecycle.SS",
                    "package": "@types/react",
                    "name": "SS"
                  }
                ]
              },
              "inheritedFrom": {
                "type": "reference",
                "id": 1177,
                "name": "NewLifecycle.getSnapshotBeforeUpdate"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "inheritedFrom": {
            "type": "reference",
            "id": 1176,
            "name": "NewLifecycle.getSnapshotBeforeUpdate"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1109,
          "name": "shouldComponentUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1110,
              "name": "shouldComponentUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called to determine whether the change in props and state should trigger a re-render.",
                "text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called to determine whether the change in props and state should trigger a re-render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"Component\"\n        }), \" always returns true.\\n\", _jsx(_components.code, {\n          children: \"PureComponent\"\n        }), \" implements a shallow comparison on props and state and returns true if any\\nprops or states have changed.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"If false is returned, \", _jsx(_components.code, {\n          children: \"Component#render\"\n        }), \", \", _jsx(_components.code, {\n          children: \"componentWillUpdate\"\n        }), \"\\nand \", _jsx(_components.code, {\n          children: \"componentDidUpdate\"\n        }), \" will not be called.\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1111,
                  "name": "nextProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1151,
                        "qualifiedName": "React.ComponentLifecycle.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1112,
                  "name": "nextState",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1152,
                        "qualifiedName": "React.ComponentLifecycle.S",
                        "package": "@types/react",
                        "name": "S"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1113,
                  "name": "nextContext",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Methods",
          "kind": 2048,
          "children": [1131, 1137, 1146, 1116, 1107, 1124, 1129, 1133, 1114, 1141, 1120, 1109]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 616,
          "character": 14
        }
      ],
      "typeParameter": [
        {
          "id": 1151,
          "name": "P",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1152,
          "name": "S",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1153,
          "name": "SS",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "default": {
            "type": "intrinsic",
            "name": "any"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "id": 1175,
          "typeArguments": [
            {
              "type": "reference",
              "id": 1151,
              "qualifiedName": "React.ComponentLifecycle.P",
              "package": "@types/react",
              "name": "P"
            },
            {
              "type": "reference",
              "id": 1152,
              "qualifiedName": "React.ComponentLifecycle.S",
              "package": "@types/react",
              "name": "S"
            },
            {
              "type": "reference",
              "id": 1153,
              "qualifiedName": "React.ComponentLifecycle.SS",
              "package": "@types/react",
              "name": "SS"
            }
          ],
          "qualifiedName": "React.NewLifecycle",
          "package": "@types/react",
          "name": "NewLifecycle"
        },
        {
          "type": "reference",
          "id": 1188,
          "typeArguments": [
            {
              "type": "reference",
              "id": 1151,
              "qualifiedName": "React.ComponentLifecycle.P",
              "package": "@types/react",
              "name": "P"
            },
            {
              "type": "reference",
              "id": 1152,
              "qualifiedName": "React.ComponentLifecycle.S",
              "package": "@types/react",
              "name": "S"
            }
          ],
          "qualifiedName": "React.DeprecatedLifecycle",
          "package": "@types/react",
          "name": "DeprecatedLifecycle"
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "id": 987,
          "name": "Component"
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1154": {
      "id": 1154,
      "name": "Context",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1156,
          "name": "Consumer",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 382,
              "character": 8
            }
          ],
          "type": {
            "type": "reference",
            "id": 1223,
            "typeArguments": [
              {
                "type": "reference",
                "id": 1158,
                "qualifiedName": "React.Context.T",
                "package": "@types/react",
                "name": "T"
              }
            ],
            "qualifiedName": "React.Consumer",
            "package": "@types/react",
            "name": "Consumer"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1155,
          "name": "Provider",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 381,
              "character": 8
            }
          ],
          "type": {
            "type": "reference",
            "id": 1221,
            "typeArguments": [
              {
                "type": "reference",
                "id": 1158,
                "qualifiedName": "React.Context.T",
                "package": "@types/react",
                "name": "T"
              }
            ],
            "qualifiedName": "React.Provider",
            "package": "@types/react",
            "name": "Provider"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1157,
          "name": "displayName",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 383,
              "character": 8
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [1156, 1155, 1157]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 380,
          "character": 14
        }
      ],
      "typeParameter": [
        {
          "id": 1158,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1159": {
      "id": 1159,
      "name": "Readonly",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "comment": {
        "shortText": "Make all properties in T readonly",
        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Make all properties in T readonly\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
          "line": 1545,
          "character": 5
        }
      ],
      "typeParameter": [
        {
          "id": 1160,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "type": {
        "type": "mapped",
        "parameter": "P",
        "parameterType": {
          "type": "typeOperator",
          "operator": "keyof",
          "target": {
            "type": "reference",
            "id": 1160,
            "qualifiedName": "T",
            "package": "typescript",
            "name": "T"
          }
        },
        "templateType": {
          "type": "indexedAccess",
          "indexType": {
            "type": "reference",
            "qualifiedName": "P",
            "package": "typescript",
            "name": "P"
          },
          "objectType": {
            "type": "reference",
            "id": 1160,
            "qualifiedName": "T",
            "package": "typescript",
            "name": "T"
          }
        },
        "readonlyModifier": "+"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1161": {
      "id": 1161,
      "name": "IteratorResult",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          "line": 41,
          "character": 5
        }
      ],
      "typeParameter": [
        {
          "id": 1162,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1163,
          "name": "TReturn",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "default": {
            "type": "intrinsic",
            "name": "any"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "reference",
            "id": 1213,
            "typeArguments": [
              {
                "type": "reference",
                "id": 1162,
                "qualifiedName": "T",
                "package": "typescript",
                "name": "T"
              }
            ],
            "qualifiedName": "IteratorYieldResult",
            "package": "typescript",
            "name": "IteratorYieldResult"
          },
          {
            "type": "reference",
            "id": 1217,
            "typeArguments": [
              {
                "type": "reference",
                "id": 1163,
                "qualifiedName": "TReturn",
                "package": "typescript",
                "name": "TReturn"
              }
            ],
            "qualifiedName": "IteratorReturnResult",
            "package": "typescript",
            "name": "IteratorReturnResult"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1164": {
      "id": 1164,
      "name": "Pick",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "comment": {
        "shortText": "From T, pick a set of properties whose keys are in the union K",
        "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"From T, pick a set of properties whose keys are in the union K\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
          "line": 1552,
          "character": 5
        }
      ],
      "typeParameter": [
        {
          "id": 1165,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1166,
          "name": "K",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "type": {
            "type": "typeOperator",
            "operator": "keyof",
            "target": {
              "type": "reference",
              "id": 1165,
              "qualifiedName": "T",
              "package": "typescript",
              "name": "T"
            }
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "type": {
        "type": "mapped",
        "parameter": "P",
        "parameterType": {
          "type": "reference",
          "id": 1166,
          "qualifiedName": "K",
          "package": "typescript",
          "name": "K"
        },
        "templateType": {
          "type": "indexedAccess",
          "indexType": {
            "type": "reference",
            "qualifiedName": "P",
            "package": "typescript",
            "name": "P"
          },
          "objectType": {
            "type": "reference",
            "id": 1165,
            "qualifiedName": "T",
            "package": "typescript",
            "name": "T"
          }
        }
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1167": {
      "id": 1167,
      "name": "ReactInstance",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 441,
          "character": 9
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "reference",
            "id": 987,
            "typeArguments": [
              {
                "type": "intrinsic",
                "name": "any"
              }
            ],
            "qualifiedName": "React.Component",
            "package": "@types/react",
            "name": "Component"
          },
          {
            "type": "reference",
            "qualifiedName": "Element",
            "package": "typescript",
            "name": "Element"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1168": {
      "id": 1168,
      "name": "Error",
      "kind": 32,
      "kindString": "Variable",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es5.d.ts",
          "line": 1033,
          "character": 12
        }
      ],
      "type": {
        "type": "reference",
        "qualifiedName": "ErrorConstructor",
        "package": "typescript",
        "name": "ErrorConstructor"
      },
      "extendedBy": [
        {
          "type": "reference",
          "id": 564,
          "name": "InvalidTimeError"
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1173": {
      "id": 1173,
      "name": "ErrorInfo",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1174,
          "name": "componentStack",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "comment": {
            "shortText": "Captures which component contained the exception, and its ancestors.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Captures which component contained the exception, and its ancestors.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 2897,
              "character": 8
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "string"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [1174]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 2893,
          "character": 14
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1175": {
      "id": 1175,
      "name": "NewLifecycle",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1180,
          "name": "componentDidUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1181,
              "name": "componentDidUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately after updating occurs. Not called for the initial render.",
                "text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately after updating occurs. Not called for the initial render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1182,
                  "name": "prevProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1185,
                        "qualifiedName": "React.NewLifecycle.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1183,
                  "name": "prevState",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1186,
                        "qualifiedName": "React.NewLifecycle.S",
                        "package": "@types/react",
                        "name": "S"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1184,
                  "name": "snapshot",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true,
                    "isOptional": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1187,
                    "qualifiedName": "React.NewLifecycle.SS",
                    "package": "@types/react",
                    "name": "SS"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1176,
          "name": "getSnapshotBeforeUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1177,
              "name": "getSnapshotBeforeUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
                "text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Runs before React applies the result of \", _jsx(_components.code, {\n        children: \"render\"\n      }), \" to the document, and\\nreturns an object to be given to componentDidUpdate. Useful for saving\\nthings such as scroll position before \", _jsx(_components.code, {\n        children: \"render\"\n      }), \" causes changes to it.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\\nlifecycle events from running.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1178,
                  "name": "prevProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1185,
                        "qualifiedName": "React.NewLifecycle.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1179,
                  "name": "prevState",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1186,
                        "qualifiedName": "React.NewLifecycle.S",
                        "package": "@types/react",
                        "name": "S"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "reference",
                    "id": 1187,
                    "qualifiedName": "React.NewLifecycle.SS",
                    "package": "@types/react",
                    "name": "SS"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Methods",
          "kind": 2048,
          "children": [1180, 1176]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 668,
          "character": 14
        }
      ],
      "typeParameter": [
        {
          "id": 1185,
          "name": "P",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1186,
          "name": "S",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1187,
          "name": "SS",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "id": 1106,
          "name": "ComponentLifecycle"
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1188": {
      "id": 1188,
      "name": "DeprecatedLifecycle",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1191,
          "name": "UNSAFE_componentWillMount",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1192,
              "name": "UNSAFE_componentWillMount",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
                "text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use componentDidMount or the constructor instead"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Called immediately before mounting occurs, and before \", _jsx(_components.code, {\n        children: \"Component#render\"\n      }), \".\\nAvoid introducing any side-effects or subscriptions in this method.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.p, {\n        children: \"This method will not stop working in React 17.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use componentDidMount or the constructor instead\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use componentDidMount or the constructor instead",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1197,
          "name": "UNSAFE_componentWillReceiveProps",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1198,
              "name": "UNSAFE_componentWillReceiveProps",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
                "text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use static getDerivedStateFromProps instead"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called when the component may be receiving new props.\\nReact may call this even if props have not changed, so be sure to compare new and existing\\nprops if you only want to handle changes.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Calling \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" generally does not trigger this method.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This method will not stop working in React 17.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1199,
                  "name": "nextProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1211,
                        "qualifiedName": "React.DeprecatedLifecycle.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1200,
                  "name": "nextContext",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use static getDerivedStateFromProps instead\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use static getDerivedStateFromProps instead",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1206,
          "name": "UNSAFE_componentWillUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1207,
              "name": "UNSAFE_componentWillUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
                "text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use getSnapshotBeforeUpdate instead"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately before rendering when new props or state is received. Not called for the initial render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Note: You cannot call \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" here.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"This method will not stop working in React 17.\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1208,
                  "name": "nextProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1211,
                        "qualifiedName": "React.DeprecatedLifecycle.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1209,
                  "name": "nextState",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1212,
                        "qualifiedName": "React.DeprecatedLifecycle.S",
                        "package": "@types/react",
                        "name": "S"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1210,
                  "name": "nextContext",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use getSnapshotBeforeUpdate instead\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use getSnapshotBeforeUpdate instead",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1189,
          "name": "componentWillMount",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1190,
              "name": "componentWillMount",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
                "text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [\"Called immediately before mounting occurs, and before \", _jsx(_components.code, {\n        children: \"Component#render\"\n      }), \".\\nAvoid introducing any side-effects or subscriptions in this method.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use componentDidMount or the constructor instead; will stop working in React 17\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use componentDidMount or the constructor instead; will stop working in React 17",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1193,
          "name": "componentWillReceiveProps",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1194,
              "name": "componentWillReceiveProps",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
                "text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called when the component may be receiving new props.\\nReact may call this even if props have not changed, so be sure to compare new and existing\\nprops if you only want to handle changes.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Calling \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" generally does not trigger this method.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1195,
                  "name": "nextProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1211,
                        "qualifiedName": "React.DeprecatedLifecycle.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1196,
                  "name": "nextContext",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use static getDerivedStateFromProps instead; will stop working in React 17\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1201,
          "name": "componentWillUpdate",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "signatures": [
            {
              "id": 1202,
              "name": "componentWillUpdate",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
                "text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
                "tags": [
                  {
                    "tag": "deprecated",
                    "text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
                  },
                  {
                    "tag": "see",
                    "text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
                  }
                ],
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Called immediately before rendering when new props or state is received. Not called for the initial render.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
                "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Note: You cannot call \", _jsx(_components.code, {\n          children: \"Component#setState\"\n        }), \" here.\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\\nprevents this from being invoked.\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "parameters": [
                {
                  "id": 1203,
                  "name": "nextProps",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1211,
                        "qualifiedName": "React.DeprecatedLifecycle.P",
                        "package": "@types/react",
                        "name": "P"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1204,
                  "name": "nextState",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1159,
                    "typeArguments": [
                      {
                        "type": "reference",
                        "id": 1212,
                        "qualifiedName": "React.DeprecatedLifecycle.S",
                        "package": "@types/react",
                        "name": "S"
                      }
                    ],
                    "qualifiedName": "Readonly",
                    "package": "typescript",
                    "name": "Readonly"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                },
                {
                  "id": 1205,
                  "name": "nextContext",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "intrinsic",
                "name": "void"
              },
              "docFlags": {
                "deprecated": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "tagsByName": {
                "deprecated": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17",
                "see": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"
              }
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Methods",
          "kind": 2048,
          "children": [1191, 1197, 1206, 1189, 1193, 1201]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 686,
          "character": 14
        }
      ],
      "typeParameter": [
        {
          "id": 1211,
          "name": "P",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1212,
          "name": "S",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "id": 1106,
          "name": "ComponentLifecycle"
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1213": {
      "id": 1213,
      "name": "IteratorYieldResult",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1214,
          "name": "done",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "line": 32,
              "character": 4
            }
          ],
          "type": {
            "type": "literal",
            "value": false
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1215,
          "name": "value",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "line": 33,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 1216,
            "qualifiedName": "IteratorYieldResult.TYield",
            "package": "typescript",
            "name": "TYield"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [1214, 1215]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          "line": 31,
          "character": 10
        }
      ],
      "typeParameter": [
        {
          "id": 1216,
          "name": "TYield",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1217": {
      "id": 1217,
      "name": "IteratorReturnResult",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1218,
          "name": "done",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "line": 37,
              "character": 4
            }
          ],
          "type": {
            "type": "literal",
            "value": true
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1219,
          "name": "value",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
              "line": 38,
              "character": 4
            }
          ],
          "type": {
            "type": "reference",
            "id": 1220,
            "qualifiedName": "IteratorReturnResult.TReturn",
            "package": "typescript",
            "name": "TReturn"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [1218, 1219]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/typescript/lib/lib.es2015.iterable.d.ts",
          "line": 36,
          "character": 10
        }
      ],
      "typeParameter": [
        {
          "id": 1220,
          "name": "TReturn",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1221": {
      "id": 1221,
      "name": "Provider",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 378,
          "character": 9
        }
      ],
      "typeParameter": [
        {
          "id": 1222,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "type": {
        "type": "reference",
        "id": 1225,
        "typeArguments": [
          {
            "type": "reference",
            "id": 1231,
            "typeArguments": [
              {
                "type": "reference",
                "id": 1222,
                "qualifiedName": "T",
                "package": "@types/react",
                "name": "T"
              }
            ],
            "qualifiedName": "React.ProviderProps",
            "package": "@types/react",
            "name": "ProviderProps"
          }
        ],
        "qualifiedName": "React.ProviderExoticComponent",
        "package": "@types/react",
        "name": "ProviderExoticComponent"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1223": {
      "id": 1223,
      "name": "Consumer",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 379,
          "character": 9
        }
      ],
      "typeParameter": [
        {
          "id": 1224,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "type": {
        "type": "reference",
        "id": 1235,
        "typeArguments": [
          {
            "type": "reference",
            "id": 1241,
            "typeArguments": [
              {
                "type": "reference",
                "id": 1224,
                "qualifiedName": "T",
                "package": "@types/react",
                "name": "T"
              }
            ],
            "qualifiedName": "React.ConsumerProps",
            "package": "@types/react",
            "name": "ConsumerProps"
          }
        ],
        "qualifiedName": "React.ExoticComponent",
        "package": "@types/react",
        "name": "ExoticComponent"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1225": {
      "id": 1225,
      "name": "ProviderExoticComponent",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1227,
          "name": "$$typeof",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isReadonly": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 363,
              "character": 17
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "symbol"
          },
          "inheritedFrom": {
            "type": "reference",
            "id": 1236,
            "name": "ExoticComponent.$$typeof"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1226,
          "name": "propTypes",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 371,
              "character": 8
            }
          ],
          "type": {
            "type": "reference",
            "id": 1247,
            "typeArguments": [
              {
                "type": "reference",
                "id": 1228,
                "qualifiedName": "React.ProviderExoticComponent.P",
                "package": "@types/react",
                "name": "P"
              }
            ],
            "qualifiedName": "React.WeakValidationMap",
            "package": "@types/react",
            "name": "WeakValidationMap"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [1227, 1226]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 370,
          "character": 14
        }
      ],
      "typeParameter": [
        {
          "id": 1228,
          "name": "P",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "signatures": [
        {
          "id": 1229,
          "name": "ProviderExoticComponent",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {
            "isExternal": true
          },
          "comment": {
            "shortText": "**NOTE**: Exotic components are not callable.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      strong: \"strong\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NOTE\"\n      }), \": Exotic components are not callable.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "parameters": [
            {
              "id": 1230,
              "name": "props",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {
                "isExternal": true
              },
              "type": {
                "type": "reference",
                "id": 1228,
                "qualifiedName": "React.ProviderExoticComponent.P",
                "package": "@types/react",
                "name": "P"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "literal",
                "value": null
              },
              {
                "type": "reference",
                "id": 726,
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "reference",
                        "id": 966,
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        ],
                        "qualifiedName": "React.JSXElementConstructor",
                        "package": "@types/react",
                        "name": "JSXElementConstructor"
                      }
                    ]
                  }
                ],
                "qualifiedName": "React.ReactElement",
                "package": "@types/react",
                "name": "ReactElement"
              }
            ]
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "extendedTypes": [
        {
          "type": "reference",
          "id": 1235,
          "typeArguments": [
            {
              "type": "reference",
              "id": 1228,
              "qualifiedName": "React.ProviderExoticComponent.P",
              "package": "@types/react",
              "name": "P"
            }
          ],
          "qualifiedName": "React.ExoticComponent",
          "package": "@types/react",
          "name": "ExoticComponent"
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1231": {
      "id": 1231,
      "name": "ProviderProps",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1233,
          "name": "children",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 340,
              "character": 8
            }
          ],
          "type": {
            "type": "reference",
            "id": 717,
            "qualifiedName": "React.ReactNode",
            "package": "@types/react",
            "name": "ReactNode"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1232,
          "name": "value",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 339,
              "character": 8
            }
          ],
          "type": {
            "type": "reference",
            "id": 1234,
            "qualifiedName": "React.ProviderProps.T",
            "package": "@types/react",
            "name": "T"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [1233, 1232]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 338,
          "character": 14
        }
      ],
      "typeParameter": [
        {
          "id": 1234,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1235": {
      "id": 1235,
      "name": "ExoticComponent",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1236,
          "name": "$$typeof",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isReadonly": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 363,
              "character": 17
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "symbol"
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [1236]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 358,
          "character": 14
        }
      ],
      "typeParameter": [
        {
          "id": 1238,
          "name": "P",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "default": {
            "type": "reflection",
            "declaration": {
              "id": 1237,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {
                "isExternal": true
              },
              "sources": [
                {
                  "fileName": "node_modules/@types/react/index.d.ts",
                  "line": 358,
                  "character": 34
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "signatures": [
        {
          "id": 1239,
          "name": "ExoticComponent",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {
            "isExternal": true
          },
          "comment": {
            "shortText": "**NOTE**: Exotic components are not callable.",
            "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      strong: \"strong\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"NOTE\"\n      }), \": Exotic components are not callable.\"]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
          },
          "parameters": [
            {
              "id": 1240,
              "name": "props",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {
                "isExternal": true
              },
              "type": {
                "type": "reference",
                "id": 1238,
                "qualifiedName": "React.ExoticComponent.P",
                "package": "@types/react",
                "name": "P"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "literal",
                "value": null
              },
              {
                "type": "reference",
                "id": 726,
                "typeArguments": [
                  {
                    "type": "intrinsic",
                    "name": "any"
                  },
                  {
                    "type": "union",
                    "types": [
                      {
                        "type": "intrinsic",
                        "name": "string"
                      },
                      {
                        "type": "reference",
                        "id": 966,
                        "typeArguments": [
                          {
                            "type": "intrinsic",
                            "name": "any"
                          }
                        ],
                        "qualifiedName": "React.JSXElementConstructor",
                        "package": "@types/react",
                        "name": "JSXElementConstructor"
                      }
                    ]
                  }
                ],
                "qualifiedName": "React.ReactElement",
                "package": "@types/react",
                "name": "ReactElement"
              }
            ]
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "extendedBy": [
        {
          "type": "reference",
          "id": 1225,
          "name": "ProviderExoticComponent"
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1236": {
      "id": 1236,
      "name": "$$typeof",
      "kind": 1024,
      "kindString": "Property",
      "flags": {
        "isExternal": true,
        "isReadonly": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 363,
          "character": 17
        }
      ],
      "type": {
        "type": "intrinsic",
        "name": "symbol"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1241": {
      "id": 1241,
      "name": "ConsumerProps",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1245,
          "name": "unstable_observedBits",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 345,
              "character": 8
            }
          ],
          "type": {
            "type": "intrinsic",
            "name": "number"
          },
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1242,
          "name": "children",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/react/index.d.ts",
              "line": 344,
              "character": 8
            }
          ],
          "signatures": [
            {
              "id": 1243,
              "name": "children",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "parameters": [
                {
                  "id": 1244,
                  "name": "value",
                  "kind": 32768,
                  "kindString": "Parameter",
                  "flags": {
                    "isExternal": true
                  },
                  "type": {
                    "type": "reference",
                    "id": 1246,
                    "qualifiedName": "React.ConsumerProps.T",
                    "package": "@types/react",
                    "name": "T"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "type": {
                "type": "reference",
                "id": 717,
                "qualifiedName": "React.ReactNode",
                "package": "@types/react",
                "name": "ReactNode"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [1245]
        },
        {
          "title": "Methods",
          "kind": 2048,
          "children": [1242]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 343,
          "character": 14
        }
      ],
      "typeParameter": [
        {
          "id": 1246,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1247": {
      "id": 1247,
      "name": "WeakValidationMap",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 2822,
          "character": 9
        }
      ],
      "typeParameter": [
        {
          "id": 1248,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "type": {
        "type": "mapped",
        "parameter": "K",
        "parameterType": {
          "type": "typeOperator",
          "operator": "keyof",
          "target": {
            "type": "reference",
            "id": 1248,
            "qualifiedName": "T",
            "package": "@types/react",
            "name": "T"
          }
        },
        "templateType": {
          "type": "conditional",
          "checkType": {
            "type": "literal",
            "value": null
          },
          "extendsType": {
            "type": "indexedAccess",
            "indexType": {
              "type": "reference",
              "qualifiedName": "K",
              "package": "@types/react",
              "name": "K"
            },
            "objectType": {
              "type": "reference",
              "id": 1248,
              "qualifiedName": "T",
              "package": "@types/react",
              "name": "T"
            }
          },
          "trueType": {
            "type": "reference",
            "id": 1249,
            "typeArguments": [
              {
                "type": "union",
                "types": [
                  {
                    "type": "indexedAccess",
                    "indexType": {
                      "type": "reference",
                      "qualifiedName": "K",
                      "package": "@types/react",
                      "name": "K"
                    },
                    "objectType": {
                      "type": "reference",
                      "id": 1248,
                      "qualifiedName": "T",
                      "package": "@types/react",
                      "name": "T"
                    }
                  },
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "undefined"
                  }
                ]
              }
            ],
            "qualifiedName": "React.Validator",
            "package": "@types/react",
            "name": "Validator"
          },
          "falseType": {
            "type": "conditional",
            "checkType": {
              "type": "intrinsic",
              "name": "undefined"
            },
            "extendsType": {
              "type": "indexedAccess",
              "indexType": {
                "type": "reference",
                "qualifiedName": "K",
                "package": "@types/react",
                "name": "K"
              },
              "objectType": {
                "type": "reference",
                "id": 1248,
                "qualifiedName": "T",
                "package": "@types/react",
                "name": "T"
              }
            },
            "trueType": {
              "type": "reference",
              "id": 1249,
              "typeArguments": [
                {
                  "type": "union",
                  "types": [
                    {
                      "type": "indexedAccess",
                      "indexType": {
                        "type": "reference",
                        "qualifiedName": "K",
                        "package": "@types/react",
                        "name": "K"
                      },
                      "objectType": {
                        "type": "reference",
                        "id": 1248,
                        "qualifiedName": "T",
                        "package": "@types/react",
                        "name": "T"
                      }
                    },
                    {
                      "type": "literal",
                      "value": null
                    },
                    {
                      "type": "intrinsic",
                      "name": "undefined"
                    }
                  ]
                }
              ],
              "qualifiedName": "React.Validator",
              "package": "@types/react",
              "name": "Validator"
            },
            "falseType": {
              "type": "reference",
              "id": 1249,
              "typeArguments": [
                {
                  "type": "indexedAccess",
                  "indexType": {
                    "type": "reference",
                    "qualifiedName": "K",
                    "package": "@types/react",
                    "name": "K"
                  },
                  "objectType": {
                    "type": "reference",
                    "id": 1248,
                    "qualifiedName": "T",
                    "package": "@types/react",
                    "name": "T"
                  }
                }
              ],
              "qualifiedName": "React.Validator",
              "package": "@types/react",
              "name": "Validator"
            }
          }
        },
        "optionalModifier": "+"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1249": {
      "id": 1249,
      "name": "Validator",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {
        "isExternal": true
      },
      "sources": [
        {
          "fileName": "node_modules/@types/react/index.d.ts",
          "line": 2816,
          "character": 9
        }
      ],
      "typeParameter": [
        {
          "id": 1250,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "type": {
        "type": "reference",
        "id": 1251,
        "typeArguments": [
          {
            "type": "reference",
            "id": 1250,
            "qualifiedName": "T",
            "package": "@types/react",
            "name": "T"
          }
        ],
        "qualifiedName": "Validator",
        "package": "@types/prop-types",
        "name": "PropTypes.Validator"
      },
      "docFlags": {},
      "tagsByName": {}
    },
    "1251": {
      "id": 1251,
      "name": "Validator",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1252,
          "name": "[nominalTypeHack]",
          "kind": 1024,
          "kindString": "Property",
          "flags": {
            "isExternal": true,
            "isOptional": true
          },
          "sources": [
            {
              "fileName": "node_modules/@types/prop-types/index.d.ts",
              "line": 42,
              "character": 4
            }
          ],
          "type": {
            "type": "reflection",
            "declaration": {
              "id": 1253,
              "name": "__type",
              "kind": 65536,
              "kindString": "Type literal",
              "flags": {
                "isExternal": true
              },
              "children": [
                {
                  "id": 1254,
                  "name": "type",
                  "kind": 1024,
                  "kindString": "Property",
                  "flags": {
                    "isExternal": true
                  },
                  "sources": [
                    {
                      "fileName": "node_modules/@types/prop-types/index.d.ts",
                      "line": 43,
                      "character": 8
                    }
                  ],
                  "type": {
                    "type": "reference",
                    "id": 1255,
                    "qualifiedName": "Validator.T",
                    "package": "@types/prop-types",
                    "name": "T"
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              ],
              "groups": [
                {
                  "title": "Properties",
                  "kind": 1024,
                  "children": [1254]
                }
              ],
              "docFlags": {},
              "tagsByName": {}
            }
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Properties",
          "kind": 1024,
          "children": [1252]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/prop-types/index.d.ts",
          "line": 40,
          "character": 17
        }
      ],
      "typeParameter": [
        {
          "id": 1255,
          "name": "T",
          "kind": 131072,
          "kindString": "Type parameter",
          "flags": {
            "isExternal": true
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "signatures": [
        {
          "id": 1256,
          "name": "Validator",
          "kind": 4096,
          "kindString": "Call signature",
          "flags": {
            "isExternal": true
          },
          "parameters": [
            {
              "id": 1257,
              "name": "props",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {
                "isExternal": true
              },
              "type": {
                "type": "reflection",
                "declaration": {
                  "id": 1258,
                  "name": "__type",
                  "kind": 65536,
                  "kindString": "Type literal",
                  "flags": {
                    "isExternal": true
                  },
                  "indexSignature": {
                    "id": 1259,
                    "name": "__index",
                    "kind": 8192,
                    "kindString": "Index signature",
                    "flags": {
                      "isExternal": true
                    },
                    "parameters": [
                      {
                        "id": 1260,
                        "name": "key",
                        "kind": 32768,
                        "flags": {
                          "isExternal": true
                        },
                        "type": {
                          "type": "intrinsic",
                          "name": "string"
                        },
                        "docFlags": {},
                        "tagsByName": {}
                      }
                    ],
                    "type": {
                      "type": "intrinsic",
                      "name": "any"
                    },
                    "docFlags": {},
                    "tagsByName": {}
                  },
                  "docFlags": {},
                  "tagsByName": {}
                }
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 1261,
              "name": "propName",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {
                "isExternal": true
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 1262,
              "name": "componentName",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {
                "isExternal": true
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 1263,
              "name": "location",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {
                "isExternal": true
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "docFlags": {},
              "tagsByName": {}
            },
            {
              "id": 1264,
              "name": "propFullName",
              "kind": 32768,
              "kindString": "Parameter",
              "flags": {
                "isExternal": true
              },
              "type": {
                "type": "intrinsic",
                "name": "string"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "type": {
            "type": "union",
            "types": [
              {
                "type": "literal",
                "value": null
              },
              {
                "type": "reference",
                "id": 1168,
                "qualifiedName": "Error",
                "package": "typescript",
                "name": "Error"
              }
            ]
          },
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    },
    "1713": {
      "id": 1713,
      "name": "CallSite",
      "kind": 256,
      "kindString": "Interface",
      "flags": {
        "isExternal": true
      },
      "children": [
        {
          "id": 1728,
          "name": "getColumnNumber",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1729,
              "name": "getColumnNumber",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Current column number [if this function was defined in a script]",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Current column number [if this function was defined in a script]\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1730,
          "name": "getEvalOrigin",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1731,
              "name": "getEvalOrigin",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "A call site object representing the location where eval was called\n[if this function was created using a call to eval]",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"A call site object representing the location where eval was called\\n[if this function was created using a call to eval]\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "undefined"
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1724,
          "name": "getFileName",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1725,
              "name": "getFileName",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Name of the script [if this function was defined in a script]",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Name of the script [if this function was defined in a script]\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1718,
          "name": "getFunction",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1719,
              "name": "getFunction",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Current function",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Current function\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "intrinsic",
                    "name": "undefined"
                  },
                  {
                    "type": "reference",
                    "qualifiedName": "Function",
                    "package": "typescript",
                    "name": "Function"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1720,
          "name": "getFunctionName",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1721,
              "name": "getFunctionName",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Name of the current function, typically its name property.\nIf a name property is not available an attempt will be made to try\nto infer a name from the function's context.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Name of the current function, typically its name property.\\nIf a name property is not available an attempt will be made to try\\nto infer a name from the function's context.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1726,
          "name": "getLineNumber",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1727,
              "name": "getLineNumber",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Current line number [if this function was defined in a script]",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Current line number [if this function was defined in a script]\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "number"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1722,
          "name": "getMethodName",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1723,
              "name": "getMethodName",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Name of the property [of \"this\" or one of its prototypes] that holds\nthe current function",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Name of the property [of \\\"this\\\" or one of its prototypes] that holds\\nthe current function\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1714,
          "name": "getThis",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1715,
              "name": "getThis",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Value of \"this\"",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Value of \\\"this\\\"\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "any"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1716,
          "name": "getTypeName",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1717,
              "name": "getTypeName",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Type of \"this\" as a string.\nThis is the name of the function stored in the constructor field of\n\"this\", if available.  Otherwise the object's [[Class]] internal\nproperty.",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Type of \\\"this\\\" as a string.\\nThis is the name of the function stored in the constructor field of\\n\\\"this\\\", if available.  Otherwise the object's [[Class]] internal\\nproperty.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "union",
                "types": [
                  {
                    "type": "literal",
                    "value": null
                  },
                  {
                    "type": "intrinsic",
                    "name": "string"
                  }
                ]
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1738,
          "name": "isConstructor",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1739,
              "name": "isConstructor",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Is this a constructor call?",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Is this a constructor call?\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1734,
          "name": "isEval",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1735,
              "name": "isEval",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Does this call take place in code defined by a call to eval?",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Does this call take place in code defined by a call to eval?\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1736,
          "name": "isNative",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1737,
              "name": "isNative",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Is this call in native V8 code?",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Is this call in native V8 code?\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        },
        {
          "id": 1732,
          "name": "isToplevel",
          "kind": 2048,
          "kindString": "Method",
          "flags": {
            "isExternal": true
          },
          "signatures": [
            {
              "id": 1733,
              "name": "isToplevel",
              "kind": 4096,
              "kindString": "Call signature",
              "flags": {
                "isExternal": true
              },
              "comment": {
                "shortText": "Is this a toplevel invocation, that is, is \"this\" the global object?",
                "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Is this a toplevel invocation, that is, is \\\"this\\\" the global object?\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
              },
              "type": {
                "type": "intrinsic",
                "name": "boolean"
              },
              "docFlags": {},
              "tagsByName": {}
            }
          ],
          "docFlags": {},
          "tagsByName": {}
        }
      ],
      "groups": [
        {
          "title": "Methods",
          "kind": 2048,
          "children": [1728, 1730, 1724, 1718, 1720, 1726, 1722, 1714, 1716, 1738, 1734, 1736, 1732]
        }
      ],
      "sources": [
        {
          "fileName": "node_modules/@types/node/globals.d.ts",
          "line": 471,
          "character": 14
        }
      ],
      "docFlags": {},
      "tagsByName": {}
    }
  },
  "meta": {
    "packageName": "util",
    "permaLink": "util/NodeLabeled",
    "menuGroup": "Labeled"
  }
}
