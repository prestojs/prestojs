{
  "declaration": {
    "id": 3220,
    "name": "parseTime",
    "kind": 64,
    "kindString": "Function",
    "flags": {},
    "sources": [
      {
        "fileName": "js-packages/@prestojs/util/src/time.ts",
        "line": 49,
        "character": 16
      }
    ],
    "signatures": [
      {
        "id": 3221,
        "name": "parseTime",
        "kind": 4096,
        "kindString": "Call signature",
        "flags": {},
        "comment": {
          "shortText": "Parse a string into its constituent time parts",
          "text": "Returns an object containing the `hour`, `minute`, `second`, `millisecond` and optional `timezone` values.\n\nAccepts input of the form `H:MM[:SS[:.mmm:[+TZ]]]` where `H` is hours, `MM` is minutes, `SS` is seconds, `mmm` is\nmilliseconds and `+TZ` is the timezone (eg. +10:00).\n\nSeconds & milliseconds are optional and will default to 0 if not in the string, timezone is optional and will be\nleft as undefined if not specified.\n\nNOTE: If you pass a `Date` object then the timezone offset will always be whatever the local browser/env timezone\nis (ie. it's not possible to have a javascript `Date` object in another timezone).\n\n```js\nparseTime(\"3:55\")\n// { hour: 3, minute: 55, seconds: 0, milliseconds: 0 }\nparseTime(\"03:55:20\")\n// { hour: 3, minute: 55, seconds: 20, milliseconds: 0 }\nparseTime(\"03:55:20.600\")\n// { hour: 3, minute: 55, seconds: 20, milliseconds: 600 }\nparseTime(\"03:55:20.600+10:00\")\n// { hour: 3, minute: 55, seconds: 20, milliseconds: 600, timezoneOffset: -600 }\n```\n",
          "tags": [
            {
              "tag": "extract-docs",
              "text": ""
            },
            {
              "tag": "menu-group",
              "text": "Time\n"
            }
          ],
          "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Parse a string into its constituent time parts\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
          "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      pre: \"pre\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"Returns an object containing the \", _jsx(_components.code, {\n          children: \"hour\"\n        }), \", \", _jsx(_components.code, {\n          children: \"minute\"\n        }), \", \", _jsx(_components.code, {\n          children: \"second\"\n        }), \", \", _jsx(_components.code, {\n          children: \"millisecond\"\n        }), \" and optional \", _jsx(_components.code, {\n          children: \"timezone\"\n        }), \" values.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Accepts input of the form \", _jsx(_components.code, {\n          children: \"H:MM[:SS[:.mmm:[+TZ]]]\"\n        }), \" where \", _jsx(_components.code, {\n          children: \"H\"\n        }), \" is hours, \", _jsx(_components.code, {\n          children: \"MM\"\n        }), \" is minutes, \", _jsx(_components.code, {\n          children: \"SS\"\n        }), \" is seconds, \", _jsx(_components.code, {\n          children: \"mmm\"\n        }), \" is\\nmilliseconds and \", _jsx(_components.code, {\n          children: \"+TZ\"\n        }), \" is the timezone (eg. +10:00).\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Seconds & milliseconds are optional and will default to 0 if not in the string, timezone is optional and will be\\nleft as undefined if not specified.\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"NOTE: If you pass a \", _jsx(_components.code, {\n          children: \"Date\"\n        }), \" object then the timezone offset will always be whatever the local browser/env timezone\\nis (ie. it's not possible to have a javascript \", _jsx(_components.code, {\n          children: \"Date\"\n        }), \" object in another timezone).\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"parseTime(\\\"3:55\\\")\\n// { hour: 3, minute: 55, seconds: 0, milliseconds: 0 }\\nparseTime(\\\"03:55:20\\\")\\n// { hour: 3, minute: 55, seconds: 20, milliseconds: 0 }\\nparseTime(\\\"03:55:20.600\\\")\\n// { hour: 3, minute: 55, seconds: 20, milliseconds: 600 }\\nparseTime(\\\"03:55:20.600+10:00\\\")\\n// { hour: 3, minute: 55, seconds: 20, milliseconds: 600, timezoneOffset: -600 }\\n\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
        },
        "parameters": [
          {
            "id": 3222,
            "name": "value",
            "kind": 32768,
            "kindString": "Parameter",
            "flags": {},
            "comment": {
              "shortText": "The string value to parse\n",
              "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"The string value to parse\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
            },
            "type": {
              "type": "union",
              "types": [
                {
                  "type": "intrinsic",
                  "name": "string"
                },
                {
                  "type": "reference",
                  "qualifiedName": "Date",
                  "package": "typescript",
                  "name": "Date"
                }
              ]
            },
            "anchorId": "Parameter-value",
            "docFlags": {},
            "tagsByName": {}
          }
        ],
        "type": {
          "type": "reference",
          "name": "TimeParts"
        },
        "anchorId": "Call-signature-parseTime",
        "docFlags": {},
        "tagsByName": {
          "extract-docs": "",
          "menu-group": "Time"
        }
      }
    ],
    "docFlags": {},
    "tagsByName": {
      "extract-docs": "",
      "menu-group": "Time"
    },
    "slug": "util/parseTime"
  },
  "references": {},
  "meta": {
    "packageName": "util",
    "permaLink": "parseTime",
    "menuGroup": "Time"
  }
}