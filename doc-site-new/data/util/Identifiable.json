{
  "declaration": {
    "id": 2718,
    "name": "Identifiable",
    "kind": 256,
    "kindString": "Interface",
    "flags": {},
    "comment": {
      "shortText": "Interface for types that we can automatically extract a unique identifier from.",
      "text": "To confirm to the interface provide a `_key` property or getter.\n\n[ViewModelFactory](doc:viewModelFactory) conforms to this so anything that expects an Identifiable\nwill accept a ViewModel.\n\nImplementing this can save you having to pass explicit functions to identify an item in other parts of the system\n(eg. for [AsyncChoices](doc:AsyncChoices) or [useAsyncValue](doc:useAsyncValue))\n",
      "tags": [
        {
          "tag": "extract-docs",
          "text": ""
        },
        {
          "tag": "menu-group",
          "text": "Identifiable\n"
        }
      ],
      "shortTextMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsx(_components.p, {\n      children: \"Interface for types that we can automatically extract a unique identifier from.\"\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n",
      "textMdx": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      p: \"p\",\n      code: \"code\",\n      a: \"a\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsxs(_components.p, {\n        children: [\"To confirm to the interface provide a \", _jsx(_components.code, {\n          children: \"_key\"\n        }), \" property or getter.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/viewmodel/viewModelFactory\",\n          children: \"ViewModelFactory\"\n        }), \" conforms to this so anything that expects an Identifiable\\nwill accept a ViewModel.\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Implementing this can save you having to pass explicit functions to identify an item in other parts of the system\\n(eg. for \", _jsx(_components.a, {\n          href: \"/docs/viewmodel/fields/AsyncChoices\",\n          children: \"AsyncChoices\"\n        }), \" or \", _jsx(_components.a, {\n          href: \"/docs/util/useAsyncValue\",\n          children: \"useAsyncValue\"\n        }), \")\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n"
    },
    "children": [
      {
        "id": 2719,
        "name": "_key",
        "kind": 1024,
        "kindString": "Property",
        "flags": {},
        "sources": [
          {
            "fileName": "js-packages/@prestojs/util/src/identifiable.ts",
            "line": 20,
            "character": 4
          }
        ],
        "type": {
          "type": "reference",
          "id": 2717,
          "name": "Id"
        },
        "anchorId": "Properties-_key",
        "docFlags": {},
        "tagsByName": {}
      }
    ],
    "groups": [
      {
        "title": "Properties",
        "kind": 1024,
        "children": [
          2719
        ]
      }
    ],
    "sources": [
      {
        "fileName": "js-packages/@prestojs/util/src/identifiable.ts",
        "line": 19,
        "character": 17
      }
    ],
    "docFlags": {},
    "tagsByName": {
      "extract-docs": "",
      "menu-group": "Identifiable"
    },
    "anchorId": "Interface-Identifiable",
    "slug": "util/Identifiable"
  },
  "references": {
    "2717": {
      "id": 2717,
      "name": "Id",
      "kind": 4194304,
      "kindString": "Type alias",
      "flags": {},
      "sources": [
        {
          "fileName": "js-packages/@prestojs/util/src/identifiable.ts",
          "line": 3,
          "character": 12
        }
      ],
      "type": {
        "type": "union",
        "types": [
          {
            "type": "reference",
            "name": "SingleId"
          },
          {
            "type": "reference",
            "name": "CompoundId"
          }
        ]
      },
      "docFlags": {},
      "tagsByName": {},
      "anchorId": "Type-alias-Id"
    }
  },
  "meta": {
    "packageName": "util",
    "permaLink": "Identifiable",
    "menuGroup": "Identifiable"
  }
}